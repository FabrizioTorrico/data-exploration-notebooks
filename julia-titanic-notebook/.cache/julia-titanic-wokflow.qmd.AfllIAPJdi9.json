{
    "cells": [
        {
            "id": "1",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "---\n",
                "title: \"Análisis Estadístico y ML del Titanic\"\n",
                "author: \"Fabrizio Torrico\"\n",
                "date: \"05/07/2025\"\n",
                "format:\n",
                "  html:\n",
                "    code-fold: false\n",
                "    code-tools: true\n",
                "    code-copy: true\n",
                "    toc: true\n",
                "    toc-depth: 3\n",
                "    fig-width: 10\n",
                "    fig-height: 6\n",
                "    embed-resources: true\n",
                "    error: true\n",
                "    warning: true\n",
                "    message: true\n",
                "    html-math-method: mathjax\n",
                "    include-in-header: |\n",
                "      <script src=\"https://public.tableau.com/javascripts/api/viz_v1.js\"></script>\n",
                "engine: julia\n",
                "\n",
                "---\n",
                "<img src=\"http://data.freehdw.com/ships-titanic-vehicles-best.jpg\"  Width=\"800\">\n",
                "\n",
                "<a id=\"introduction\" ></a><br>\n",
                "This kernel is for all aspiring data scientists to learn from and to review their knowledge. We will have a detailed statistical analysis of Titanic data set along with Machine learning model implementation. I am super excited to share my first kernel with the Kaggle community. As I go on in this journey and learn new topics, I will incorporate them with each new updates. So, check for them and please <b>leave a comment</b> if you have any suggestions to make this kernel better!! Going back to the topics of this kernel, I will do more in-depth visualizations to explain the data, and the machine learning classifiers will be used to predict passenger survival status.\n",
                "\n",
                "\n",
                "NOTE:\n",
                "\n",
                "- This is a julia translation\n",
                "- If you are reading this on github, I recommend you read this on <a href=\"https://www.kaggle.com/masumrumi/a-statistical-analysis-ml-workflow-of-titanic\">kaggle</a>\n",
                "- Follow me on github: \n",
                "\n",
                "# Kernel Goals\n",
                "\n",
                "<a id=\"aboutthiskernel\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "There are three primary goals of this kernel.\n",
                "\n",
                "- <b>Do a statistical analysis</b> of how some group of people was survived more than others.\n",
                "- <b>Do an exploratory data analysis(EDA)</b> of titanic with visualizations and storytelling.\n",
                "- <b>Predict</b>: Use machine learning classification models to predict the chances of passengers survival.\n",
                "\n",
                "P.S. If you want to learn more about regression models, try this [kernel](https://www.kaggle.com/masumrumi/a-stats-analysis-and-ml-workflow-of-house-pricing/edit/run/9585160).\n",
                "\n",
                "# Part 1: Importing Necessary Libraries and datasets\n",
                "\n",
                "---\n",
                "\n",
                "<a id=\"import_libraries**\"></a>\n",
                "\n",
                "## 1a. Loading libraries\n",
                "\n",
                "Python is a fantastic language with a vibrant community that produces many amazing libraries. I am not a big fan of importing everything at once for the newcomers. So, I am going to introduce a few necessary libraries for now, and as we go on, we will keep unboxing new libraries when it seems appropriate."
            ]
        },
        {
            "id": "2",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "using Pkg\n",
                "Pkg.activate(\".\")\n",
                "Pkg.add([\"IJulia\", \"DataFrames\", \"CSV\", \"CairoMakie\", \"StatsBase\",\n",
                "         \"Statistics\", \"MLJ\", \"MLJModels\", \"HypothesisTests\",\n",
                "         \"Distributions\", \"Missings\", \"CategoricalArrays\", \"AlgebraOfGraphics\", \"Chain\"])"
            ],
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": "\u001b[32m\u001b[1m  Activating\u001b[22m\u001b[39m project at `C:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook`\n\u001b[32m\u001b[1m   Resolving\u001b[22m\u001b[39m package versions...\n\u001b[32m\u001b[1m  No Changes\u001b[22m\u001b[39m to `C:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\Project.toml`\n\u001b[32m\u001b[1m  No Changes\u001b[22m\u001b[39m to `C:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\Manifest.toml`\n"
                }
            ],
            "execution_count": 1
        },
        {
            "id": "3",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "4",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 80643cb5-64f3-4180-92a9-2f8e83263ac6\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 33d54abf387474bce3017f1fc3832493355010c0\n",
                "#| tags: []\n",
                "import DataFrames as DF\n",
                "import CSV\n",
                "import CairoMakie as Makie\n",
                "import AlgebraOfGraphics as AoG\n",
                "import Statistics as Stats\n",
                "import StatsBase\n",
                "import Chain: @chain\n",
                "import Random: shuffle\n",
                "import IJulia\n",
                "\n",
                ""
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "5",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "6",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "readdir(\"./input/\")"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "3-element Vector{String}:\n \"gender_submission.csv\"\n \"test.csv\"\n \"train.csv\""
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "7",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## 1b. Loading Datasets\n",
                "\n",
                "<a id=\"load_data\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "After loading the necessary modules, we need to import the datasets. Many of the business problems usually come with a tremendous amount of messy data. We extract those data from many sources. I am hoping to write about that in a different kernel. For now, we are going to work with a less complicated and quite popular machine learning dataset."
            ]
        },
        {
            "id": "8",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "## Importing the datasets\n",
                "using CSV\n",
                "\n",
                "train = CSV.read(\"./input/train.csv\", DF.DataFrame)\n",
                "test = CSV.read(\"./input/test.csv\", DF.DataFrame);"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "9",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "You are probably wondering why two datasets? Also, Why have I named it \"train\" and \"test\"? To explain that I am going to give you an overall picture of the supervised machine learning process.\n",
                "\n",
                "\"Machine Learning\" is simply \"Machine\" and \"Learning\". Nothing more and nothing less. In a supervised machine learning process, we are giving machine/computer/models specific inputs or data(text/number/image/audio) to learn from aka we are training the machine to learn certain aspects based on the data and the output. Now, how can we determine that machine is actually learning what we are try to teach? That is where the test set comes to play. We withhold part of the data where we know the output/result of each datapoints, and we use this data to test the trained models. We then compare the outcomes to determine the performance of the algorithms. If you are a bit confused thats okay. I will explain more as we keep reading. Let's take a look at sample datasets."
            ]
        },
        {
            "id": "10",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "DF.first(train, 5)\n",
                "print(train.Pclass)"
            ],
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": "[3, 1, 3, 1, 3, 3, 1, 3, 3, 2  …  3, 3, 2, 3, 3, 2, 1, 3, 1, 3]"
                }
            ],
            "execution_count": 1
        },
        {
            "id": "11",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "12",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "@chain train begin\n",
                "    DF.dropmissing(:Age) # Drop rows with missing Age\n",
                "    DF.groupby(:Sex)\n",
                "    DF.combine(:Age => minimum => :MinAge)\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m2×2 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Sex     \u001b[0m\u001b[1m MinAge  \u001b[0m\n     │\u001b[90m String7 \u001b[0m\u001b[90m Float64 \u001b[0m\n─────┼──────────────────\n   1 │ male        0.42\n   2 │ female      0.75",
                        "text/html": "<div><div style = \"float: left;\"><span>2×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Sex</th><th style = \"text-align: left;\">MinAge</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">0.42</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">0.75</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|cc}\n\t& Sex & MinAge\\\\\n\t\\hline\n\t& String7 & Float64\\\\\n\t\\hline\n\t1 & male & 0.42 \\\\\n\t2 & female & 0.75 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "13",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "14",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "DF.describe(train, :eltype)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m12×2 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m variable    \u001b[0m\u001b[1m eltype                   \u001b[0m\n     │\u001b[90m Symbol      \u001b[0m\u001b[90m Type                     \u001b[0m\n─────┼───────────────────────────────────────\n   1 │ PassengerId  Int64\n   2 │ Survived     Int64\n   3 │ Pclass       Int64\n   4 │ Name         String\n   5 │ Sex          String7\n   6 │ Age          Union{Missing, Float64}\n   7 │ SibSp        Int64\n   8 │ Parch        Int64\n   9 │ Ticket       String31\n  10 │ Fare         Float64\n  11 │ Cabin        Union{Missing, String15}\n  12 │ Embarked     Union{Missing, String1}",
                        "text/html": "<div><div style = \"float: left;\"><span>12×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Type\" style = \"text-align: left;\">Type</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">PassengerId</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Survived</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Pclass</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Name</td><td style = \"text-align: left;\">String</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Sex</td><td style = \"text-align: left;\">String7</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Age</td><td style = \"text-align: left;\">Union{Missing, Float64}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">SibSp</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">Parch</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">Ticket</td><td style = \"text-align: left;\">String31</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Fare</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">Cabin</td><td style = \"text-align: left;\">Union{Missing, String15}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">Embarked</td><td style = \"text-align: left;\">Union{Missing, String1}</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|cc}\n\t& variable & eltype\\\\\n\t\\hline\n\t& Symbol & Type\\\\\n\t\\hline\n\t1 & PassengerId & Int64 \\\\\n\t2 & Survived & Int64 \\\\\n\t3 & Pclass & Int64 \\\\\n\t4 & Name & String \\\\\n\t5 & Sex & String7 \\\\\n\t6 & Age & Union\\{Missing, Float64\\} \\\\\n\t7 & SibSp & Int64 \\\\\n\t8 & Parch & Int64 \\\\\n\t9 & Ticket & String31 \\\\\n\t10 & Fare & Float64 \\\\\n\t11 & Cabin & Union\\{Missing, String15\\} \\\\\n\t12 & Embarked & Union\\{Missing, String1\\} \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "15",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## 1c. A Glimpse of the Datasets.\n",
                "\n",
                "<a id=\"glimpse\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "# Train Set"
            ]
        },
        {
            "id": "16",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "DF.first(train[shuffle(1:DF.nrow(train))[1:5], :], 5)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m5×12 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m PassengerId \u001b[0m\u001b[1m Survived \u001b[0m\u001b[1m Pclass \u001b[0m\u001b[1m Name                              \u001b[0m\u001b[1m Sex  \u001b[0m ⋯\n     │\u001b[90m Int64       \u001b[0m\u001b[90m Int64    \u001b[0m\u001b[90m Int64  \u001b[0m\u001b[90m String                            \u001b[0m\u001b[90m Strin\u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │          50         0       3  Arnold-Franchi, Mrs. Josef (Jose…  femal ⋯\n   2 │         445         1       3  Johannesen-Bratthammer, Mr. Bernt  male\n   3 │         146         0       2  Nicholls, Mr. Joseph Charles       male\n   4 │          12         1       1  Bonnell, Miss. Elizabeth           femal\n   5 │         545         0       1  Douglas, Mr. Walter Donald         male  ⋯\n\u001b[36m                                                               8 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>5×12 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">PassengerId</th><th style = \"text-align: left;\">Survived</th><th style = \"text-align: left;\">Pclass</th><th style = \"text-align: left;\">Name</th><th style = \"text-align: left;\">Sex</th><th style = \"text-align: left;\">Age</th><th style = \"text-align: left;\">SibSp</th><th style = \"text-align: left;\">Parch</th><th style = \"text-align: left;\">Ticket</th><th style = \"text-align: left;\">Fare</th><th style = \"text-align: left;\">Cabin</th><th style = \"text-align: left;\">Embarked</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"InlineStrings.String31\" style = \"text-align: left;\">String31</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Union{Missing, InlineStrings.String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, InlineStrings.String1}\" style = \"text-align: left;\">String1?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">50</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">Arnold-Franchi, Mrs. Josef (Josefine Franchi)</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">18.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">349237</td><td style = \"text-align: right;\">17.8</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">S</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">445</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">Johannesen-Bratthammer, Mr. Bernt</td><td style = \"text-align: left;\">male</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">65306</td><td style = \"text-align: right;\">8.1125</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">S</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">146</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">Nicholls, Mr. Joseph Charles</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">19.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">C.A. 33112</td><td style = \"text-align: right;\">36.75</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">S</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">12</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Bonnell, Miss. Elizabeth</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">58.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">113783</td><td style = \"text-align: right;\">26.55</td><td style = \"text-align: left;\">C103</td><td style = \"text-align: left;\">S</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">545</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Douglas, Mr. Walter Donald</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">50.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">PC 17761</td><td style = \"text-align: right;\">106.425</td><td style = \"text-align: left;\">C86</td><td style = \"text-align: left;\">C</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|cccccc}\n\t& PassengerId & Survived & Pclass & Name & Sex & \\\\\n\t\\hline\n\t& Int64 & Int64 & Int64 & String & String7 & \\\\\n\t\\hline\n\t1 & 50 & 0 & 3 & Arnold-Franchi, Mrs. Josef (Josefine Franchi) & female & $\\dots$ \\\\\n\t2 & 445 & 1 & 3 & Johannesen-Bratthammer, Mr. Bernt & male & $\\dots$ \\\\\n\t3 & 146 & 0 & 2 & Nicholls, Mr. Joseph Charles & male & $\\dots$ \\\\\n\t4 & 12 & 1 & 1 & Bonnell, Miss. Elizabeth & female & $\\dots$ \\\\\n\t5 & 545 & 0 & 1 & Douglas, Mr. Walter Donald & male & $\\dots$ \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "17",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "# Test Set"
            ]
        },
        {
            "id": "18",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "DF.first(test[shuffle(1:DF.nrow(test))[1:5], :], 5)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m5×11 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m PassengerId \u001b[0m\u001b[1m Pclass \u001b[0m\u001b[1m Name                              \u001b[0m\u001b[1m Sex     \u001b[0m\u001b[1m Age   \u001b[0m ⋯\n     │\u001b[90m Int64       \u001b[0m\u001b[90m Int64  \u001b[0m\u001b[90m String                            \u001b[0m\u001b[90m String7 \u001b[0m\u001b[90m Float6\u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │        1018       3  Brobeck, Mr. Karl Rudolf           male          2 ⋯\n   2 │        1149       3  Niklasson, Mr. Samuel              male          2\n   3 │         914       1  Flegenheim, Mrs. Alfred (Antoine…  female  \u001b[90m missin\u001b[0m\n   4 │         961       1  Fortune, Mrs. Mark (Mary McDouga…  female        6\n   5 │         908       2  Keane, Mr. Daniel                  male          3 ⋯\n\u001b[36m                                                               7 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>5×11 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">PassengerId</th><th style = \"text-align: left;\">Pclass</th><th style = \"text-align: left;\">Name</th><th style = \"text-align: left;\">Sex</th><th style = \"text-align: left;\">Age</th><th style = \"text-align: left;\">SibSp</th><th style = \"text-align: left;\">Parch</th><th style = \"text-align: left;\">Ticket</th><th style = \"text-align: left;\">Fare</th><th style = \"text-align: left;\">Cabin</th><th style = \"text-align: left;\">Embarked</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"InlineStrings.String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, InlineStrings.String15}\" style = \"text-align: left;\">String15?</th><th title = \"InlineStrings.String1\" style = \"text-align: left;\">String1</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1018</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">Brobeck, Mr. Karl Rudolf</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">22.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">350045</td><td style = \"text-align: right;\">7.7958</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">S</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">1149</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">Niklasson, Mr. Samuel</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">28.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">363611</td><td style = \"text-align: right;\">8.05</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">S</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">914</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Flegenheim, Mrs. Alfred (Antoinette)</td><td style = \"text-align: left;\">female</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">PC 17598</td><td style = \"text-align: right;\">31.6833</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">S</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">961</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Fortune, Mrs. Mark (Mary McDougald)</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">60.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">19950</td><td style = \"text-align: right;\">263.0</td><td style = \"text-align: left;\">C23 C25 C27</td><td style = \"text-align: left;\">S</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">908</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">Keane, Mr. Daniel</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">35.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">233734</td><td style = \"text-align: right;\">12.35</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">Q</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccccccc}\n\t& PassengerId & Pclass & Name & Sex & Age & SibSp & \\\\\n\t\\hline\n\t& Int64 & Int64 & String & String7 & Float64? & Int64 & \\\\\n\t\\hline\n\t1 & 1018 & 3 & Brobeck, Mr. Karl Rudolf & male & 22.0 & 0 & $\\dots$ \\\\\n\t2 & 1149 & 3 & Niklasson, Mr. Samuel & male & 28.0 & 0 & $\\dots$ \\\\\n\t3 & 914 & 1 & Flegenheim, Mrs. Alfred (Antoinette) & female & \\emph{missing} & 0 & $\\dots$ \\\\\n\t4 & 961 & 1 & Fortune, Mrs. Mark (Mary McDougald) & female & 60.0 & 1 & $\\dots$ \\\\\n\t5 & 908 & 2 & Keane, Mr. Daniel & male & 35.0 & 0 & $\\dots$ \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "19",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "This is a sample of train and test dataset. Lets find out a bit more about the train and test dataset."
            ]
        },
        {
            "id": "20",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "println(\"The shape of the train data is (row, column): $(size(train))\")\n",
                "println(\"Train dataset info:\")\n",
                "DF.describe(train)\n",
                "\n",
                "\n",
                "println(\"The shape of the test data is (row, column): $(size(test))\")\n",
                "println(\"Test dataset info:\")\n",
                "DF.describe(test)"
            ],
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": "The shape of the train data is (row, column): (891, 12)\nTrain dataset info:\nThe shape of the test data is (row, column): (418, 11)\nTest dataset info:\n"
                },
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m11×7 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m variable    \u001b[0m\u001b[1m mean     \u001b[0m\u001b[1m min                           \u001b[0m\u001b[1m median  \u001b[0m\u001b[1m max     \u001b[0m ⋯\n     │\u001b[90m Symbol      \u001b[0m\u001b[90m Union…   \u001b[0m\u001b[90m Any                           \u001b[0m\u001b[90m Union…  \u001b[0m\u001b[90m Any     \u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ PassengerId  1100.5    892                            1100.5   1309     ⋯\n   2 │ Pclass       2.26555   1                              3.0      3\n   3 │ Name        \u001b[90m          \u001b[0m Abbott, Master. Eugene Joseph \u001b[90m         \u001b[0m van Bill\n   4 │ Sex         \u001b[90m          \u001b[0m female                        \u001b[90m         \u001b[0m male\n   5 │ Age          30.2726   0.17                           27.0     76.0     ⋯\n   6 │ SibSp        0.447368  0                              0.0      8\n   7 │ Parch        0.392344  0                              0.0      9\n   8 │ Ticket      \u001b[90m          \u001b[0m 110469                        \u001b[90m         \u001b[0m W.E.P. 5\n   9 │ Fare         35.6272   0.0                            14.4542  512.329  ⋯\n  10 │ Cabin       \u001b[90m          \u001b[0m A11                           \u001b[90m         \u001b[0m G6\n  11 │ Embarked    \u001b[90m          \u001b[0m C                             \u001b[90m         \u001b[0m S\n\u001b[36m                                                               3 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>11×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">min</th><th style = \"text-align: left;\">median</th><th style = \"text-align: left;\">max</th><th style = \"text-align: left;\">nmissing</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Type\" style = \"text-align: left;\">Type</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">PassengerId</td><td style = \"text-align: left;\">1100.5</td><td style = \"text-align: left;\">892</td><td style = \"text-align: left;\">1100.5</td><td style = \"text-align: left;\">1309</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Pclass</td><td style = \"text-align: left;\">2.26555</td><td style = \"text-align: left;\">1</td><td style = \"text-align: left;\">3.0</td><td style = \"text-align: left;\">3</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Name</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">Abbott, Master. Eugene Joseph</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">van Billiard, Master. Walter John</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Sex</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">female</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String7</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Age</td><td style = \"text-align: left;\">30.2726</td><td style = \"text-align: left;\">0.17</td><td style = \"text-align: left;\">27.0</td><td style = \"text-align: left;\">76.0</td><td style = \"text-align: right;\">86</td><td style = \"text-align: left;\">Union{Missing, Float64}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">SibSp</td><td style = \"text-align: left;\">0.447368</td><td style = \"text-align: left;\">0</td><td style = \"text-align: left;\">0.0</td><td style = \"text-align: left;\">8</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">Parch</td><td style = \"text-align: left;\">0.392344</td><td style = \"text-align: left;\">0</td><td style = \"text-align: left;\">0.0</td><td style = \"text-align: left;\">9</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">Ticket</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">110469</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">W.E.P. 5734</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String31</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">Fare</td><td style = \"text-align: left;\">35.6272</td><td style = \"text-align: left;\">0.0</td><td style = \"text-align: left;\">14.4542</td><td style = \"text-align: left;\">512.329</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Union{Missing, Float64}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Cabin</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">A11</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">G6</td><td style = \"text-align: right;\">327</td><td style = \"text-align: left;\">Union{Missing, String15}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">Embarked</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">C</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">S</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String1</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|cccccc}\n\t& variable & mean & min & median & max & \\\\\n\t\\hline\n\t& Symbol & Union… & Any & Union… & Any & \\\\\n\t\\hline\n\t1 & PassengerId & 1100.5 & 892 & 1100.5 & 1309 & $\\dots$ \\\\\n\t2 & Pclass & 2.26555 & 1 & 3.0 & 3 & $\\dots$ \\\\\n\t3 & Name &  & Abbott, Master. Eugene Joseph &  & van Billiard, Master. Walter John & $\\dots$ \\\\\n\t4 & Sex &  & female &  & male & $\\dots$ \\\\\n\t5 & Age & 30.2726 & 0.17 & 27.0 & 76.0 & $\\dots$ \\\\\n\t6 & SibSp & 0.447368 & 0 & 0.0 & 8 & $\\dots$ \\\\\n\t7 & Parch & 0.392344 & 0 & 0.0 & 9 & $\\dots$ \\\\\n\t8 & Ticket &  & 110469 &  & W.E.P. 5734 & $\\dots$ \\\\\n\t9 & Fare & 35.6272 & 0.0 & 14.4542 & 512.329 & $\\dots$ \\\\\n\t10 & Cabin &  & A11 &  & G6 & $\\dots$ \\\\\n\t11 & Embarked &  & C &  & S & $\\dots$ \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "21",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## 1d. About This Dataset\n",
                "\n",
                "<a id=\"aboutthisdataset\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "The data has split into two groups:\n",
                "\n",
                "- training set (train.csv)\n",
                "- test set (test.csv)\n",
                "\n",
                "**_The training set includes our target variable(dependent variable), passenger survival status_** (also known as the ground truth from the Titanic tragedy) along with other independent features like gender, class, fare, and Pclass.\n",
                "\n",
                "The test set should be used to see how well our model performs on unseen data. When we say unseen data, we mean that the algorithm or machine learning models have no relation to the test data. We do not want to use any part of the test data in any way to modify our algorithms; Which are the reasons why we clean our test data and train data separately. **_The test set does not provide passengers survival status_**. We are going to use our model to predict passenger survival status.\n",
                "\n",
                "Now let's go through the features and describe a little. There is a couple of different type of variables, They are...\n",
                "\n",
                "---\n",
                "\n",
                "**Categorical:**\n",
                "\n",
                "- **Nominal**(variables that have two or more categories, but which do not have an intrinsic order.)\n",
                "  > - **Cabin**\n",
                "  > - **Embarked**(Port of Embarkation)\n",
                "            C(Cherbourg)\n",
                "            Q(Queenstown)\n",
                "            S(Southampton)\n",
                "\n",
                "- **Dichotomous**(Nominal variable with only two categories)\n",
                "  > - **Sex**\n",
                "            Female\n",
                "            Male\n",
                "- **Ordinal**(variables that have two or more categories just like nominal variables. Only the categories can also be ordered or ranked.)\n",
                "  > - **Pclass** (A proxy for socio-economic status (SES))\n",
                "            1(Upper)\n",
                "            2(Middle)\n",
                "            3(Lower)\n",
                "\n",
                "---\n",
                "\n",
                "**Numeric:**\n",
                "\n",
                "- **Discrete**\n",
                "  > - **Passenger ID**(Unique identifing # for each passenger)\n",
                "  > - **SibSp**\n",
                "  > - **Parch**\n",
                "  > - **Survived** (Our outcome or dependent variable)\n",
                "            0\n",
                "            1\n",
                "- **Continous**\n",
                "  > - **Age**\n",
                "  > - **Fare**\n",
                "\n",
                "---\n",
                "\n",
                "**Text Variable**\n",
                "\n",
                "> - **Ticket** (Ticket number for passenger.)\n",
                "> - **Name**( Name of the passenger.)\n",
                "\n",
                "## 1e. Tableau Visualization of the Data\n",
                "\n",
                "<a id='tableau_visualization'></a>\n",
                "\n",
                "---\n",
                "\n",
                "I have incorporated a tableau visualization below of the training data. This visualization...\n",
                "\n",
                "- is for us to have an overview and play around with the dataset.\n",
                "- is done without making any changes(including Null values) to any features of the dataset.\n",
                "\n",
                "---\n",
                "\n",
                "Let's get a better perspective of the dataset through this visualization.\n",
                "\n",
                "```{=html}\n",
                "<div class='tableauPlaceholder' id='viz1516349898238' style='position: relative'><noscript><a href='#'><img alt='An Overview of Titanic Training Dataset ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;Titanic_data_mining&#47;Dashboard1&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='Titanic_data_mining&#47;Dashboard1' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;Titanic_data_mining&#47;Dashboard1&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='filter' value='publish=yes' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1516349898238');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>\n",
                "```\n",
                "\n",
                "We want to see how the left vertical bar changes when we filter out unique values of certain features. We can use multiple filters to see if there are any correlations among them. For example, if we click on **upper** and **Female** tab, we would see that green color dominates the bar with a ratio of 91:3 survived and non survived female passengers; a 97% survival rate for females. We can reset the filters by clicking anywhere in the whilte space. The age distribution chart on top provides us with some more info such as, what was the age range of those three unlucky females as the red color give away the unsurvived once. If you would like to check out some of my other tableau charts, please click [here.](https://public.tableau.com/profile/masum.rumi#!/)\n",
                "\n",
                "# Part 2: Overview and Cleaning the Data\n",
                "\n",
                "<a id=\"cleaningthedata\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "## 2a. Overview\n",
                "\n",
                "Datasets in the real world are often messy, However, this dataset is almost clean. Lets analyze and see what we have here."
            ]
        },
        {
            "id": "22",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: bf19c831-fbe0-49b6-8bf8-d7db118f40b1\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 5a0593fb4564f0284ca7fdf5c006020cb288db95\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:08.956119Z', iopub.status.busy: '2021-06-26T16:35:08.955538Z', iopub.status.idle: '2021-06-26T16:35:08.973222Z', shell.execute_reply: '2021-06-26T16:35:08.972151Z', shell.execute_reply.started: '2021-06-26T16:35:08.956072Z'}\n",
                "DF.describe(train, :nmissing, :eltype)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m12×3 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m variable    \u001b[0m\u001b[1m nmissing \u001b[0m\u001b[1m eltype                   \u001b[0m\n     │\u001b[90m Symbol      \u001b[0m\u001b[90m Int64    \u001b[0m\u001b[90m Type                     \u001b[0m\n─────┼─────────────────────────────────────────────────\n   1 │ PassengerId         0  Int64\n   2 │ Survived            0  Int64\n   3 │ Pclass              0  Int64\n   4 │ Name                0  String\n   5 │ Sex                 0  String7\n   6 │ Age               177  Union{Missing, Float64}\n   7 │ SibSp               0  Int64\n   8 │ Parch               0  Int64\n   9 │ Ticket              0  String31\n  10 │ Fare                0  Float64\n  11 │ Cabin             687  Union{Missing, String15}\n  12 │ Embarked            2  Union{Missing, String1}",
                        "text/html": "<div><div style = \"float: left;\"><span>12×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">nmissing</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Type\" style = \"text-align: left;\">Type</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">PassengerId</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Survived</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Pclass</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Name</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Sex</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String7</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Age</td><td style = \"text-align: right;\">177</td><td style = \"text-align: left;\">Union{Missing, Float64}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">SibSp</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">Parch</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">Ticket</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String31</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Fare</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">Cabin</td><td style = \"text-align: right;\">687</td><td style = \"text-align: left;\">Union{Missing, String15}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">Embarked</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">Union{Missing, String1}</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccc}\n\t& variable & nmissing & eltype\\\\\n\t\\hline\n\t& Symbol & Int64 & Type\\\\\n\t\\hline\n\t1 & PassengerId & 0 & Int64 \\\\\n\t2 & Survived & 0 & Int64 \\\\\n\t3 & Pclass & 0 & Int64 \\\\\n\t4 & Name & 0 & String \\\\\n\t5 & Sex & 0 & String7 \\\\\n\t6 & Age & 177 & Union\\{Missing, Float64\\} \\\\\n\t7 & SibSp & 0 & Int64 \\\\\n\t8 & Parch & 0 & Int64 \\\\\n\t9 & Ticket & 0 & String31 \\\\\n\t10 & Fare & 0 & Float64 \\\\\n\t11 & Cabin & 687 & Union\\{Missing, String15\\} \\\\\n\t12 & Embarked & 2 & Union\\{Missing, String1\\} \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "23",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "It looks like, the features have unequal amount of data entries for every column and they have many different types of variables. This can happen for the following reasons...\n",
                "\n",
                "- We may have missing values in our features.\n",
                "- We may have categorical features.\n",
                "- We may have alphanumerical or/and text features.\n",
                "\n",
                "## 2b. Dealing with Missing values\n",
                "\n",
                "<a id=\"dealwithnullvalues\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "**Missing values in _train_ dataset.**"
            ]
        },
        {
            "id": "24",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:08.975451Z', iopub.status.busy: '2021-06-26T16:35:08.974927Z', iopub.status.idle: '2021-06-26T16:35:08.98326Z', shell.execute_reply: '2021-06-26T16:35:08.982644Z', shell.execute_reply.started: '2021-06-26T16:35:08.975205Z'}\n",
                "function missing_percentage(df::DF.DataFrame)\n",
                "    \"\"\"This function takes a DataFrame as input and returns total missing values and percentages\"\"\"\n",
                "    missing_counts = [count(ismissing, df[!, col]) for col in DF.names(df)]\n",
                "    missing_pct = round.(missing_counts ./ DF.nrow(df) .* 100, digits=2)\n",
                "\n",
                "    # Create result DataFrame\n",
                "    result = DF.DataFrame(\n",
                "        Column = DF.names(df),\n",
                "        Total = missing_counts,\n",
                "        Percent = missing_pct\n",
                "    )\n",
                "\n",
                "    # Sort by total missing values (descending)\n",
                "    return DF.sort(result, :Total, rev=true)\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "missing_percentage (generic function with 1 method)"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "25",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "26",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.092256Z', iopub.status.busy: '2021-06-26T16:35:09.09199Z', iopub.status.idle: '2021-06-26T16:35:09.108063Z', shell.execute_reply: '2021-06-26T16:35:09.107054Z', shell.execute_reply.started: '2021-06-26T16:35:09.092212Z'}\n",
                "missing_percentage(train)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m12×3 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Column      \u001b[0m\u001b[1m Total \u001b[0m\u001b[1m Percent \u001b[0m\n     │\u001b[90m String      \u001b[0m\u001b[90m Int64 \u001b[0m\u001b[90m Float64 \u001b[0m\n─────┼─────────────────────────────\n   1 │ Cabin          687    77.1\n   2 │ Age            177    19.87\n   3 │ Embarked         2     0.22\n   4 │ PassengerId      0     0.0\n   5 │ Survived         0     0.0\n   6 │ Pclass           0     0.0\n   7 │ Name             0     0.0\n   8 │ Sex              0     0.0\n   9 │ SibSp            0     0.0\n  10 │ Parch            0     0.0\n  11 │ Ticket           0     0.0\n  12 │ Fare             0     0.0",
                        "text/html": "<div><div style = \"float: left;\"><span>12×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Column</th><th style = \"text-align: left;\">Total</th><th style = \"text-align: left;\">Percent</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Cabin</td><td style = \"text-align: right;\">687</td><td style = \"text-align: right;\">77.1</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Age</td><td style = \"text-align: right;\">177</td><td style = \"text-align: right;\">19.87</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Embarked</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">0.22</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">PassengerId</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Survived</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Pclass</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">Name</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">Sex</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">SibSp</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Parch</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">Ticket</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">Fare</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccc}\n\t& Column & Total & Percent\\\\\n\t\\hline\n\t& String & Int64 & Float64\\\\\n\t\\hline\n\t1 & Cabin & 687 & 77.1 \\\\\n\t2 & Age & 177 & 19.87 \\\\\n\t3 & Embarked & 2 & 0.22 \\\\\n\t4 & PassengerId & 0 & 0.0 \\\\\n\t5 & Survived & 0 & 0.0 \\\\\n\t6 & Pclass & 0 & 0.0 \\\\\n\t7 & Name & 0 & 0.0 \\\\\n\t8 & Sex & 0 & 0.0 \\\\\n\t9 & SibSp & 0 & 0.0 \\\\\n\t10 & Parch & 0 & 0.0 \\\\\n\t11 & Ticket & 0 & 0.0 \\\\\n\t12 & Fare & 0 & 0.0 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "27",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "**Missing values in _test_ set.**"
            ]
        },
        {
            "id": "28",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 073ef91b-e401-47a1-9b0a-d08ad710abce\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 1ec1de271f57c9435ce111261ba08c5d6e34dbcb\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.208229Z', iopub.status.busy: '2021-06-26T16:35:09.207968Z', iopub.status.idle: '2021-06-26T16:35:09.221423Z', shell.execute_reply: '2021-06-26T16:35:09.220732Z', shell.execute_reply.started: '2021-06-26T16:35:09.208186Z'}\n",
                "missing_percentage(test)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m11×3 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Column      \u001b[0m\u001b[1m Total \u001b[0m\u001b[1m Percent \u001b[0m\n     │\u001b[90m String      \u001b[0m\u001b[90m Int64 \u001b[0m\u001b[90m Float64 \u001b[0m\n─────┼─────────────────────────────\n   1 │ Cabin          327    78.23\n   2 │ Age             86    20.57\n   3 │ Fare             1     0.24\n   4 │ PassengerId      0     0.0\n   5 │ Pclass           0     0.0\n   6 │ Name             0     0.0\n   7 │ Sex              0     0.0\n   8 │ SibSp            0     0.0\n   9 │ Parch            0     0.0\n  10 │ Ticket           0     0.0\n  11 │ Embarked         0     0.0",
                        "text/html": "<div><div style = \"float: left;\"><span>11×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Column</th><th style = \"text-align: left;\">Total</th><th style = \"text-align: left;\">Percent</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Cabin</td><td style = \"text-align: right;\">327</td><td style = \"text-align: right;\">78.23</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Age</td><td style = \"text-align: right;\">86</td><td style = \"text-align: right;\">20.57</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Fare</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">0.24</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">PassengerId</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Pclass</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Name</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">Sex</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">SibSp</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">Parch</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Ticket</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">Embarked</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0.0</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccc}\n\t& Column & Total & Percent\\\\\n\t\\hline\n\t& String & Int64 & Float64\\\\\n\t\\hline\n\t1 & Cabin & 327 & 78.23 \\\\\n\t2 & Age & 86 & 20.57 \\\\\n\t3 & Fare & 1 & 0.24 \\\\\n\t4 & PassengerId & 0 & 0.0 \\\\\n\t5 & Pclass & 0 & 0.0 \\\\\n\t6 & Name & 0 & 0.0 \\\\\n\t7 & Sex & 0 & 0.0 \\\\\n\t8 & SibSp & 0 & 0.0 \\\\\n\t9 & Parch & 0 & 0.0 \\\\\n\t10 & Ticket & 0 & 0.0 \\\\\n\t11 & Embarked & 0 & 0.0 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "29",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "We see that in both **train**, and **test** dataset have missing values. Let's make an effort to fill these missing values starting with \"Embarked\" feature.\n",
                "\n",
                "### Embarked feature\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "30",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.223175Z', iopub.status.busy: '2021-06-26T16:35:09.222681Z', iopub.status.idle: '2021-06-26T16:35:09.230671Z', shell.execute_reply: '2021-06-26T16:35:09.229793Z', shell.execute_reply.started: '2021-06-26T16:35:09.223128Z'}\n",
                "function percent_value_counts(df::DF.DataFrame, feature::Symbol)\n",
                "    \"\"\"This function takes a dataframe and a column and finds the percentage of the value_counts\"\"\"\n",
                "\n",
                "    # Count values including missing\n",
                "    counts = DF.combine(DF.groupby(df, feature), DF.nrow => :Total)\n",
                "\n",
                "    # Calculate percentages\n",
                "    counts.Percent = round.(counts.Total ./ DF.nrow(df) .* 100, digits=2)\n",
                "\n",
                "    # Sort by total count (descending)\n",
                "    return DF.sort(counts, :Total, rev=true)\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "percent_value_counts (generic function with 1 method)"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "31",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "32",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.236974Z', iopub.status.busy: '2021-06-26T16:35:09.236548Z', iopub.status.idle: '2021-06-26T16:35:09.254321Z', shell.execute_reply: '2021-06-26T16:35:09.253654Z', shell.execute_reply.started: '2021-06-26T16:35:09.236929Z'}\n",
                "percent_value_counts(train, :Embarked)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m4×3 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Embarked \u001b[0m\u001b[1m Total \u001b[0m\u001b[1m Percent \u001b[0m\n     │\u001b[90m String1? \u001b[0m\u001b[90m Int64 \u001b[0m\u001b[90m Float64 \u001b[0m\n─────┼──────────────────────────\n   1 │ S           644    72.28\n   2 │ C           168    18.86\n   3 │ Q            77     8.64\n   4 │\u001b[90m missing  \u001b[0m     2     0.22",
                        "text/html": "<div><div style = \"float: left;\"><span>4×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Embarked</th><th style = \"text-align: left;\">Total</th><th style = \"text-align: left;\">Percent</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Union{Missing, InlineStrings.String1}\" style = \"text-align: left;\">String1?</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">S</td><td style = \"text-align: right;\">644</td><td style = \"text-align: right;\">72.28</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C</td><td style = \"text-align: right;\">168</td><td style = \"text-align: right;\">18.86</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Q</td><td style = \"text-align: right;\">77</td><td style = \"text-align: right;\">8.64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">0.22</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccc}\n\t& Embarked & Total & Percent\\\\\n\t\\hline\n\t& String1? & Int64 & Float64\\\\\n\t\\hline\n\t1 & S & 644 & 72.28 \\\\\n\t2 & C & 168 & 18.86 \\\\\n\t3 & Q & 77 & 8.64 \\\\\n\t4 & \\emph{missing} & 2 & 0.22 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "33",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "It looks like there are only two null values( ~ 0.22 %) in the Embarked feature, we can replace these with the mode value \"S\". However, let's dig a little deeper.\n",
                "\n",
                "**Let's see what are those two null values**"
            ]
        },
        {
            "id": "34",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 000ebdd7-ff57-48d9-91bf-a29ba79f1a1c\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 6b9cb050e9dae424bb738ba9cdf3c84715887fa3\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.276102Z', iopub.status.busy: '2021-06-26T16:35:09.275649Z', iopub.status.idle: '2021-06-26T16:35:09.292037Z', shell.execute_reply: '2021-06-26T16:35:09.291163Z', shell.execute_reply.started: '2021-06-26T16:35:09.275879Z'}\n",
                "train[ismissing.(train.Embarked), :]"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m2×12 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m PassengerId \u001b[0m\u001b[1m Survived \u001b[0m\u001b[1m Pclass \u001b[0m\u001b[1m Name                              \u001b[0m\u001b[1m Sex  \u001b[0m ⋯\n     │\u001b[90m Int64       \u001b[0m\u001b[90m Int64    \u001b[0m\u001b[90m Int64  \u001b[0m\u001b[90m String                            \u001b[0m\u001b[90m Strin\u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │          62         1       1  Icard, Miss. Amelie                femal ⋯\n   2 │         830         1       1  Stone, Mrs. George Nelson (Marth…  femal\n\u001b[36m                                                               8 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>2×12 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">PassengerId</th><th style = \"text-align: left;\">Survived</th><th style = \"text-align: left;\">Pclass</th><th style = \"text-align: left;\">Name</th><th style = \"text-align: left;\">Sex</th><th style = \"text-align: left;\">Age</th><th style = \"text-align: left;\">SibSp</th><th style = \"text-align: left;\">Parch</th><th style = \"text-align: left;\">Ticket</th><th style = \"text-align: left;\">Fare</th><th style = \"text-align: left;\">Cabin</th><th style = \"text-align: left;\">Embarked</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"InlineStrings.String31\" style = \"text-align: left;\">String31</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Union{Missing, InlineStrings.String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, InlineStrings.String1}\" style = \"text-align: left;\">String1?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">62</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Icard, Miss. Amelie</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">38.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">113572</td><td style = \"text-align: right;\">80.0</td><td style = \"text-align: left;\">B28</td><td style = \"font-style: italic; text-align: left;\">missing</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">830</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Stone, Mrs. George Nelson (Martha Evelyn)</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">62.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">113572</td><td style = \"text-align: right;\">80.0</td><td style = \"text-align: left;\">B28</td><td style = \"font-style: italic; text-align: left;\">missing</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|cccccc}\n\t& PassengerId & Survived & Pclass & Name & Sex & \\\\\n\t\\hline\n\t& Int64 & Int64 & Int64 & String & String7 & \\\\\n\t\\hline\n\t1 & 62 & 1 & 1 & Icard, Miss. Amelie & female & $\\dots$ \\\\\n\t2 & 830 & 1 & 1 & Stone, Mrs. George Nelson (Martha Evelyn) & female & $\\dots$ \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "35",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "We may be able to solve these two missing values by looking at other independent variables of the two raws. Both passengers paid a fare of $80, are of Pclass 1 and female Sex. Let's see how the **Fare** is distributed among all **Pclass** and **Embarked** feature values"
            ]
        },
        {
            "id": "36",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: bf257322-0c9c-4fc5-8790-87d8c94ad28a\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: ad15052fe6cebe37161c6e01e33a5c083dc2b558\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.293919Z', iopub.status.busy: '2021-06-26T16:35:09.293564Z', iopub.status.idle: '2021-06-26T16:35:09.866643Z', shell.execute_reply: '2021-06-26T16:35:09.865701Z', shell.execute_reply.started: '2021-06-26T16:35:09.293817Z'}\n",
                "fig = Makie.Figure()\n",
                "\n",
                "# Prepare data for plotting\n",
                "train_clean = DF.dropmissing(train, [:Embarked, :Fare, :Pclass])\n",
                "test_clean = DF.dropmissing(test, [:Embarked, :Fare, :Pclass])\n",
                "\n",
                "# Create mapping for embarked ports to numbers\n",
                "unique_categories = unique(train_clean.Embarked)\n",
                "category_to_index = Dict(category => i for (i, category) in enumerate(unique_categories))\n",
                "# Convert categorical to numeric\n",
                "train_clean.Embarked_num = [category_to_index[port] for port in train_clean.Embarked]\n",
                "test_clean.Embarked_num = [category_to_index[port] for port in test_clean.Embarked]\n",
                "\n",
                "# Training set boxplot\n",
                "ax1 = Makie.Axis(fig[1, 1],\n",
                "    title = \"Training Set\",\n",
                "    xlabel = \"Embarked\",\n",
                "    ylabel = \"Fare\",\n",
                "    xticks = (1:3, unique_categories)\n",
                ")\n",
                "\n",
                "ax2 = Makie.Axis(fig[1, 2],\n",
                "    title = \"Test Set\",\n",
                "    xlabel = \"Embarked\",\n",
                "    ylabel = \"Fare\",\n",
                "    xticks = (1:3, unique_categories)\n",
                ")\n",
                "\n",
                "Makie.boxplot!(ax2, test_clean.Embarked_num, test_clean.Fare,\n",
                "           dodge = test_clean.Pclass,\n",
                "           color = test_clean.Pclass)\n",
                "Makie.boxplot!(ax1, train_clean.Embarked_num, train_clean.Fare,\n",
                "           dodge = train_clean.Pclass,\n",
                "           color = train_clean.Pclass)\n",
                "\n",
                "fig"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=960 height=576 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 960,
                            "height": 576
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "37",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Here, in both training set and test set, the average fare closest to $80 are in the <b>C</b> Embarked values where pclass is 1. So, let's fill in the missing values as \"C\""
            ]
        },
        {
            "id": "38",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 2f5f3c63-d22c-483c-a688-a5ec2a477330\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 52e51ada5dfeb700bf775c66e9307d6d1e2233de\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.868523Z', iopub.status.busy: '2021-06-26T16:35:09.868016Z', iopub.status.idle: '2021-06-26T16:35:09.874135Z', shell.execute_reply: '2021-06-26T16:35:09.873022Z', shell.execute_reply.started: '2021-06-26T16:35:09.868249Z'}\n",
                "#| scrolled: true\n",
                "## Replacing the null values in the Embarked column with the mode.\n",
                "train.Embarked = coalesce.(train.Embarked, \"C\");"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "39",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "### Cabin Feature\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "40",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: e76cd770-b498-4444-b47a-4ac6ae63193b\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: b809a788784e2fb443457d7ef4ca17a896bf58b4\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.876171Z', iopub.status.busy: '2021-06-26T16:35:09.875621Z', iopub.status.idle: '2021-06-26T16:35:09.886193Z', shell.execute_reply: '2021-06-26T16:35:09.885088Z', shell.execute_reply.started: '2021-06-26T16:35:09.875859Z'}\n",
                "#| scrolled: true\n",
                "println(\"Train Cabin missing: $(count(ismissing, train.Cabin) / DF.nrow(train))\")\n",
                "println(\"Test Cabin missing: $(count(ismissing, test.Cabin) / DF.nrow(test))\")"
            ],
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": "Train Cabin missing: 0.7710437710437711\nTest Cabin missing: 0.7822966507177034\n"
                }
            ],
            "execution_count": 1
        },
        {
            "id": "41",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Approximately 77% of Cabin feature is missing in the training data and 78% missing on the test data.\n",
                "We have two choices,\n",
                "\n",
                "- we can either get rid of the whole feature, or\n",
                "- we can brainstorm a little and find an appropriate way to put them in use. For example, We may say passengers with cabin record had a higher socio-economic-status then others. We may also say passengers with cabin record were more likely to be taken into consideration when loading into the boat.\n",
                "\n",
                "Let's combine train and test data first and for now, will assign all the null values as **\"N\"**"
            ]
        },
        {
            "id": "42",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: 8ff7b4f88285bc65d72063d7fdf8a09a5acb62d3\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.888377Z', iopub.status.busy: '2021-06-26T16:35:09.88784Z', iopub.status.idle: '2021-06-26T16:35:09.902296Z', shell.execute_reply: '2021-06-26T16:35:09.901697Z', shell.execute_reply.started: '2021-06-26T16:35:09.888114Z'}\n",
                "survivors = train.Survived\n",
                "DF.select!(train, DF.Not(:Survived))  # Remove Survived column\n",
                "all_data = vcat(train, test)\n",
                "\n",
                "all_data.Cabin = coalesce.(all_data.Cabin, \"N\");"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "43",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "All the cabin names start with an English alphabet following by multiple digits. It seems like there are some passengers that had booked multiple cabin rooms in their name. This is because many of them travelled with family. However, they all seem to book under the same letter followed by different numbers. It seems like there is a significance with the letters rather than the numbers. Therefore, we can group these cabins according to the letter of the cabin name."
            ]
        },
        {
            "id": "44",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 87995359-8a77-4e38-b8bb-e9b4bdeb17ed\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: c1e9e06eb7f2a6eeb1a6d69f000217e7de7d5f25\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.904181Z', iopub.status.busy: '2021-06-26T16:35:09.903766Z', iopub.status.idle: '2021-06-26T16:35:09.909654Z', shell.execute_reply: '2021-06-26T16:35:09.908573Z', shell.execute_reply.started: '2021-06-26T16:35:09.904014Z'}\n",
                "all_data.Cabin = [string(cabin[1]) for cabin in all_data.Cabin];"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "45",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Now let's look at the value counts of the cabin features and see how it looks."
            ]
        },
        {
            "id": "46",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.91156Z', iopub.status.busy: '2021-06-26T16:35:09.911098Z', iopub.status.idle: '2021-06-26T16:35:09.928945Z', shell.execute_reply: '2021-06-26T16:35:09.928025Z', shell.execute_reply.started: '2021-06-26T16:35:09.911398Z'}\n",
                "percent_value_counts(all_data, :Cabin)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m9×3 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Cabin  \u001b[0m\u001b[1m Total \u001b[0m\u001b[1m Percent \u001b[0m\n     │\u001b[90m String \u001b[0m\u001b[90m Int64 \u001b[0m\u001b[90m Float64 \u001b[0m\n─────┼────────────────────────\n   1 │ N        1014    77.46\n   2 │ C          94     7.18\n   3 │ B          65     4.97\n   4 │ D          46     3.51\n   5 │ E          41     3.13\n   6 │ A          22     1.68\n   7 │ F          21     1.6\n   8 │ G           5     0.38\n   9 │ T           1     0.08",
                        "text/html": "<div><div style = \"float: left;\"><span>9×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Cabin</th><th style = \"text-align: left;\">Total</th><th style = \"text-align: left;\">Percent</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">N</td><td style = \"text-align: right;\">1014</td><td style = \"text-align: right;\">77.46</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C</td><td style = \"text-align: right;\">94</td><td style = \"text-align: right;\">7.18</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">B</td><td style = \"text-align: right;\">65</td><td style = \"text-align: right;\">4.97</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">D</td><td style = \"text-align: right;\">46</td><td style = \"text-align: right;\">3.51</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">E</td><td style = \"text-align: right;\">41</td><td style = \"text-align: right;\">3.13</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">A</td><td style = \"text-align: right;\">22</td><td style = \"text-align: right;\">1.68</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">F</td><td style = \"text-align: right;\">21</td><td style = \"text-align: right;\">1.6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">G</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">0.38</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">T</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">0.08</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccc}\n\t& Cabin & Total & Percent\\\\\n\t\\hline\n\t& String & Int64 & Float64\\\\\n\t\\hline\n\t1 & N & 1014 & 77.46 \\\\\n\t2 & C & 94 & 7.18 \\\\\n\t3 & B & 65 & 4.97 \\\\\n\t4 & D & 46 & 3.51 \\\\\n\t5 & E & 41 & 3.13 \\\\\n\t6 & A & 22 & 1.68 \\\\\n\t7 & F & 21 & 1.6 \\\\\n\t8 & G & 5 & 0.38 \\\\\n\t9 & T & 1 & 0.08 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "47",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "So, We still haven't done any effective work to replace the null values. Let's stop for a second here and think through how we can take advantage of some of the other features here.\n",
                "\n",
                "- We can use the average of the fare column We can use pythons **_groupby_** function to get the mean fare of each cabin letter."
            ]
        },
        {
            "id": "48",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.930774Z', iopub.status.busy: '2021-06-26T16:35:09.930283Z', iopub.status.idle: '2021-06-26T16:35:09.942122Z', shell.execute_reply: '2021-06-26T16:35:09.941067Z', shell.execute_reply.started: '2021-06-26T16:35:09.930532Z'}\n",
                "@chain all_data begin\n",
                "    DF.dropmissing(:Fare)\n",
                "    DF.groupby(:Cabin)\n",
                "    DF.combine(:Fare => Stats.mean => :Mean_Fare)\n",
                "    DF.sort(:Mean_Fare)\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m9×2 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Cabin  \u001b[0m\u001b[1m Mean_Fare \u001b[0m\n     │\u001b[90m String \u001b[0m\u001b[90m Float64   \u001b[0m\n─────┼───────────────────\n   1 │ G         14.205\n   2 │ F         18.0794\n   3 │ N         19.1327\n   4 │ T         35.5\n   5 │ A         41.2443\n   6 │ D         53.0073\n   7 │ E         54.5646\n   8 │ C        107.927\n   9 │ B        122.383",
                        "text/html": "<div><div style = \"float: left;\"><span>9×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Cabin</th><th style = \"text-align: left;\">Mean_Fare</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">G</td><td style = \"text-align: right;\">14.205</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">F</td><td style = \"text-align: right;\">18.0794</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">N</td><td style = \"text-align: right;\">19.1327</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">T</td><td style = \"text-align: right;\">35.5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">A</td><td style = \"text-align: right;\">41.2443</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">D</td><td style = \"text-align: right;\">53.0073</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">E</td><td style = \"text-align: right;\">54.5646</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">C</td><td style = \"text-align: right;\">107.927</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">B</td><td style = \"text-align: right;\">122.383</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|cc}\n\t& Cabin & Mean\\_Fare\\\\\n\t\\hline\n\t& String & Float64\\\\\n\t\\hline\n\t1 & G & 14.205 \\\\\n\t2 & F & 18.0794 \\\\\n\t3 & N & 19.1327 \\\\\n\t4 & T & 35.5 \\\\\n\t5 & A & 41.2443 \\\\\n\t6 & D & 53.0073 \\\\\n\t7 & E & 54.5646 \\\\\n\t8 & C & 107.927 \\\\\n\t9 & B & 122.383 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "49",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Now, these means can help us determine the unknown cabins, if we compare each unknown cabin rows with the given mean's above. Let's write a simple function so that we can give cabin names based on the means."
            ]
        },
        {
            "id": "50",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: a466da29f1989fa983147faf9e63d18783468567\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.943855Z', iopub.status.busy: '2021-06-26T16:35:09.943364Z', iopub.status.idle: '2021-06-26T16:35:09.952677Z', shell.execute_reply: '2021-06-26T16:35:09.952057Z', shell.execute_reply.started: '2021-06-26T16:35:09.943627Z'}\n",
                "function cabin_estimator(fare::Union{Float64, Missing})\n",
                "    \"\"\"Grouping cabin feature by the first letter based on fare\"\"\"\n",
                "    # Handle missing values\n",
                "    if ismissing(fare)\n",
                "        return \"N\"  # Default cabin for missing fare\n",
                "    end\n",
                "    \n",
                "    if fare < 16\n",
                "        return \"G\"\n",
                "    elseif 16 ≤ fare < 27\n",
                "        return \"F\"\n",
                "    elseif 27 ≤ fare < 38\n",
                "        return \"T\"\n",
                "    elseif 38 ≤ fare < 47\n",
                "        return \"A\"\n",
                "    elseif 47 ≤ fare < 53\n",
                "        return \"E\"\n",
                "    elseif 53 ≤ fare < 54\n",
                "        return \"D\"\n",
                "    elseif 54 ≤ fare < 116\n",
                "        return \"C\"\n",
                "    else\n",
                "        return \"B\"\n",
                "    end\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "cabin_estimator (generic function with 1 method)"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "51",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Let's apply <b>cabin_estimator</b> function in each unknown cabins(cabin with <b>null</b> values). Once that is done we will separate our train and test to continue towards machine learning modeling."
            ]
        },
        {
            "id": "52",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.95455Z', iopub.status.busy: '2021-06-26T16:35:09.954083Z', iopub.status.idle: '2021-06-26T16:35:09.96302Z', shell.execute_reply: '2021-06-26T16:35:09.962357Z', shell.execute_reply.started: '2021-06-26T16:35:09.95437Z'}\n",
                "with_N = all_data[all_data.Cabin .== \"N\", :]\n",
                "without_N = all_data[all_data.Cabin .!= \"N\", :];"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "53",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "54",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: 1c646b64c6e062656e5f727d5499266f847c4832\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:09.965179Z', iopub.status.busy: '2021-06-26T16:35:09.96464Z', iopub.status.idle: '2021-06-26T16:35:09.981536Z', shell.execute_reply: '2021-06-26T16:35:09.980705Z', shell.execute_reply.started: '2021-06-26T16:35:09.964885Z'}\n",
                "with_N.Cabin = cabin_estimator.(with_N.Fare)\n",
                "\n",
                "# Combine back together\n",
                "all_data = vcat(with_N, without_N)\n",
                "\n",
                "# Sort by PassengerId\n",
                "DF.sort!(all_data, :PassengerId)\n",
                "\n",
                "# Separate train and test\n",
                "train = all_data[1:891, :]\n",
                "test = all_data[892:end, :]\n",
                "\n",
                "# Add back survival information\n",
                "train.Survived = survivors;"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "55",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "### Fare Feature\n",
                "\n",
                "---\n",
                "\n",
                "If you have paid attention so far, you know that there is only one missing value in the fare column. Let's have it."
            ]
        },
        {
            "id": "56",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "test[ismissing.(test.Fare), :]"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m1×11 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m PassengerId \u001b[0m\u001b[1m Pclass \u001b[0m\u001b[1m Name               \u001b[0m\u001b[1m Sex     \u001b[0m\u001b[1m Age      \u001b[0m\u001b[1m SibSp \u001b[0m\u001b[1m Parc\u001b[0m ⋯\n     │\u001b[90m Int64       \u001b[0m\u001b[90m Int64  \u001b[0m\u001b[90m String             \u001b[0m\u001b[90m String7 \u001b[0m\u001b[90m Float64? \u001b[0m\u001b[90m Int64 \u001b[0m\u001b[90m Int6\u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │        1044       3  Storey, Mr. Thomas  male         60.5      0       ⋯\n\u001b[36m                                                               5 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>1×11 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">PassengerId</th><th style = \"text-align: left;\">Pclass</th><th style = \"text-align: left;\">Name</th><th style = \"text-align: left;\">Sex</th><th style = \"text-align: left;\">Age</th><th style = \"text-align: left;\">SibSp</th><th style = \"text-align: left;\">Parch</th><th style = \"text-align: left;\">Ticket</th><th style = \"text-align: left;\">Fare</th><th style = \"text-align: left;\">Cabin</th><th style = \"text-align: left;\">Embarked</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"InlineStrings.String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"AbstractString\" style = \"text-align: left;\">Abstract…</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1044</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">Storey, Mr. Thomas</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">60.5</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">3701</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">N</td><td style = \"text-align: left;\">S</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccccccccc}\n\t& PassengerId & Pclass & Name & Sex & Age & SibSp & Parch & Ticket & \\\\\n\t\\hline\n\t& Int64 & Int64 & String & String7 & Float64? & Int64 & Int64 & String31 & \\\\\n\t\\hline\n\t1 & 1044 & 3 & Storey, Mr. Thomas & male & 60.5 & 0 & 0 & 3701 & $\\dots$ \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "57",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Here, We can take the average of the **Fare** column to fill in the NaN value. However, for the sake of learning and practicing, we will try something else. We can take the average of the values where**Pclass** is **_3_**, **Sex** is **_male_** and **Embarked** is **_S_**"
            ]
        },
        {
            "id": "58",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: e742aa76-b6f8-4882-8bd6-aa10b96f06aa\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: f1dc8c6c33ba7df075ee608467be2a83dc1764fd\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:10.002749Z', iopub.status.busy: '2021-06-26T16:35:10.002232Z', iopub.status.idle: '2021-06-26T16:35:10.012662Z', shell.execute_reply: '2021-06-26T16:35:10.011431Z', shell.execute_reply.started: '2021-06-26T16:35:10.00248Z'}\n",
                "missing_value = @chain test begin\n",
                "    DF.subset(:Pclass => x -> x .== 3, :Embarked => x -> x .== \"S\", :Sex => x -> x .== \"male\")\n",
                "    _.Fare\n",
                "    skipmissing\n",
                "    Stats.mean\n",
                "end\n",
                "\n",
                "# Replace missing fare\n",
                "test.Fare = coalesce.(test.Fare, missing_value);"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "59",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "### Age Feature\n",
                "\n",
                "---\n",
                "\n",
                "We know that the feature \"Age\" is the one with most missing values, let's see it in terms of percentage."
            ]
        },
        {
            "id": "60",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 8ff25fb3-7a4a-4e06-b48f-a06b8d844917\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: c356e8e85f53a27e44b5f28936773a289592c5eb\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:10.014347Z', iopub.status.busy: '2021-06-26T16:35:10.014023Z', iopub.status.idle: '2021-06-26T16:35:10.024214Z', shell.execute_reply: '2021-06-26T16:35:10.023404Z', shell.execute_reply.started: '2021-06-26T16:35:10.014284Z'}\n",
                "println(\"Train age missing value: $(round(count(ismissing, train.Age) / DF.nrow(train) * 100, digits=2))%\")\n",
                "println(\"Test age missing value: $(round(count(ismissing, test.Age) / DF.nrow(test) * 100, digits=2))%\")"
            ],
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": "Train age missing value: 19.87%\nTest age missing value: 20.57%\n"
                }
            ],
            "execution_count": 1
        },
        {
            "id": "61",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "We will take a different approach since **~20% data in the Age column is missing** in both train and test dataset. The age variable seems to be promising for determining survival rate. Therefore, It would be unwise to replace the missing values with median, mean or mode. We will use machine learning model Random Forest Regressor to impute missing value instead of Null value. We will keep the age column unchanged for now and work on that in the feature engineering section.\n",
                "\n",
                "# Part 3. Visualization and Feature Relations\n",
                "\n",
                "<a id=\"visualization_and_feature_relations\" ></a>\n",
                "\n",
                "---\n",
                "\n",
                "Before we dive into finding relations between independent variables and our dependent variable(survivor), let us create some assumptions about how the relations may turn-out among features.\n",
                "\n",
                "**Assumptions:**\n",
                "\n",
                "- Gender: More female survived than male\n",
                "- Pclass: Higher socio-economic status passenger survived more than others.\n",
                "- Age: Younger passenger survived more than other passengers.\n",
                "- Fare: Passenger with higher fare survived more that other passengers. This can be quite correlated with Pclass.\n",
                "\n",
                "Now, let's see how the features are related to each other by creating some visualizations.\n",
                "\n",
                "## 3a. Gender and Survived\n",
                "\n",
                "<a id=\"gender_and_survived\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "62",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "Makie.set_theme!(Makie.theme_light())"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "63",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "64",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "fig1 = Makie.Figure()\n",
                "ax1 = Makie.Axis(fig1[1, 1], \n",
                "    title = \"Survived/Non-Survived Passenger Gender Distribution\",\n",
                "    xlabel = \"Sex\",\n",
                "    ylabel = \"% of passenger survived\",\n",
                "    xticks= (1:2, [\"Male\", \"Female\"]),\n",
                "    \n",
                ")\n",
                "\n",
                "# Calculate survival rates by gender\n",
                "survival_by_sex = @chain train begin\n",
                "    DF.groupby(:Sex)\n",
                "    DF.combine(:Survived => Stats.mean => :survival_rate)\n",
                "    DF.sort(:Sex, rev=true)  # Female first\n",
                "end\n",
                "\n",
                "# Create elegant barplot\n",
                "Makie.barplot!(ax1, 1:2, survival_by_sex.survival_rate, \n",
                "           color = [\"green\", \"pink\"],\n",
                "           strokewidth = 2,\n",
                "           strokecolor = :black)\n",
                "\n",
                "fig1\n",
                ""
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "65",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "This bar plot above shows the distribution of female and male survived. The **_x_label_** represents **Sex** feature while the **_y_label_** represents the % of **passenger survived**. This bar plot shows that ~74% female passenger survived while only ~19% male passenger survived.\n",
                ""
            ]
        },
        {
            "id": "66",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "fig = Makie.Figure()\n",
                "ax = Makie.Axis(fig[1, 1],\n",
                "    title = \"Passenger Gender Distribution - Survived vs Not-survived\",\n",
                "    xlabel = \"Sex\",\n",
                "    ylabel = \"# of Passenger Survived\",\n",
                "    xticks = (1:2, [\"Male\", \"Female\"])\n",
                ")\n",
                "\n",
                "# Count data for grouped bar chart\n",
                "count_data = @chain train begin\n",
                "    DF.groupby([:Sex, :Survived])\n",
                "    DF.combine(DF.nrow => :count)\n",
                "    DF.unstack(:Survived, :count, fill=0)\n",
                "end\n",
                "\n",
                "# Create grouped bar chart\n",
                "counts = [count_data[1, 2], count_data[1, 3], count_data[2, 2], count_data[2, 3]]\n",
                "\n",
                "\n",
                "Makie.barplot!(ax, [1, 1, 2, 2], counts,\n",
                "           dodge = [1, 2, 1,2],\n",
                "           color = [\"gray\", \"green\", \"gray\", \"green\"])\n",
                "\n",
                "\n",
                "\n",
                "# Add legend\n",
                "Makie.Legend(fig[1, 2], \n",
                "    [Makie.PolyElement(color = \"gray\"), Makie.PolyElement(color = \"green\")],\n",
                "    [\"Not Survived\", \"Survived\"],\n",
                "    \"Survival Status\")\n",
                "\n",
                "fig"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "67",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "This count plot shows the actual distribution of male and female passengers that survived and did not survive. It shows that among all the females ~ 230 survived and ~ 70 did not survive. While among male passengers ~110 survived and ~480 did not survive.\n",
                "\n",
                "**Summary**\n",
                "\n",
                "---\n",
                "\n",
                "- As we suspected, female passengers have survived at a much better rate than male passengers.\n",
                "- It seems about right since females and children were the priority.\n",
                "\n",
                "## 3b. Pclass and Survived\n",
                "\n",
                "<a id=\"pcalss_and_survived\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "68",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "fig3 = Makie.Figure()\n",
                "ax3 = Makie.Axis(fig3[1, 1],\n",
                "    title = \"Passenger Class Distribution - Survival Percentage\",\n",
                "    xlabel = \"Passenger Class\",\n",
                "    ylabel = \"Percentage\",\n",
                "    titlesize = 20,\n",
                "    xlabelsize = 16,\n",
                "    ylabelsize = 16,\n",
                "    xticks=(1:3, [\"1st Class\", \"2nd Class\", \"3rd Class\"])\n",
                ")\n",
                "\n",
                "# Calculate percentages by class\n",
                "class_survival = @chain train begin\n",
                "    DF.groupby([:Pclass, :Survived])\n",
                "    DF.combine(DF.nrow => :count)\n",
                "    DF.unstack(:Survived, :count, fill=0)\n",
                "end\n",
                "\n",
                "println(class_survival)\n",
                "no_survived = class_survival[:, 2]  # Second column (not survived)\n",
                "yes_survived = class_survival[:, 3]  # Third column (survived)\n",
                "total_by_class = no_survived + yes_survived\n",
                "\n",
                "println(total_by_class)\n",
                "survived_percentage = (yes_survived ./ total_by_class) * 100\n",
                "not_survived_percentage = (no_survived ./ total_by_class) * 100\n",
                "\n",
                "println(survived_percentage)\n",
                "flatten = vcat(not_survived_percentage ,survived_percentage)\n",
                "\n",
                "\n",
                "Makie.barplot!(ax3, [1, 2, 3, 1, 2, 3], flatten, stack=[1, 2, 3, 1, 2, 3], color = [\"red\", \"red\", \"red\", \"green\", \"green\", \"green\"], strokewidth = 1, strokecolor = :black)\n",
                "\n",
                "# Add legend\n",
                "Makie.Legend(fig3[1, 2],\n",
                "    [Makie.PolyElement(color = \"#F44336\"), Makie.PolyElement(color = \"#4CAF50\")],\n",
                "    [\"Not Survived\", \"Survived\"],\n",
                "    \"Survival Status\")\n",
                "\n",
                "fig3"
            ],
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": "\u001b[1m3×3 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Pclass \u001b[0m\u001b[1m 0     \u001b[0m\u001b[1m 1     \u001b[0m\n     │\u001b[90m Int64  \u001b[0m\u001b[90m Int64 \u001b[0m\u001b[90m Int64 \u001b[0m\n─────┼──────────────────────\n   1 │      1     80    136\n   2 │      2     97     87\n   3 │      3    372    119\n[216, 184, 491]\n[62.96296296296296, 47.28260869565217, 24.236252545824847]\n"
                },
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "69",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "70",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "Makie.barplot([1, 2, 3], survived_percentage, axis=(xticks=(1:3, [\"1st Class\", \"2nd Class\", \"3rd Class\"]), title = \"Passenger Class Distribution - Survived vs Non-Survived\"),)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "71",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "- It looks like ...\n",
                "  - ~ 63% first class passenger survived titanic tragedy, while\n",
                "  - ~ 48% second class and\n",
                "  - ~ only 24% third class passenger survived."
            ]
        },
        {
            "id": "72",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "\n",
                "fig = Makie.Figure(\n",
                "    title = \"Passenger Class Distribution - Survived vs Non-Survived\",\n",
                "    xlabel = \"Passenger Class\",\n",
                "    ylabel = \"Density of Passenger Survived\",\n",
                "    \n",
                ") # Adjust figure size as needed\n",
                "ax =  Makie.Axis(fig[1, 1], xticks = ([1, 2, 3], [\"Upper\", \"Middle\", \"Lower\"]))           \n",
                "\n",
                "not_survived = train.Pclass[train.Survived .== 0]\n",
                "survived = train.Pclass[train.Survived .== 1]\n",
                "\n",
                "d1 = Makie.density!(ax, train.Pclass[train.Survived .== 0], color = (:gray, 0.2), strokecolor=:gray, strokewidth=2)\n",
                "d2= Makie.density!(ax, train.Pclass[train.Survived .== 1], color = (:green, 0.2), strokecolor=:green, strokewidth=2)\n",
                "\n",
                "Makie.axislegend(ax,\n",
                "    [d1, d2],\n",
                "    [\"Not Survived\", \"Survived\"],\n",
                "    \"Survival Status\")\n",
                "\n",
                "\n",
                "fig"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "73",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "This KDE plot is pretty self-explanatory with all the labels and colors. Something I have noticed that some readers might find questionable is that the lower class passengers have survived more than second-class passengers. It is true since there were a lot more third-class passengers than first and second.\n",
                "\n",
                "**Summary**\n",
                "\n",
                "---\n",
                "\n",
                "The first class passengers had the upper hand during the tragedy. You can probably agree with me more on this, in the next section of visualizations where we look at the distribution of ticket fare and survived column.\n",
                "\n",
                "## 3c. Fare and Survived\n",
                "\n",
                "<a id=\"fare_and_survived\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "74",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "fig = Makie.Figure()\n",
                "\n",
                "ax = Makie.Axis(fig[1, 1],\n",
                "    title = \"Fare Distribution - Survived vs Non-Survived\",\n",
                "    xlabel = \"Fare\",\n",
                "    ylabel = \"Density of Passenger Survived\",\n",
                ")\n",
                "\n",
                "not_survived = train.Fare[train.Survived .== 0]\n",
                "survived = train.Fare[train.Survived .== 1]\n",
                "d1 = Makie.density!(ax, not_survived, color = (:gray, 0.2), strokecolor=:gray, strokewidth=2)\n",
                "d2 = Makie.density!(ax, survived, color = (:green, 0.2), strokecolor=:green, strokewidth=2)\n",
                "\n",
                "Makie.axislegend(ax,\n",
                "    [d1, d2],\n",
                "    [\"Not Survived\", \"Survived\"],\n",
                "    \"Survival Status\")\n",
                "fig"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "75",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "This plot shows something impressive..\n",
                "\n",
                "- The spike in the plot under 100 dollar represents that a lot of passengers who bought the ticket within that range did not survive.\n",
                "- When fare is approximately more than 280 dollars, there is no gray shade which means, either everyone passed that fare point survived or maybe there is an outlier that clouds our judgment. Let's check..."
            ]
        },
        {
            "id": "76",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "train[train.Fare .> 280, :]"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m3×12 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m PassengerId \u001b[0m\u001b[1m Pclass \u001b[0m\u001b[1m Name                              \u001b[0m\u001b[1m Sex     \u001b[0m\u001b[1m Age   \u001b[0m ⋯\n     │\u001b[90m Int64       \u001b[0m\u001b[90m Int64  \u001b[0m\u001b[90m String                            \u001b[0m\u001b[90m String7 \u001b[0m\u001b[90m Float6\u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │         259       1  Ward, Miss. Anna                   female       35 ⋯\n   2 │         680       1  Cardeza, Mr. Thomas Drake Martin…  male         36\n   3 │         738       1  Lesurer, Mr. Gustave J             male         35\n\u001b[36m                                                               8 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>3×12 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">PassengerId</th><th style = \"text-align: left;\">Pclass</th><th style = \"text-align: left;\">Name</th><th style = \"text-align: left;\">Sex</th><th style = \"text-align: left;\">Age</th><th style = \"text-align: left;\">SibSp</th><th style = \"text-align: left;\">Parch</th><th style = \"text-align: left;\">Ticket</th><th style = \"text-align: left;\">Fare</th><th style = \"text-align: left;\">Cabin</th><th style = \"text-align: left;\">Embarked</th><th style = \"text-align: left;\">Survived</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"InlineStrings.String7\" style = \"text-align: left;\">String7</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"InlineStrings.String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"AbstractString\" style = \"text-align: left;\">Abstract…</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">259</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Ward, Miss. Anna</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">35.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">PC 17755</td><td style = \"text-align: right;\">512.329</td><td style = \"text-align: left;\">B</td><td style = \"text-align: left;\">C</td><td style = \"text-align: right;\">1</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">680</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Cardeza, Mr. Thomas Drake Martinez</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">36.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">PC 17755</td><td style = \"text-align: right;\">512.329</td><td style = \"text-align: left;\">B</td><td style = \"text-align: left;\">C</td><td style = \"text-align: right;\">1</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">738</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Lesurer, Mr. Gustave J</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">35.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">PC 17755</td><td style = \"text-align: right;\">512.329</td><td style = \"text-align: left;\">B</td><td style = \"text-align: left;\">C</td><td style = \"text-align: right;\">1</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccccccc}\n\t& PassengerId & Pclass & Name & Sex & Age & SibSp & \\\\\n\t\\hline\n\t& Int64 & Int64 & String & String7 & Float64? & Int64 & \\\\\n\t\\hline\n\t1 & 259 & 1 & Ward, Miss. Anna & female & 35.0 & 0 & $\\dots$ \\\\\n\t2 & 680 & 1 & Cardeza, Mr. Thomas Drake Martinez & male & 36.0 & 0 & $\\dots$ \\\\\n\t3 & 738 & 1 & Lesurer, Mr. Gustave J & male & 35.0 & 0 & $\\dots$ \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "77",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "As we assumed, it looks like an outlier with a fare of $512. We sure can delete this point. However, we will keep it for now.\n",
                "\n",
                "## 3d. Age and Survived\n",
                "\n",
                "<a id=\"age_and_survived\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "78",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "\n",
                "fig = Makie.Figure()\n",
                "\n",
                "ax = Makie.Axis(fig[1, 1], title = \"Age Distribution - Survived vs Non-Survived\",\n",
                "    xlabel = \"Age\",\n",
                "    ylabel = \"Density of Passenger Survived\")\n",
                "\n",
                "\n",
                "# clean missing first\n",
                "clean_train =  DF.dropmissing(train, :Age)\n",
                "not_survived = clean_train.Age[clean_train.Survived .== 0]\n",
                "survived = clean_train.Age[clean_train.Survived .== 1]\n",
                "\n",
                "d1 = Makie.density!(ax, not_survived, color = (:gray, 0.2), strokecolor=:gray, strokewidth=2)\n",
                "d2 = Makie.density!(ax, survived, color = (:green, 0.2), strokecolor=:green, strokewidth=2)\n",
                "\n",
                "Makie.axislegend(ax,\n",
                "    [d1, d2],\n",
                "    [\"Not Survived\", \"Survived\"],\n",
                "    \"Survival Status\")\n",
                "\n",
                "fig"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "79",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "There is nothing out of the ordinary about this plot, except the very left part of the distribution. This may hint on the posibility that children and infants were the priority.\n",
                "\n",
                "## 3e. Combined Feature Relations\n",
                "\n",
                "<a id='combined_feature_relations'></a>\n",
                "\n",
                "---\n",
                "\n",
                "In this section, we are going to discover more than two feature relations in a single graph. I will try my best to illustrate most of the feature relations. Let's get to it."
            ]
        },
        {
            "id": "80",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "\n",
                "fig8 = Makie.Figure(title=\"Survived by Sex and Age\")\n",
                "\n",
                "# Create subplots for each combination\n",
                "\n",
                "for (i, (sex, survived)) in enumerate(Iterators.product([\"female\", \"male\"], [0, 1]))\n",
                "\n",
                "    ax = Makie.Axis(fig8[div(i - 1, 2) + 1, i % 2 + 1],\n",
                "        title = \"$sex $survived\",\n",
                "        xlabel = \"Age\",\n",
                "        ylabel = \"Count\"\n",
                "    )\n",
                "    \n",
                "    subset_data = train[(train.Sex .== sex) .& (train.Survived .== survived) .& .!ismissing.(train.Age), :]\n",
                "    \n",
                "    if DF.nrow(subset_data) > 0\n",
                "        Makie.hist!(ax, subset_data.Age, bins = 20, \n",
                "                color = survived == 1 ? \"green\" : \"gray\",\n",
                "                strokewidth = 1, strokecolor = :white)\n",
                "    end\n",
                "end\n",
                "\n",
                "fig8"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "81",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Facetgrid is a great way to visualize multiple variables and their relationships at once. From the chart in section 3a we have a intuation that female passengers had better prority than males during the tragedy. However, from this facet grid, we can also understand which age range groups survived more than others or were not so lucky"
            ]
        },
        {
            "id": "82",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "fig8 = Makie.Figure(title=\"Survived by Sex and Age\")\n",
                "\n",
                "# Create subplots for each combination\n",
                "for (i, (sex, embarked)) in enumerate(Iterators.product([\"female\", \"male\"], [\"S\", \"C\", \"Q\"]))\n",
                "\n",
                "    ax = Makie.Axis(fig8[div(i - 1, 2) + 1, i % 2 + 1],\n",
                "        title = \"$sex $embarked\",\n",
                "    )\n",
                "\n",
                "    subset_data = train[(train.Sex .== sex) .& (train.Embarked .== embarked) .& .!ismissing.(train.Age), :]\n",
                "\n",
                "    for (survived) in [0, 1]\n",
                "        subset_survived = subset_data[(subset_data.Survived .== survived), :]\n",
                "        println(\"Length of subset: $(DF.nrow(subset_survived))\")\n",
                "\n",
                "        if DF.nrow(subset_data) > 0\n",
                "             Makie.hist!(ax, subset_survived.Age, \n",
                "                        bins = 20,\n",
                "                        color = survived == 1 ? (:green, 0.5) : (:gray, 0.5),\n",
                "                        strokewidth = 1, \n",
                "                        strokecolor = :white,\n",
                "                        label = survived == 1 ? \"Survived\" : \"Not Survived\"\n",
                "                    )\n",
                "        end\n",
                "    end\n",
                "end\n",
                "\n",
                "\n",
                "Makie.Legend(fig8[1, 3], \n",
                "    [Makie.PolyElement(color = (:gray, 0.7)), \n",
                "     Makie.PolyElement(color = (:green, 0.7))],\n",
                "    [\"Not Survived\", \"Survived\"],\n",
                "    \"Survival Status\"\n",
                ")\n",
                "\n",
                "fig8"
            ],
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": "Length of subset: 53\nLength of subset: 133\nLength of subset: 300\nLength of subset: 68\nLength of subset: 6\nLength of subset: 57\nLength of subset: 45\nLength of subset: 24\nLength of subset: 5\nLength of subset: 7\nLength of subset: 15\nLength of subset: 1\n"
                },
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 600,
                            "height": 450
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "83",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "This is another compelling facet grid illustrating four features relationship at once. They are **Embarked, Age, Survived & Sex**.\n",
                "\n",
                "- The color illustrates passengers survival status(green represents survived, gray represents not survived)\n",
                "- The column represents Sex(left being male, right stands for female)\n",
                "- The row represents Embarked(from top to bottom: S, C, Q)\n",
                "\n",
                "---\n",
                "\n",
                "Now that I have steered out the apparent let's see if we can get some insights that are not so obvious as we look at the data.\n",
                "\n",
                "- Most passengers seem to be boarded on Southampton(S).\n",
                "- More than 60% of the passengers died boarded on Southampton.\n",
                "- More than 60% of the passengers lived boarded on Cherbourg(C).\n",
                "- Pretty much every male that boarded on Queenstown(Q) did not survive.\n",
                "- There were very few females boarded on Queenstown, however, most of them survived."
            ]
        },
        {
            "id": "84",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "fig9 = Makie.Figure(resolution = (1000, 600))\n",
                "\n",
                "ax9_m = Makie.Axis(fig9[1, 1],\n",
                "    title = \"Male\", \n",
                "    xlabel = \"Fare\",\n",
                "    ylabel = \"Age\")\n",
                "# Female subplot\n",
                "ax9_f = Makie.Axis(fig9[1, 2], \n",
                "    title = \"Female\",\n",
                "    xlabel = \"Fare\",\n",
                "    ylabel = \"Age\")\n",
                "\n",
                "female_data = train[(train.Sex .== \"female\") .& .!ismissing.(train.Age), :]\n",
                "male_data = train[(train.Sex .== \"male\") .& .!ismissing.(train.Age), :]\n",
                "\n",
                "\n",
                "Makie.scatter!(ax9_m, male_data.Fare, male_data.Age,\n",
                "           color = [s == 1 ? \"green\" : \"gray\" for s in male_data.Survived],\n",
                "           strokewidth=1, strokecolor=\"white\", markersize=14)\n",
                "Makie.scatter!(ax9_f, female_data.Fare, female_data.Age,\n",
                "           color = [s == 1 ? \"green\" : \"gray\" for s in female_data.Survived],\n",
                "           strokewidth=1, strokecolor=\"white\", markersize=14)\n",
                "\n",
                "\n",
                "# Add legend\n",
                "Makie.Legend(fig9[1, 3],\n",
                "    [Makie.MarkerElement(color = \"gray\", marker = :circle), \n",
                "     Makie.MarkerElement(color = \"green\", marker = :circle)],\n",
                "    [\"Not Survived\", \"Survived\"],\n",
                "    \"Survived\")\n",
                "\n",
                "Makie.Label(fig9[0, :], \"Survived by Sex, Fare and Age\")\n",
                "fig9"
            ],
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": "\u001b[33m\u001b[1m┌ \u001b[22m\u001b[39m\u001b[33m\u001b[1mWarning: \u001b[22m\u001b[39mFound `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n\u001b[33m\u001b[1m└ \u001b[22m\u001b[39m\u001b[90m@ Makie C:\\Users\\Fabrizio\\.julia\\packages\\Makie\\aJUtI\\src\\scenes.jl:259\u001b[39m\n"
                },
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=1000 height=600 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 1000,
                            "height": 600
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "85",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "This facet grid unveils a couple of interesting insights. Let's find out.\n",
                "\n",
                "- The grid above clearly demonstrates the three outliers with Fare of over \\$500. At this point, I think we are quite confident that these outliers should be deleted.\n",
                "- Most of the passengers were with in the Fare range of \\$100."
            ]
        },
        {
            "id": "86",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "fig10 = Makie.Figure(size = (800, 600))\n",
                "ax10 = Makie.Axis(fig10[1, 1],\n",
                "    title = \"Parents/Children Survival Rate\",\n",
                "    xlabel = \"Number of Parents/Children\",\n",
                "    ylabel = \"Survival Rate\",\n",
                ")\n",
                "\n",
                "parch_survival = @chain train_clean begin\n",
                "    DF.groupby(:Parch)\n",
                "    DF.combine(\n",
                "        :Survived => Stats.mean => :survival_rate,\n",
                "        :Survived => Stats.std => :std_dev,\n",
                "        :Survived => length => :count\n",
                "    )\n",
                "end\n",
                "\n",
                "parch_survival.std_error = parch_survival.std_dev ./ sqrt.(parch_survival.count)\n",
                "\n",
                "Makie.scatterlines!(ax10, parch_survival.Parch, parch_survival.survival_rate,\n",
                "    color = \"#2196F3\", \n",
                "    linewidth = 3,\n",
                "    markersize = 8\n",
                ")\n",
                "\n",
                "error = Makie.errorbars!(ax10, parch_survival.Parch, parch_survival.survival_rate, \n",
                "    parch_survival.std_error,\n",
                "    color = \"blue\",\n",
                "    linewidth = 2,\n",
                "    whiskerwidth = 8\n",
                ")\n",
                "\n",
                "Makie.Legend(fig10[1, 2],\n",
                "    [Makie.PolyElement(color = \"#2196F3\"), Makie.PolyElement(color = \"blue\")],\n",
                "    [\"Survival Rate\", \"Standard Error\"],\n",
                "    \"Legend\"\n",
                ")\n",
                "fig10"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=800 height=600 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, 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uRw4cIATJ07Q2dlJTU0N69evp6uri9OnT1NQUMD8+fPZvn07Tz31FDNnzmTFihX4vs+BAwc4cOAAWVlZXHfddVx99dWIiEj/MIjIZWPs2LGsXLmS1zJkyBDuvfdeuru7yc3NxbIs5s+fT0ZBQQGVlZVcaMyYMXziE58gkUjgui65ublk5Ofns3LlSvqaPn06K1euJMNxHO644w5c18W2bdIqKiqoqKggHo+TSqXIy8vDtm1c1+WOO+5g5MiRXKikpIT77ruPZDJJT08PQ4cOxbZtMrKysli5ciV9zZ49m9mzZ5Nx4403cuONN5Jx4403cuONN5JhjOGWW27hXe96F57nEYvFuNDKlSu5UHZ2Nh/4wAfwPI+enh7y8vKwLIuMz372s/SVk5PDypUr+U1s2+b666/n+uuvp6uri1QqxdChQ3Ech77mzJlDZWUlvb295ObmknbjjTeSceutt3LrrbdyMRUVFVRUVHChK6+8kpUrV3Khz3zmM1xMVVUV8+bNw3VdsrOzSbvhhhvI+NSnPsVr+fznP8+FHMfhj//4j+nr3nvvpbu7m9zcXCzLYv78+fS1fPlyli5dShAEpGVnZ/OBD3wAz/Po6ekhLy8Py7IQEZH+YxARuYBlWeTl5fFmxGIxYrEYb5YxhgtlZ2eTnZ1NhjGGoqIiXks0GiUajdKfjDEYY3ijHMdhyJAhvJ3y8vJ4LY7jkJubyzspEokQiUToT5ZlkZeXx2uxbZsLOY7DkCFDEBGR/mcQEREREREJiUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUHedl1dXcRiMSKRCNI/UqkUiUSCvLw8pP90dnYyZMgQbNtG+kc8HictOzsb6R++73Pu3DmGDRuG9J+uri5isRiRSATpH6lUikQiQV5eHiKDmUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkBhERCdWsWZzn+zHSbJvzdu1CRETkkmUQEZFQ7d5NHzYiIiKXE4OIiIRq507Oq6zkVTt3IiIiclkwiIhIqGbN4n+ZNQsREZHLgkFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkBhERERERkZAYREREREREQmIQEREREREJiUFERERERCQkhgGmubmZ9evXc+bMGYqLi7npppvIzs7mYjzPY+PGjezfvx/P8ygrK2PJkiVkZ2cjIiIiIiIDj2EAOX36ND/+8Y+pqqpi0aJFbNy4kZ/85CfcfffdXMxzzz3Hzp07WbJkCVlZWTz33HP84he/4KMf/SgiIiIiIjLwGAaQHTt2MG7cOK6//nrSRo8ezTe/+U2OHTtGUVERFzp48CBz5syhsrKStCAI+NnPfobneTiOg4iIiIiIDCyGAeTo0aNMnDiRjJycHMaMGUNzczNFRUVcaMSIERw7dowgCLAsi2PHjjFs2DAcx0FERERERAYewwDS1dVFbm4ufeXm5tLd3c3FvPvd7+aHP/wh3/72t4nFYnR1dXHXXXfxm3R3dxOGnp4eXNclEokg/SOVSpFMJrEsC+k/PT092LaNbdtIf8klrbu7G+kfvu/T09ODMQbpPz09PbiuSyQSQfpHKpUimUxiWRZhyM3NRaQ/GAYQz/NwHIe+bNsmlUpxMbt378bzPBYuXEg0GuXFF1+ktraW97znPViWxYUikQhhMMYQiUSIRCJI//F9n0gkgvQfYwyRSATbtpH+FYlEkP7h+z7GGCKRCNJ/jDFEIhEikQjSf3zfJxKJIDKYGQaQvLw84vE4ffX29pKXl8eFEokEa9eu5fd+7/coKioibfr06XzrW99izpw5jBs3jgtFo1HCEI1GiUajRCIRpH9YlkUQBESjUaT/RKNRotEotm0j/SsajSL9w/d9otEo0WgU6T/RaJRoNEokEkH6h2VZBEFANBpFZDAzDCAjR46ktbWVDN/3OXnyJFVVVVzo7NmzeJ5Hfn4+GVlZWWRnZ3P69GnGjRuHiIiIiIgMLIYBpLKykkcffZS2tjZGjhzJ9u3bcRyHKVOmkNbY2MipU6eYN28eI0aMYNiwYWzYsIFly5Zh2zYvvvgi8XicCRMmICIiIiIiA49hACktLaW6uprvfve75Obmkkwm+fCHP4zjOKQdOnSInTt3Mm/ePGzb5kMf+hC/+MUv2L59O7ZtY4zhtttuY9iwYYiIiIiIyMBjGGAWL17M1VdfzdmzZxkxYgSWZZGxbNkyli1bRkZRURGf/vSn6ezsxHVdCgoKsG0bEREREREZmAwDUDQaZeTIkbwelmWRn5+PiIiIiIgMfAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBREREREQkJAYREREREZGQGEREREREREJiEBERERERCYlBRERE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cVg61kZEROTjshEREfkQdWUWGw85+OqbHJaOtREREfm4bERERD7EvDKLf93ACWuaEkAIERGRj8tGRETkQ0wptMgOGXQOeBzq8Xinw2VsromIiMjHYSMiIvIhLANmj7R4sTGBr77ZYWyuiYiIyMdhIyIi8hHqyixebEzgq29yuPWiACIiIh+HjYiIyEeYV2aR9PpBh5gDQQsREZHTZiMiIvIRRmWZjMoyOdDl0hv32HzYYdZICxERkdNlIyIicgrqohb/u8HFV9/sMGukhYiIyOmyEREROQV1ZRb/uyGOr77J4c9mIiIictpsRERETsHcUgvLAMeDrUccOvo9csMGIiIip8NGRETkFGSFDGoKLTYfdnA9WNfi8OkxNiIiIqfDRkRE5BTVRS02H3bw1Tc7fHqMjYiIyOmwEREROUV1ZRYPbOSENU0JIISIiMjpsBERETlF04osMoMG78U8Wt7zaDzuMjrHRERE5FTZiIiInCLLhFkjLVa+m8BX3+wwOsdERETkVNmIiIichroyi5XvJvDVNzt8qTqAiIjIqbIRERE5DfOiFkmvNTskXLBNRERETomNiIjIaRidY1KWZdLU5dIT99hy2GFGiYWIiMipsBERETlNc0stftXl4qtvdphRYiEiInIqbERERE5TXZnFr3bE8dU3Odx3MSIiIqfERkRE5DTVRS0sAxwP3mpz6BzwyA4ZiIiIfBQbERGR05QdMphcYPJ2m4vjwestDosrbURERD6KjYiIyMdQF7V5uy2Gr77ZYXGljYiIyEexERER+Rjqyiz+fRMnvNrkICIicipsREREPobpxRbpAYPeuEdTl8uBLpdRWSYiIiIfxkZERORjCJgwa6TFy/sT+NY0Odw82UREROTD2IiIiHxMdVGLl/cn8NU3O9w8OYCIiMiHsREREfmY6soskta1ODguWCYiIiIfyEZERORjGpdrUpJh0Nrt0TXg8fYRh9oiCxERkQ9iIyIicgYuido8sTOOb02TQ22RhYiIyAexEREROQPzohZP7Izjq292uGcGIiIiH8hGRETkDNSVWZgGuB5sPuzwXswjM2ggIiJyMjYiIiJnIDdsMDHfZPtRF8eFNw46LKywERERORkbERGRMzSvzGb70Ri++iaHhRU2IiIiJ2MjIiJyhuqiFj/czAlrmh1EREQ+iI2IiMgZmlFikR4w6I17NB53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PeVymd+Vz+fp6elhZGQEx/fv3/n27RtHCQQC+P1+isUiJ06cwLG1tUUul2NiYgKPx8M/8fTpU4LBIOl0mq6uLnp7e7lx4wbb29u8ffuWU6dOURGNRgmHwzx+/Ji//voLt9uN4+DggLm5Obq6uqivr+ffikQiLC8vMzAwgGN/f59CoUA4HOYwgUAAv99PsVjkxIkTOLa2tsjlckxMTODxeBARkT+LiYjIbxgaGuLNmzdsb29TEYlEmJ2dxVEqlSgUCvyOQCDAzMwMyWSSz58/8/r1a6ampnCMjIxw+/ZtDg4OCIfDrKyssLGxwfj4OL+is7OTnp4eZmZmGBgYoFgsMjc3x7lz5/h/aWtr49mzZ8zPz7O7u8vS0hIej4elpSVisRg/crlcjI6Oksvl2NzcpK6ujsXFRZqbm2lqaqJcLvMzpmni8Xh4/vw5mUwGv9/PkydPKBaL+P1+lpaWCIfD+P1+tre3OXbsGBUul4szZ85w9+5dbt26RSKRwOPxsLy8zMbGBpcvX+Z3DA8Pc/PmTe7du0c0GmV5eRm3281RXC4Xo6Oj5HI5Njc3qaurY3FxkebmZpqamiiXy4iIyJ/FRETkF/X19eHz+ahmGAbnz58nn8/T0tKC4/Tp08zOzvLu3Tva29u5ePEic3NzVCSTScLhMBXRaJSdnR0qQqEQ2WwWR3d3N52dnZTLZfL5PHV1dVy6dInjx4/jCIfDTE9P8+rVK9bW1ohEIpw9exafz4cjlUoRiUT4mcnJSebn51lfX8fr9TI1NUVXVxcOwzCwbRufz8dhgsEgtm1jmiZHyWQyuFwu1tbWCAQCTExM4HK5WFhYYG9vj1gsRqlUoloqlSIYDGvjEiwAAAInSURBVJLP59nZ2SGdTpNKpXAYhoFt2/h8PiosyyKdTuMwTZMLFy6wurrK3t4emUyG+vp6VldX2dzcpKenh3Q6zcbGBr29vfyovb2dK1eusLCwwMePHymXy3R3dzM5OUljYyOOUChENpulWiKRwDRNHLFYjFKphKO1tZVMJoMjFAoxPT3N/Pw86+vr9Pf309HRwebmJo5YLEapVKJaKpUiGAySz+fZ2dkhnU6TSqVwGIaBbdv4fD4qLMsinU4jIiL/TSYiIr+or6+Pw1iWhWVZVHi9XkZHR6lm2zYVyWSSatFolGqhUIhsNouju7ubikQiwWFaWloYGxvjMKlUir9jGAaZTIZMJsOPDMPAtm2OEgwGsW2bnzEMg8HBQQYHB6k2NjaGIxgMcph4PE48HudHhmFg2zbVLMvCsiwqEokEiUSCimQySTKZpFpDQwORSITDNDQ0MDw8zFFCoRDZbJZqiUSCilgsRkVrayutra1UtLS0MD4+TrVwOIwjFotxmHg8Tjwe50eGYWDbNtUsy8KyLERE5L/JREREREREpEZMREREREREasRERERERESkRkxERERERERqxERERERERKRGTERERERERGrEREREREREpEZMREREREREasRERERERESkRkxERERERERqxERERERERKRGTERERERERGrEREREREREpEZMREREREREasRERERERESkRkxERERERERqxERERERERKRG/gdWvWg7p8fh4gAAAABJRU5ErkJggg==\"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 800,
                            "height": 600
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "87",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "**Passenger who traveled in big groups with parents/children had less survival rate than other passengers.**"
            ]
        },
        {
            "id": "88",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "# sns.factorplot(x =  \"SibSp\", y = \"Survived\", data = train,kind = \"point\",size = 8)\n",
                "# plt.title('Factorplot of Sibilings/Spouses survived', fontsize = 25)\n",
                "# plt.subplots_adjust(top=0.85)\n",
                "\n",
                "fig11 = Makie.Figure(size = (800, 600))\n",
                "ax11 = Makie.Axis(fig11[1, 1],\n",
                "    title = \"Siblings/Spouses Survival Rate\",\n",
                "    xlabel = \"Number of Siblings/Spouses\",\n",
                "    ylabel = \"Survival Rate\",\n",
                ")\n",
                "\n",
                "sibsp_survival = @chain train_clean begin\n",
                "    DF.groupby(:SibSp)\n",
                "    DF.combine(\n",
                "        :Survived => Stats.mean => :survival_rate,\n",
                "        :Survived => Stats.std => :std_dev,\n",
                "        :Survived => length => :count\n",
                "    )\n",
                "end\n",
                "\n",
                "sibsp_survival.std_error = sibsp_survival.std_dev ./ sqrt.(sibsp_survival.count)\n",
                "\n",
                "Makie.scatterlines!(ax11, sibsp_survival.SibSp, sibsp_survival.survival_rate,\n",
                "    color = \"#2196F3\", \n",
                "    linewidth = 3,\n",
                "    markersize = 8\n",
                ")\n",
                "\n",
                "error = Makie.errorbars!(ax11, sibsp_survival.SibSp, sibsp_survival.survival_rate, \n",
                "    sibsp_survival.std_error,\n",
                "    color = \"blue\",\n",
                "    linewidth = 2,\n",
                "    whiskerwidth = 8\n",
                ")\n",
                "\n",
                "Makie.Legend(fig11[1, 2],\n",
                "    [Makie.PolyElement(color = \"#2196F3\"), Makie.PolyElement(color = \"blue\")],\n",
                "    [\"Survival Rate\", \"Standard Error\"],\n",
                "    \"Legend\"\n",
                ")\n",
                "fig11"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "image/png": "",
                        "text/html": "<img width=800 height=600 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>"
                    },
                    "metadata": {
                        "image/png": {
                            "width": 800,
                            "height": 600
                        }
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "89",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "**While, passenger who traveled in small groups with sibilings/spouses had better changes of survivint than other passengers.**"
            ]
        },
        {
            "id": "90",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "train.Sex = [sex == \"female\" ? 0 : 1 for sex in train.Sex]\n",
                "test.Sex = [sex == \"female\" ? 0 : 1 for sex in test.Sex];"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "91",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "# Part 4: Statistical Overview\n",
                "\n",
                "<a id=\"statisticaloverview\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "![title](https://cdn-images-1.medium.com/max/400/1*hFJ-LI7IXcWpxSLtaC0dfg.png)\n",
                "\n",
                "**Train info**"
            ]
        },
        {
            "id": "92",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "DF.describe(train)"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m12×7 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m variable    \u001b[0m\u001b[1m mean     \u001b[0m\u001b[1m min                 \u001b[0m\u001b[1m median  \u001b[0m\u001b[1m max               \u001b[0m ⋯\n     │\u001b[90m Symbol      \u001b[0m\u001b[90m Union…   \u001b[0m\u001b[90m Any                 \u001b[0m\u001b[90m Union…  \u001b[0m\u001b[90m Any               \u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ PassengerId  446.0     1                    446.0    891                ⋯\n   2 │ Pclass       2.30864   1                    3.0      3\n   3 │ Name        \u001b[90m          \u001b[0m Abbing, Mr. Anthony \u001b[90m         \u001b[0m van Melkebeke, Mr.\n   4 │ Sex          0.647587  0                    1.0      1\n   5 │ Age          29.6991   0.42                 28.0     80.0               ⋯\n   6 │ SibSp        0.523008  0                    0.0      8\n   7 │ Parch        0.381594  0                    0.0      6\n   8 │ Ticket      \u001b[90m          \u001b[0m 110152              \u001b[90m         \u001b[0m WE/P 5735\n   9 │ Fare         32.2042   0.0                  14.4542  512.329            ⋯\n  10 │ Cabin       \u001b[90m          \u001b[0m A                   \u001b[90m         \u001b[0m T\n  11 │ Embarked    \u001b[90m          \u001b[0m C                   \u001b[90m         \u001b[0m S\n  12 │ Survived     0.383838  0                    0.0      1\n\u001b[36m                                                               3 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>12×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">min</th><th style = \"text-align: left;\">median</th><th style = \"text-align: left;\">max</th><th style = \"text-align: left;\">nmissing</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Type\" style = \"text-align: left;\">Type</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">PassengerId</td><td style = \"text-align: left;\">446.0</td><td style = \"text-align: left;\">1</td><td style = \"text-align: left;\">446.0</td><td style = \"text-align: left;\">891</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Pclass</td><td style = \"text-align: left;\">2.30864</td><td style = \"text-align: left;\">1</td><td style = \"text-align: left;\">3.0</td><td style = \"text-align: left;\">3</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Name</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">Abbing, Mr. Anthony</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">van Melkebeke, Mr. Philemon</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Sex</td><td style = \"text-align: left;\">0.647587</td><td style = \"text-align: left;\">0</td><td style = \"text-align: left;\">1.0</td><td style = \"text-align: left;\">1</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Age</td><td style = \"text-align: left;\">29.6991</td><td style = \"text-align: left;\">0.42</td><td style = \"text-align: left;\">28.0</td><td style = \"text-align: left;\">80.0</td><td style = \"text-align: right;\">177</td><td style = \"text-align: left;\">Union{Missing, Float64}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">SibSp</td><td style = \"text-align: left;\">0.523008</td><td style = \"text-align: left;\">0</td><td style = \"text-align: left;\">0.0</td><td style = \"text-align: left;\">8</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">Parch</td><td style = \"text-align: left;\">0.381594</td><td style = \"text-align: left;\">0</td><td style = \"text-align: left;\">0.0</td><td style = \"text-align: left;\">6</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">Ticket</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">110152</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">WE/P 5735</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String31</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">Fare</td><td style = \"text-align: left;\">32.2042</td><td style = \"text-align: left;\">0.0</td><td style = \"text-align: left;\">14.4542</td><td style = \"text-align: left;\">512.329</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Union{Missing, Float64}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Cabin</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">A</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">T</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">Embarked</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">C</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">S</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">AbstractString</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">Survived</td><td style = \"text-align: left;\">0.383838</td><td style = \"text-align: left;\">0</td><td style = \"text-align: left;\">0.0</td><td style = \"text-align: left;\">1</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Int64</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|cccccc}\n\t& variable & mean & min & median & max & \\\\\n\t\\hline\n\t& Symbol & Union… & Any & Union… & Any & \\\\\n\t\\hline\n\t1 & PassengerId & 446.0 & 1 & 446.0 & 891 & $\\dots$ \\\\\n\t2 & Pclass & 2.30864 & 1 & 3.0 & 3 & $\\dots$ \\\\\n\t3 & Name &  & Abbing, Mr. Anthony &  & van Melkebeke, Mr. Philemon & $\\dots$ \\\\\n\t4 & Sex & 0.647587 & 0 & 1.0 & 1 & $\\dots$ \\\\\n\t5 & Age & 29.6991 & 0.42 & 28.0 & 80.0 & $\\dots$ \\\\\n\t6 & SibSp & 0.523008 & 0 & 0.0 & 8 & $\\dots$ \\\\\n\t7 & Parch & 0.381594 & 0 & 0.0 & 6 & $\\dots$ \\\\\n\t8 & Ticket &  & 110152 &  & WE/P 5735 & $\\dots$ \\\\\n\t9 & Fare & 32.2042 & 0.0 & 14.4542 & 512.329 & $\\dots$ \\\\\n\t10 & Cabin &  & A &  & T & $\\dots$ \\\\\n\t11 & Embarked &  & C &  & S & $\\dots$ \\\\\n\t12 & Survived & 0.383838 & 0 & 0.0 & 1 & $\\dots$ \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "93",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "94",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "categorical_cols = [col for col in names(train) if eltype(train[!, col]) <: Union{String, AbstractString}]\n",
                "DF.describe(train[!, categorical_cols])"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m4×7 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m variable \u001b[0m\u001b[1m mean    \u001b[0m\u001b[1m min                 \u001b[0m\u001b[1m median  \u001b[0m\u001b[1m max                   \u001b[0m ⋯\n     │\u001b[90m Symbol   \u001b[0m\u001b[90m Nothing \u001b[0m\u001b[90m Abstract…           \u001b[0m\u001b[90m Nothing \u001b[0m\u001b[90m Abstract…             \u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ Name     \u001b[90m         \u001b[0m Abbing, Mr. Anthony \u001b[90m         \u001b[0m van Melkebeke, Mr. Phi ⋯\n   2 │ Ticket   \u001b[90m         \u001b[0m 110152              \u001b[90m         \u001b[0m WE/P 5735\n   3 │ Cabin    \u001b[90m         \u001b[0m A                   \u001b[90m         \u001b[0m T\n   4 │ Embarked \u001b[90m         \u001b[0m C                   \u001b[90m         \u001b[0m S\n\u001b[36m                                                               3 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>4×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">min</th><th style = \"text-align: left;\">median</th><th style = \"text-align: left;\">max</th><th style = \"text-align: left;\">nmissing</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Nothing\" style = \"text-align: left;\">Nothing</th><th title = \"AbstractString\" style = \"text-align: left;\">Abstract…</th><th title = \"Nothing\" style = \"text-align: left;\">Nothing</th><th title = \"AbstractString\" style = \"text-align: left;\">Abstract…</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"DataType\" style = \"text-align: left;\">DataType</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Name</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">Abbing, Mr. Anthony</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">van Melkebeke, Mr. Philemon</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Ticket</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">110152</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">WE/P 5735</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String31</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Cabin</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">A</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">T</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Embarked</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">C</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">S</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">AbstractString</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccccccc}\n\t& variable & mean & min & median & max & nmissing & \\\\\n\t\\hline\n\t& Symbol & Nothing & Abstract… & Nothing & Abstract… & Int64 & \\\\\n\t\\hline\n\t1 & Name &  & Abbing, Mr. Anthony &  & van Melkebeke, Mr. Philemon & 0 & $\\dots$ \\\\\n\t2 & Ticket &  & 110152 &  & WE/P 5735 & 0 & $\\dots$ \\\\\n\t3 & Cabin &  & A &  & T & 0 & $\\dots$ \\\\\n\t4 & Embarked &  & C &  & S & 0 & $\\dots$ \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "95",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "96",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "survived_summary = @chain train begin\n",
                "    DF.select(DF.names(train, Number)...)\n",
                "    DF.groupby(:Survived)\n",
                "    DF.combine(DF.All() .=> Stats.mean)\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m2×7 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Survived \u001b[0m\u001b[1m PassengerId_mean \u001b[0m\u001b[1m Pclass_mean \u001b[0m\u001b[1m Sex_mean \u001b[0m\u001b[1m SibSp_mean \u001b[0m\u001b[1m Parch_me\u001b[0m ⋯\n     │\u001b[90m Int64    \u001b[0m\u001b[90m Float64          \u001b[0m\u001b[90m Float64     \u001b[0m\u001b[90m Float64  \u001b[0m\u001b[90m Float64    \u001b[0m\u001b[90m Float64 \u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │        0           447.016      2.53188  0.852459    0.553734    0.3296 ⋯\n   2 │        1           444.368      1.95029  0.318713    0.473684    0.4649\n\u001b[36m                                                               2 columns omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>2×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Survived</th><th style = \"text-align: left;\">PassengerId_mean</th><th style = \"text-align: left;\">Pclass_mean</th><th style = \"text-align: left;\">Sex_mean</th><th style = \"text-align: left;\">SibSp_mean</th><th style = \"text-align: left;\">Parch_mean</th><th style = \"text-align: left;\">Survived_mean</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">447.016</td><td style = \"text-align: right;\">2.53188</td><td style = \"text-align: right;\">0.852459</td><td style = \"text-align: right;\">0.553734</td><td style = \"text-align: right;\">0.32969</td><td style = \"text-align: right;\">0.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">444.368</td><td style = \"text-align: right;\">1.95029</td><td style = \"text-align: right;\">0.318713</td><td style = \"text-align: right;\">0.473684</td><td style = \"text-align: right;\">0.464912</td><td style = \"text-align: right;\">1.0</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccccccc}\n\t& Survived & PassengerId\\_mean & Pclass\\_mean & Sex\\_mean & SibSp\\_mean & Parch\\_mean & Survived\\_mean\\\\\n\t\\hline\n\t& Int64 & Float64 & Float64 & Float64 & Float64 & Float64 & Float64\\\\\n\t\\hline\n\t1 & 0 & 447.016 & 2.53188 & 0.852459 & 0.553734 & 0.32969 & 0.0 \\\\\n\t2 & 1 & 444.368 & 1.95029 & 0.318713 & 0.473684 & 0.464912 & 1.0 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "97",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "98",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "sex_summary = @chain train begin\n",
                "    DF.select(DF.names(train, Number)...)\n",
                "    DF.groupby(:Sex)\n",
                "    DF.combine(DF.All() .=> Stats.mean)\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m2×7 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Sex   \u001b[0m\u001b[1m PassengerId_mean \u001b[0m\u001b[1m Pclass_mean \u001b[0m\u001b[1m Sex_mean \u001b[0m\u001b[1m SibSp_mean \u001b[0m\u001b[1m Parch_mean \u001b[0m\u001b[1m\u001b[0m ⋯\n     │\u001b[90m Int64 \u001b[0m\u001b[90m Float64          \u001b[0m\u001b[90m Float64     \u001b[0m\u001b[90m Float64  \u001b[0m\u001b[90m Float64    \u001b[0m\u001b[90m Float64    \u001b[0m\u001b[90m\u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │     0           431.029      2.15924       0.0    0.694268    0.649682  ⋯\n   2 │     1           454.147      2.38995       1.0    0.429809    0.235702\n\u001b[36m                                                                1 column omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>2×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Sex</th><th style = \"text-align: left;\">PassengerId_mean</th><th style = \"text-align: left;\">Pclass_mean</th><th style = \"text-align: left;\">Sex_mean</th><th style = \"text-align: left;\">SibSp_mean</th><th style = \"text-align: left;\">Parch_mean</th><th style = \"text-align: left;\">Survived_mean</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">0</td><td style = \"text-align: right;\">431.029</td><td style = \"text-align: right;\">2.15924</td><td style = \"text-align: right;\">0.0</td><td style = \"text-align: right;\">0.694268</td><td style = \"text-align: right;\">0.649682</td><td style = \"text-align: right;\">0.742038</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">454.147</td><td style = \"text-align: right;\">2.38995</td><td style = \"text-align: right;\">1.0</td><td style = \"text-align: right;\">0.429809</td><td style = \"text-align: right;\">0.235702</td><td style = \"text-align: right;\">0.188908</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccccccc}\n\t& Sex & PassengerId\\_mean & Pclass\\_mean & Sex\\_mean & SibSp\\_mean & Parch\\_mean & Survived\\_mean\\\\\n\t\\hline\n\t& Int64 & Float64 & Float64 & Float64 & Float64 & Float64 & Float64\\\\\n\t\\hline\n\t1 & 0 & 431.029 & 2.15924 & 0.0 & 0.694268 & 0.649682 & 0.742038 \\\\\n\t2 & 1 & 454.147 & 2.38995 & 1.0 & 0.429809 & 0.235702 & 0.188908 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "99",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "100",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "class_summary = @chain train begin\n",
                "    DF.select(DF.names(train, Number)...)\n",
                "    DF.groupby(:Pclass)\n",
                "    DF.combine(DF.All() .=> Stats.mean)\n",
                "end"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m3×7 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Pclass \u001b[0m\u001b[1m PassengerId_mean \u001b[0m\u001b[1m Pclass_mean \u001b[0m\u001b[1m Sex_mean \u001b[0m\u001b[1m SibSp_mean \u001b[0m\u001b[1m Parch_mean\u001b[0m ⋯\n     │\u001b[90m Int64  \u001b[0m\u001b[90m Float64          \u001b[0m\u001b[90m Float64     \u001b[0m\u001b[90m Float64  \u001b[0m\u001b[90m Float64    \u001b[0m\u001b[90m Float64   \u001b[0m ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │      1           461.597          1.0  0.564815    0.416667    0.356481 ⋯\n   2 │      2           445.957          2.0  0.586957    0.402174    0.380435\n   3 │      3           439.155          3.0  0.706721    0.615071    0.393075\n\u001b[36m                                                                1 column omitted\u001b[0m",
                        "text/html": "<div><div style = \"float: left;\"><span>3×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Pclass</th><th style = \"text-align: left;\">PassengerId_mean</th><th style = \"text-align: left;\">Pclass_mean</th><th style = \"text-align: left;\">Sex_mean</th><th style = \"text-align: left;\">SibSp_mean</th><th style = \"text-align: left;\">Parch_mean</th><th style = \"text-align: left;\">Survived_mean</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">461.597</td><td style = \"text-align: right;\">1.0</td><td style = \"text-align: right;\">0.564815</td><td style = \"text-align: right;\">0.416667</td><td style = \"text-align: right;\">0.356481</td><td style = \"text-align: right;\">0.62963</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">445.957</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">0.586957</td><td style = \"text-align: right;\">0.402174</td><td style = \"text-align: right;\">0.380435</td><td style = \"text-align: right;\">0.472826</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">439.155</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">0.706721</td><td style = \"text-align: right;\">0.615071</td><td style = \"text-align: right;\">0.393075</td><td style = \"text-align: right;\">0.242363</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|ccccccc}\n\t& Pclass & PassengerId\\_mean & Pclass\\_mean & Sex\\_mean & SibSp\\_mean & Parch\\_mean & Survived\\_mean\\\\\n\t\\hline\n\t& Int64 & Float64 & Float64 & Float64 & Float64 & Float64 & Float64\\\\\n\t\\hline\n\t1 & 1 & 461.597 & 1.0 & 0.564815 & 0.416667 & 0.356481 & 0.62963 \\\\\n\t2 & 2 & 445.957 & 2.0 & 0.586957 & 0.402174 & 0.380435 & 0.472826 \\\\\n\t3 & 3 & 439.155 & 3.0 & 0.706721 & 0.615071 & 0.393075 & 0.242363 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "101",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "I have gathered a small summary from the statistical overview above. Let's see what they are...\n",
                "\n",
                "- This train data set has 891 raw and 9 columns.\n",
                "- only 38% passenger survived during that tragedy.\n",
                "- ~74% female passenger survived, while only ~19% male passenger survived.\n",
                "- ~63% first class passengers survived, while only 24% lower class passenger survived.\n",
                "\n",
                "## 4a. Correlation Matrix and Heatmap\n",
                "\n",
                "<a id=\"heatmap\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "### Correlations"
            ]
        },
        {
            "id": "102",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "numeric_cols = DF.select(train, DF.names(train, Number)...)\n",
                "\n",
                "corr_matrix = Stats.cor(Stats.Matrix(numeric_cols[:, DF.Not(:Survived)]), numeric_cols.Survived)\n",
                "\n",
                "survived_corr = DF.DataFrame(\n",
                "    Variable = DF.names(numeric_cols[:, DF.Not(:Survived)]),\n",
                "    Correlation = abs.(corr_matrix[:, 1])\n",
                ")"
            ],
            "outputs": [
                {
                    "output_type": "execute_result",
                    "execution_count": 1,
                    "data": {
                        "text/plain": "\u001b[1m5×2 DataFrame\u001b[0m\n\u001b[1m Row \u001b[0m│\u001b[1m Variable    \u001b[0m\u001b[1m Correlation \u001b[0m\n     │\u001b[90m String      \u001b[0m\u001b[90m Float64     \u001b[0m\n─────┼──────────────────────────\n   1 │ PassengerId   0.00500666\n   2 │ Pclass        0.338481\n   3 │ Sex           0.543351\n   4 │ SibSp         0.0353225\n   5 │ Parch         0.0816294",
                        "text/html": "<div><div style = \"float: left;\"><span>5×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Variable</th><th style = \"text-align: left;\">Correlation</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">PassengerId</td><td style = \"text-align: right;\">0.00500666</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Pclass</td><td style = \"text-align: right;\">0.338481</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Sex</td><td style = \"text-align: right;\">0.543351</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">SibSp</td><td style = \"text-align: right;\">0.0353225</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Parch</td><td style = \"text-align: right;\">0.0816294</td></tr></tbody></table></div>",
                        "text/latex": "\\begin{tabular}{r|cc}\n\t& Variable & Correlation\\\\\n\t\\hline\n\t& String & Float64\\\\\n\t\\hline\n\t1 & PassengerId & 0.00500666 \\\\\n\t2 & Pclass & 0.338481 \\\\\n\t3 & Sex & 0.543351 \\\\\n\t4 & SibSp & 0.0353225 \\\\\n\t5 & Parch & 0.0816294 \\\\\n\\end{tabular}\n"
                    },
                    "metadata": {
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "id": "103",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "\n",
                "** Sex is the most important correlated feature with _Survived(dependent variable)_ feature followed by Pclass.**"
            ]
        },
        {
            "id": "104",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 3e9fdd2e-f081-48ad-9c0f-afa475b15dfe\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: c3212c222341c250aacee47c43b1a023b9b65857\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.408424Z', iopub.status.busy: '2021-06-26T16:35:15.407893Z', iopub.status.idle: '2021-06-26T16:35:15.421826Z', shell.execute_reply: '2021-06-26T16:35:15.42092Z', shell.execute_reply.started: '2021-06-26T16:35:15.408231Z'}\n",
                "## get the most important variables.\n",
                "corr = train.corr()**2\n",
                "corr.Survived.sort_values(ascending=False)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1142:20\\n## get the most important variables.\\ncorr = train.corr()**2\\n#                  └┘ ── use `x^y` instead of `x**y` for exponentiation, and `x...` instead of `**x` for splatting\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: 3e9fdd2e-f081-48ad-9c0f-afa475b15dfe\\n#| _kg_hide-input: true\\n#| _uuid: c3212c222341c250aacee47c43b1a023b9b65857\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.408424Z', iopub.status.busy: '2021-06-26T16:35:15.407893Z', iopub.status.idle: '2021-06-26T16:35:15.421826Z', shell.execute_reply: '2021-06-26T16:35:15.42092Z', shell.execute_reply.started: '2021-06-26T16:35:15.408231Z'}\\n## get the most important variables.\\ncorr = train.corr()**2\\ncorr.Survived.sort_values(ascending=False)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1137, [1, 53, 77, 128, 406, 443, 466, 509]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(462, 463, :error, \"use `x^y` instead of `x**y` for exponentiation, and `x...` instead of `**x` for splatting\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1142:20\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1142:20\u001b[0;0m\u001b]8;;\u001b\\",
                        "## get the most important variables.",
                        "corr = train.corr()\u001b[48;2;120;70;70m**\u001b[0;0m2",
                        "\u001b[90m#                  └┘ ── \u001b[0;0m\u001b[91muse `x^y` instead of `x**y` for exponentiation, and `x...` instead of `**x` for splatting\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1142\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "105",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "**Squaring the correlation feature not only gives on positive correlations but also amplifies the relationships.**"
            ]
        },
        {
            "id": "106",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "import numpy as np\n",
                "mask = np.zeros_like(train.corr(), dtype=np.bool)\n",
                "mask[np.triu_indices_from(mask)] = True\n",
                "sns.set_style('whitegrid')\n",
                "plt.subplots(figsize = (15,12))\n",
                "sns.heatmap(train.corr(),\n",
                "            annot=True,\n",
                "            mask = mask,\n",
                "            cmap = 'RdBu', ## in order to reverse the bar replace \"RdBu\" with \"RdBu_r\"\n",
                "            linewidths=.9,\n",
                "            linecolor='white',\n",
                "            fmt='.2g',\n",
                "            center = 0,\n",
                "            square=True)\n",
                "plt.title(\"Correlations Among Features\", y = 1.03,fontsize = 20, pad = 40);"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "ArgumentError",
                    "evalue": "",
                    "traceback": [
                        "ArgumentError: Package numpy not found in current path.",
                        "- Run `import Pkg; Pkg.add(\"numpy\")` to install the numpy package.",
                        "Stacktrace:",
                        "  [1] \u001b[0m\u001b[1mmacro expansion\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mloading.jl:2296\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [2] \u001b[0m\u001b[1mmacro expansion\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mlock.jl:273\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [3] \u001b[0m\u001b[1m__require\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90minto\u001b[39m::\u001b[0mModule, \u001b[90mmod\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mloading.jl:2271\u001b[24m\u001b[39m",
                        "  [4] \u001b[0m\u001b[1m#invoke_in_world#3\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4messentials.jl:1089\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [5] \u001b[0m\u001b[1minvoke_in_world\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4messentials.jl:1086\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [6] \u001b[0m\u001b[1mrequire\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90minto\u001b[39m::\u001b[0mModule, \u001b[90mmod\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mloading.jl:2260\u001b[24m\u001b[39m",
                        "  [7] \u001b[0m\u001b[1meval\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mboot.jl:430\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [8] \u001b[0m\u001b[1m(::QuartoNotebookWorker.var\"#15#16\"{Module, Expr})\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:222\u001b[24m\u001b[39m",
                        "  [9] \u001b[0m\u001b[1m(::QuartoNotebookWorker.Packages.IOCapture.var\"#5#9\"{DataType, QuartoNotebookWorker.var\"#15#16\"{Module, Expr}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}})\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker.Packages.IOCapture\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\vendor\\IOCapture\\src\\\u001b[39m\u001b[90m\u001b[4mIOCapture.jl:170\u001b[24m\u001b[39m",
                        " [10] \u001b[0m\u001b[1mwith_logstate\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mQuartoNotebookWorker.Packages.IOCapture.var\"#5#9\"\u001b[90m{DataType, QuartoNotebookWorker.var\"#15#16\"{Module, Expr}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}}\u001b[39m, \u001b[90mlogstate\u001b[39m::\u001b[0mBase.CoreLogging.LogState\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mBase.CoreLogging\u001b[39m \u001b[90m.\\logging\\\u001b[39m\u001b[90m\u001b[4mlogging.jl:522\u001b[24m\u001b[39m",
                        " [11] \u001b[0m\u001b[1mwith_logger\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mFunction, \u001b[90mlogger\u001b[39m::\u001b[0mBase.CoreLogging.ConsoleLogger\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mBase.CoreLogging\u001b[39m \u001b[90m.\\logging\\\u001b[39m\u001b[90m\u001b[4mlogging.jl:632\u001b[24m\u001b[39m",
                        " [12] \u001b[0m\u001b[1mcapture\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mQuartoNotebookWorker.var\"#15#16\"\u001b[90m{Module, Expr}\u001b[39m; \u001b[90mrethrow\u001b[39m::\u001b[0mType, \u001b[90mcolor\u001b[39m::\u001b[0mBool, \u001b[90mpassthrough\u001b[39m::\u001b[0mBool, \u001b[90mcapture_buffer\u001b[39m::\u001b[0mIOBuffer, \u001b[90mio_context\u001b[39m::\u001b[0mVector\u001b[90m{Pair{Symbol, Any}}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker.Packages.IOCapture\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\vendor\\IOCapture\\src\\\u001b[39m\u001b[90m\u001b[4mIOCapture.jl:167\u001b[24m\u001b[39m",
                        " [13] \u001b[0m\u001b[1mcapture\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:248\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [14] \u001b[0m\u001b[1mio_capture\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mFunction; \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{String, Any}\u001b[39m, \u001b[90mkws\u001b[39m::\u001b[0m@Kwargs\u001b[90m{rethrow::DataType, color::Bool, io_context::Vector{Pair{Symbol, Any}}}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:250\u001b[24m\u001b[39m",
                        " [15] \u001b[0m\u001b[1mio_capture\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:246\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [16] \u001b[0m\u001b[1minclude_str\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mmod\u001b[39m::\u001b[0mModule, \u001b[90mcode\u001b[39m::\u001b[0mString; \u001b[90mfile\u001b[39m::\u001b[0mString, \u001b[90mline\u001b[39m::\u001b[0mInt64, \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{String, Any}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:201\u001b[24m\u001b[39m",
                        " [17] \u001b[0m\u001b[1m#invokelatest#2\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4messentials.jl:1057\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [18] \u001b[0m\u001b[1minvokelatest\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4messentials.jl:1052\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [19] \u001b[0m\u001b[1m#6\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:18\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [20] \u001b[0m\u001b[1mwith_inline_display\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mQuartoNotebookWorker.var\"#6#7\"\u001b[90m{String, String, Int64, Dict{String, Any}}\u001b[39m, \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{String, Any}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mInlineDisplay.jl:31\u001b[24m\u001b[39m",
                        " [21] \u001b[0m\u001b[1m_render_thunk\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mthunk\u001b[39m::\u001b[0mFunction, \u001b[90mcode\u001b[39m::\u001b[0mString, \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{String, Any}\u001b[39m, \u001b[90mis_expansion_ref\u001b[39m::\u001b[0mBase.RefValue\u001b[90m{Bool}\u001b[39m; \u001b[90minline\u001b[39m::\u001b[0mBool\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:43\u001b[24m\u001b[39m",
                        " [22] \u001b[0m\u001b[1m_render_thunk\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:35\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [23] \u001b[0m\u001b[1m#render#5\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:15\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [24] \u001b[0m\u001b[1mrender\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mcode\u001b[39m::\u001b[0mString, \u001b[90mfile\u001b[39m::\u001b[0mString, \u001b[90mline\u001b[39m::\u001b[0mInt64, \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{String, Any}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:1\u001b[24m\u001b[39m",
                        " [25] \u001b[0m\u001b[1mrender\u001b[22m\u001b[0m\u001b[1m(\u001b[22m::\u001b[0mString, ::\u001b[0mVararg\u001b[90m{Any}\u001b[39m; \u001b[90mkwargs\u001b[39m::\u001b[0m@Kwargs\u001b[90m{}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[36mMain\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\\u001b[39m\u001b[90m\u001b[4mstartup.jl:145\u001b[24m\u001b[39m",
                        " [26] top-level scope",
                        "\u001b[90m    @\u001b[39m \u001b[90m\u001b[4mnone:1\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "107",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "#### Positive Correlation Features:\n",
                "\n",
                "- Fare and Survived: 0.26\n",
                "\n",
                "#### Negative Correlation Features:\n",
                "\n",
                "- Fare and Pclass: -0.6\n",
                "- Sex and Survived: -0.55\n",
                "- Pclass and Survived: -0.33\n",
                "\n",
                "**So, Let's analyze these correlations a bit.** We have found some moderately strong relationships between different features. There is a definite positive correlation between Fare and Survived rated. This relationship reveals that the passenger who paid more money for their ticket were more likely to survive. This theory aligns with one other correlation which is the correlation between Fare and Pclass(-0.6). This relationship can be explained by saying that first class passenger(1) paid more for fare then second class passenger(2), similarly second class passenger paid more than the third class passenger(3). This theory can also be supported by mentioning another Pclass correlation with our dependent variable, Survived. The correlation between Pclass and Survived is -0.33. This can also be explained by saying that first class passenger had a better chance of surviving than the second or the third and so on.\n",
                "\n",
                "However, the most significant correlation with our dependent variable is the Sex variable, which is the info on whether the passenger was male or female. This negative correlation with a magnitude of -0.54 which points towards some undeniable insights. Let's do some statistics to see how statistically significant this correlation is.\n",
                "\n",
                "## 4b. Statistical Test for Correlation\n",
                "\n",
                "<a id=\"statistical_test\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "Statistical tests are the scientific way to prove the validation of theories. In any case, when we look at the data, we seem to have an intuitive understanding of where data is leading us. However, when we do statistical tests, we get a scientific or mathematical perspective of how significant these results are. Let's apply some of these methods and see how we are doing with our predictions.\n",
                "\n",
                "### Hypothesis Testing Outline\n",
                "\n",
                "A hypothesis test compares the mean of a control group and experimental group and tries to find out whether the two sample means are different from each other and if they are different, how significant that difference is.\n",
                "\n",
                "A **hypothesis test** usually consists of multiple parts:\n",
                "\n",
                "1. Formulate a well-developed research problem or question: The hypothesis test usually starts with a concrete and well-developed researched problem. We need to ask the right question that can be answered using statistical analysis.\n",
                "2. **The null hypothesis($H_0$) and Alternating hypothesis($H_1$)**:\n",
                "   > - The **null hypothesis($H_0$)** is something that is assumed to be true. It is the status quo. In a null hypothesis, the observations are the result of pure chance. When we set out to experiment, we form the null hypothesis by saying that there is no difference between the means of the control group and the experimental group.\n",
                "   > - An **Alternative hypothesis($H_A$)** is a claim and the opposite of the null hypothesis. It is going against the status quo. In an alternative theory, the observations show a real effect combined with a component of chance variation.\n",
                "3. Determine the **test statistic**: test statistic can be used to assess the truth of the null hypothesis. Depending on the standard deviation we either use t-statistics or z-statistics. In addition to that, we want to identify whether the test is a one-tailed test or two-tailed test. [This](https://support.minitab.com/en-us/minitab/18/help-and-how-to/statistics/basic-statistics/supporting-topics/basics/null-and-alternative-hypotheses/) article explains it pretty well. [This](https://stattrek.com/hypothesis-test/hypothesis-testing.aspx) article is pretty good as well.\n",
                "\n",
                "4. Specify a **Significance level** and **Confidence Interval**: The significance level($\\alpha$) is the probability of rejecting a null hypothesis when it is true. In other words, we are **_comfortable/confident_** with rejecting the null hypothesis a significant amount of times even though it is true. This considerable amount is our Significant level. In addition to that, Significance level is one minus our Confidence interval. For example, if we say, our significance level is 5%, then our confidence interval would be (1 - 0.05) = 0.95 or 95%.\n",
                "\n",
                "5. Compute the **T-Statistics/Z-Statistics**: Computing the t-statistics follows a simple equation. This equation slightly differs depending on one sample test or two sample test\n",
                "\n",
                "6. Compute the **P-value**: P-value is the probability that a test statistic at least as significant as the one observed would be obtained assuming that the null hypothesis is correct. The p-value is known to be unintuitive, and even many professors are known to explain it wrong. I think this [video](https://www.youtube.com/watch?v=E4KCfcVwzyw) explains the p-value well. **The smaller the P-value, the stronger the evidence against the null hypothesis.**\n",
                "\n",
                "7. **Describe the result and compare the p-value with the significance value($\\alpha$)**: If p<=$\\alpha$, then the observed effect is statistically significant, the null hypothesis is ruled out, and the alternative hypothesis is valid. However if the p> $\\alpha$, we say that, we fail to reject the null hypothesis. Even though this sentence is grammatically wrong, it is logically right. We never accept the null hypothesis just because we are doing the statistical test with sample data points.\n",
                "\n",
                "We will follow each of these steps above to do your hypothesis testing below.\n",
                "\n",
                "P.S. Khan Academy has a set of videos that I think are intuative and helped me understand conceptually.\n",
                "\n",
                "---\n",
                "\n",
                "### Hypothesis testing for Titanic\n",
                "\n",
                "#### Formulating a well developed researched question:\n",
                "\n",
                "Regarding this dataset, we can formulate the null hypothesis and alternative hypothesis by asking the following questions.\n",
                "\n",
                "> - **Is there a significant difference in the mean sex between the passenger who survived and passenger who did not survive?**.\n",
                "> - **Is there a substantial difference in the survival rate between the male and female passengers?**\n",
                "\n",
                "#### The Null Hypothesis and The Alternative Hypothesis:\n",
                "\n",
                "We can formulate our hypothesis by asking questions differently. However, it is essential to understand what our end goal is. Here our dependent variable or target variable is **Survived**. Therefore, we say\n",
                "\n",
                "> ** Null Hypothesis($H_0$):** There is no difference in the survival rate between the male and female passengers. or the mean difference between male and female passenger in the survival rate is zero.  \n",
                ">  ** Alternative Hypothesis($H_A$):** There is a difference in the survival rate between the male and female passengers. or the mean difference in the survival rate between male and female is not zero.\n",
                "\n",
                "Onc thing we can do is try to set up the Null and Alternative Hypothesis in such way that, when we do our t-test, we can choose to do one tailed test. According to [this](https://support.minitab.com/en-us/minitab/18/help-and-how-to/statistics/basic-statistics/supporting-topics/basics/null-and-alternative-hypotheses/) article, one-tailed tests are more powerful than two-tailed test. In addition to that, [this](https://www.youtube.com/watch?v=5NcMFlrnYp8&list=PLIeGtxpvyG-LrjxQ60pxZaimkaKKs0zGF) video is also quite helpful understanding these topics. with this in mind we can update/modify our null and alternative hypothesis. Let's see how we can rewrite this..\n",
                "\n",
                "> **Null Hypothesis(H0):** male mean is greater or equal to female mean.\n",
                "\n",
                "> **Alternative Hypothesis(H1):** male mean is less than female mean.\n",
                "\n",
                "#### Determine the test statistics:\n",
                "\n",
                "> This will be a two-tailed test since the difference between male and female passenger in the survival rate could be higher or lower than 0.\n",
                "> Since we do not know the standard deviation($\\sigma$) and n is small, we will use the t-distribution.\n",
                "\n",
                "#### Specify the significance level:\n",
                "\n",
                "> Specifying a significance level is an important step of the hypothesis test. It is an ultimate balance between type 1 error and type 2 error. We will discuss more in-depth about those in another lesson. For now, we have decided to make our significance level($\\alpha$) = 0.05. So, our confidence interval or non-rejection region would be (1 - $\\alpha$)=(1-0.05) = 95%.\n",
                "\n",
                "#### Computing T-statistics and P-value:\n",
                "\n",
                "Let's take a random sample and see the difference."
            ]
        },
        {
            "id": "108",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: abd034cffc591bf1ef2b4a8ed3e5a65eb133d61e\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.771771Z', iopub.status.busy: '2021-06-26T16:35:15.771345Z', iopub.status.idle: '2021-06-26T16:35:15.783362Z', shell.execute_reply: '2021-06-26T16:35:15.782301Z', shell.execute_reply.started: '2021-06-26T16:35:15.771603Z'}\n",
                "male_mean = train[train['Sex'] == 1].Survived.mean()\n",
                "\n",
                "female_mean = train[train['Sex'] == 0].Survived.mean()\n",
                "print (\"Male survival mean: \" + str(male_mean))\n",
                "print (\"female survival mean: \" + str(female_mean))\n",
                "\n",
                "print (\"The mean difference between male and female survival rate: \" + str(female_mean - male_mean))"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1253:26\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.771771Z', iopub.status.busy: '2021-06-26T16:35:15.771345Z', iopub.status.idle: '2021-06-26T16:35:15.783362Z', shell.execute_reply: '2021-06-26T16:35:15.782301Z', shell.execute_reply.started: '2021-06-26T16:35:15.771603Z'}\\nmale_mean = train[train['Sex'] == 1].Survived.mean()\\n#                        └─┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _kg_hide-input: true\\n#| _uuid: abd034cffc591bf1ef2b4a8ed3e5a65eb133d61e\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.771771Z', iopub.status.busy: '2021-06-26T16:35:15.771345Z', iopub.status.idle: '2021-06-26T16:35:15.783362Z', shell.execute_reply: '2021-06-26T16:35:15.782301Z', shell.execute_reply.started: '2021-06-26T16:35:15.771603Z'}\\nmale_mean = train[train['Sex'] == 1].Survived.mean()\\n\\nfemale_mean = train[train['Sex'] == 0].Survived.mean()\\nprint (\\\"Male survival mean: \\\" + str(male_mean))\\nprint (\\\"female survival mean: \\\" + str(female_mean))\\n\\nprint (\\\"The mean difference between male and female survival rate: \\\" + str(female_mean - male_mean))\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1250, [1, 25, 76, 355, 408, 409, 464, 512, 564, 565, 666]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(380, 382, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(436, 438, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(469, 469, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(517, 517, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(570, 570, :error, \"whitespace is not allowed here\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1253:26\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1253:26\u001b[0;0m\u001b]8;;\u001b\\",
                        "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.771771Z', iopub.status.busy: '2021-06-26T16:35:15.771345Z', iopub.status.idle: '2021-06-26T16:35:15.783362Z', shell.execute_reply: '2021-06-26T16:35:15.782301Z', shell.execute_reply.started: '2021-06-26T16:35:15.771603Z'}",
                        "male_mean = train[train['\u001b[48;2;120;70;70mSex\u001b[0;0m'] == 1].Survived.mean()",
                        "\u001b[90m#                        └─┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1253\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "109",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Now, we have to understand that those two means are not **the population mean ($\\bar{\\mu}$)**. _The population mean is a statistical term statistician uses to indicate the actual average of the entire group. The group can be any gathering of multiple numbers such as animal, human, plants, money, stocks._ For example, To find the age population mean of Bulgaria; we will have to account for every single person's age and take their age. Which is almost impossible and if we were to go that route; there is no point of doing statistics in the first place. Therefore we approach this problem using sample sets. The idea of using sample set is that; if we take multiple samples of the same population and take the mean of them and put them in a distribution; eventually the distribution start to look more like a **normal distribution**. The more samples we take and the more sample means will be added and, the closer the normal distribution will reach towards population mean. This is where **Central limit theory** comes from. We will go more in depth of this topic later on.\n",
                "\n",
                "Going back to our dataset, like we are saying these means above are part of the whole story. We were given part of the data to train our machine learning models, and the other part of the data was held back for testing. Therefore, It is impossible for us at this point to know the population means of survival for male and females. Situation like this calls for a statistical approach. We will use the sampling distribution approach to do the test. let's take 50 random sample of male and female from our train data."
            ]
        },
        {
            "id": "110",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.785359Z', iopub.status.busy: '2021-06-26T16:35:15.784861Z', iopub.status.idle: '2021-06-26T16:35:15.815921Z', shell.execute_reply: '2021-06-26T16:35:15.815302Z', shell.execute_reply.started: '2021-06-26T16:35:15.785103Z'}\n",
                "# separating male and female dataframe.\n",
                "import random\n",
                "male = train[train['Sex'] == 1]\n",
                "female = train[train['Sex'] == 0]\n",
                "\n",
                "## empty list for storing mean sample\n",
                "m_mean_samples = []\n",
                "f_mean_samples = []\n",
                "\n",
                "for i in range(50):\n",
                "    m_mean_samples.append(np.mean(random.sample(list(male['Survived']),50,)))\n",
                "    f_mean_samples.append(np.mean(random.sample(list(female['Survived']),50,)))\n",
                "\n",
                "\n",
                "# Print them out\n",
                "print (f\"Male mean sample mean: {round(np.mean(m_mean_samples),2)}\")\n",
                "print (f\"Male mean sample mean: {round(np.mean(f_mean_samples),2)}\")\n",
                "print (f\"Difference between male and female mean sample mean: {round(np.mean(f_mean_samples) - np.mean(m_mean_samples),2)}\")"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "ArgumentError",
                    "evalue": "ArgumentError(\"Package random not found in current path.\\n- Run `import Pkg; Pkg.add(\\\"random\\\")` to install the random package.\")",
                    "traceback": [
                        "ArgumentError: Package random not found in current path.",
                        "- Run `import Pkg; Pkg.add(\"random\")` to install the random package.",
                        "Stacktrace:",
                        "  [1] \u001b[0m\u001b[1mmacro expansion\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mloading.jl:2296\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [2] \u001b[0m\u001b[1mmacro expansion\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mlock.jl:273\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [3] \u001b[0m\u001b[1m__require\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90minto\u001b[39m::\u001b[0mModule, \u001b[90mmod\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mloading.jl:2271\u001b[24m\u001b[39m",
                        "  [4] \u001b[0m\u001b[1m#invoke_in_world#3\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4messentials.jl:1089\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [5] \u001b[0m\u001b[1minvoke_in_world\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4messentials.jl:1086\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [6] \u001b[0m\u001b[1mrequire\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90minto\u001b[39m::\u001b[0mModule, \u001b[90mmod\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mloading.jl:2260\u001b[24m\u001b[39m",
                        "  [7] \u001b[0m\u001b[1meval\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mboot.jl:430\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        "  [8] \u001b[0m\u001b[1m(::QuartoNotebookWorker.var\"#15#16\"{Module, Expr})\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:222\u001b[24m\u001b[39m",
                        "  [9] \u001b[0m\u001b[1m(::QuartoNotebookWorker.Packages.IOCapture.var\"#5#9\"{DataType, QuartoNotebookWorker.var\"#15#16\"{Module, Expr}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}})\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker.Packages.IOCapture\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\vendor\\IOCapture\\src\\\u001b[39m\u001b[90m\u001b[4mIOCapture.jl:170\u001b[24m\u001b[39m",
                        " [10] \u001b[0m\u001b[1mwith_logstate\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mQuartoNotebookWorker.Packages.IOCapture.var\"#5#9\"\u001b[90m{DataType, QuartoNotebookWorker.var\"#15#16\"{Module, Expr}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}, IOContext{Base.PipeEndpoint}}\u001b[39m, \u001b[90mlogstate\u001b[39m::\u001b[0mBase.CoreLogging.LogState\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mBase.CoreLogging\u001b[39m \u001b[90m.\\logging\\\u001b[39m\u001b[90m\u001b[4mlogging.jl:522\u001b[24m\u001b[39m",
                        " [11] \u001b[0m\u001b[1mwith_logger\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mFunction, \u001b[90mlogger\u001b[39m::\u001b[0mBase.CoreLogging.ConsoleLogger\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mBase.CoreLogging\u001b[39m \u001b[90m.\\logging\\\u001b[39m\u001b[90m\u001b[4mlogging.jl:632\u001b[24m\u001b[39m",
                        " [12] \u001b[0m\u001b[1mcapture\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mQuartoNotebookWorker.var\"#15#16\"\u001b[90m{Module, Expr}\u001b[39m; \u001b[90mrethrow\u001b[39m::\u001b[0mType, \u001b[90mcolor\u001b[39m::\u001b[0mBool, \u001b[90mpassthrough\u001b[39m::\u001b[0mBool, \u001b[90mcapture_buffer\u001b[39m::\u001b[0mIOBuffer, \u001b[90mio_context\u001b[39m::\u001b[0mVector\u001b[90m{Pair{Symbol, Any}}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker.Packages.IOCapture\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\vendor\\IOCapture\\src\\\u001b[39m\u001b[90m\u001b[4mIOCapture.jl:167\u001b[24m\u001b[39m",
                        " [13] \u001b[0m\u001b[1mcapture\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:248\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [14] \u001b[0m\u001b[1mio_capture\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mFunction; \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{Any, Any}\u001b[39m, \u001b[90mkws\u001b[39m::\u001b[0m@Kwargs\u001b[90m{rethrow::DataType, color::Bool, io_context::Vector{Pair{Symbol, Any}}}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:250\u001b[24m\u001b[39m",
                        " [15] \u001b[0m\u001b[1mio_capture\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:246\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [16] \u001b[0m\u001b[1minclude_str\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mmod\u001b[39m::\u001b[0mModule, \u001b[90mcode\u001b[39m::\u001b[0mString; \u001b[90mfile\u001b[39m::\u001b[0mString, \u001b[90mline\u001b[39m::\u001b[0mInt64, \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{Any, Any}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:201\u001b[24m\u001b[39m",
                        " [17] \u001b[0m\u001b[1m#invokelatest#2\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4messentials.jl:1057\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [18] \u001b[0m\u001b[1minvokelatest\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4messentials.jl:1052\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [19] \u001b[0m\u001b[1m#6\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:18\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [20] \u001b[0m\u001b[1mwith_inline_display\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mf\u001b[39m::\u001b[0mQuartoNotebookWorker.var\"#6#7\"\u001b[90m{String, String, Int64, Dict{Any, Any}}\u001b[39m, \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{Any, Any}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mInlineDisplay.jl:31\u001b[24m\u001b[39m",
                        " [21] \u001b[0m\u001b[1m_render_thunk\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mthunk\u001b[39m::\u001b[0mFunction, \u001b[90mcode\u001b[39m::\u001b[0mString, \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{Any, Any}\u001b[39m, \u001b[90mis_expansion_ref\u001b[39m::\u001b[0mBase.RefValue\u001b[90m{Bool}\u001b[39m; \u001b[90minline\u001b[39m::\u001b[0mBool\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:43\u001b[24m\u001b[39m",
                        " [22] \u001b[0m\u001b[1m_render_thunk\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:35\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [23] \u001b[0m\u001b[1m#render#5\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:15\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [24] \u001b[0m\u001b[1mrender\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mcode\u001b[39m::\u001b[0mString, \u001b[90mfile\u001b[39m::\u001b[0mString, \u001b[90mline\u001b[39m::\u001b[0mInt64, \u001b[90mcell_options\u001b[39m::\u001b[0mDict\u001b[90m{Any, Any}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[35mQuartoNotebookWorker\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\QuartoNotebookWorker\\src\\\u001b[39m\u001b[90m\u001b[4mrender.jl:1\u001b[24m\u001b[39m",
                        " [25] \u001b[0m\u001b[1mrender\u001b[22m\u001b[0m\u001b[1m(\u001b[22m::\u001b[0mString, ::\u001b[0mVararg\u001b[90m{Any}\u001b[39m; \u001b[90mkwargs\u001b[39m::\u001b[0m@Kwargs\u001b[90m{}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m    @\u001b[39m \u001b[36mMain\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\QuartoNotebookRunner\\fVEXT\\src\\\u001b[39m\u001b[90m\u001b[4mstartup.jl:145\u001b[24m\u001b[39m",
                        " [26] top-level scope",
                        "\u001b[90m    @\u001b[39m \u001b[90m\u001b[4mnone:1\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "111",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "H0: male mean is greater or equal to female mean<br>\n",
                "H1: male mean is less than female mean.\n",
                "\n",
                "According to the samples our male samples ($\\bar{x}_m$) and female samples($\\bar{x}_f$) mean measured difference is ~ 0.55(statistically this is called the point estimate of the male population mean and female population mean). keeping in mind that...\n",
                "\n",
                "- We randomly select 50 people to be in the male group and 50 people to be in the female group.\n",
                "- We know our sample is selected from a broader population(trainning set).\n",
                "- We know we could have totally ended up with a different random sample of males and females.\n",
                "\n",
                "---\n",
                "\n",
                "With all three points above in mind, how confident are we that, the measured difference is real or statistically significant? we can perform a **t-test** to evaluate that. When we perform a **t-test** we are usually trying to find out **an evidence of significant difference between population mean with hypothesized mean(1 sample t-test) or in our case difference between two population means(2 sample t-test).**\n",
                "\n",
                "The **t-statistics** is the measure of a degree to which our groups differ standardized by the variance of our measurements. In order words, it is basically the measure of signal over noise. Let us describe the previous sentence a bit more for clarification. I am going to use [this post](http://blog.minitab.com/blog/statistics-and-quality-data-analysis/what-is-a-t-test-and-why-is-it-like-telling-a-kid-to-clean-up-that-mess-in-the-kitchen) as reference to describe the t-statistics here.\n",
                "\n",
                "#### Calculating the t-statistics\n",
                "\n",
                "# $$t = \\frac{\\bar{x}-\\mu}{\\frac{S} {\\sqrt{n}} }$$\n",
                "\n",
                "Here..\n",
                "\n",
                "- $\\bar{x}$ is the sample mean.\n",
                "- $\\mu$ is the hypothesized mean.\n",
                "- S is the standard deviation.\n",
                "- n is the sample size.\n",
                "\n",
                "1. Now, the denominator of this fraction $(\\bar{x}-\\mu)$ is basically the strength of the signal. where we calculate the difference between hypothesized mean and sample mean. If the mean difference is higher, then the signal is stronger.\n",
                "\n",
                "the numerator of this fraction ** ${S}/ {\\sqrt{n}}$ ** calculates the amount of variation or noise of the data set. Here S is standard deviation, which tells us how much variation is there in the data. n is the sample size.\n",
                "\n",
                "So, according to the explanation above, the t-value or t-statistics is basically measures the strength of the signal(the difference) to the amount of noise(the variation) in the data and that is how we calculate the t-value in one sample t-test. However, in order to calculate between two sample population mean or in our case we will use the follow equation.\n",
                "\n",
                "# $$t = \\frac{\\bar{x}_M - \\bar{x}_F}{\\sqrt {s^2 (\\frac{1}{n_M} + \\frac{1}{n_F})}}$$\n",
                "\n",
                "This equation may seem too complex, however, the idea behind these two are similar. Both of them have the concept of signal/noise. The only difference is that we replace our hypothesis mean with another sample mean and the two sample sizes repalce one sample size.\n",
                "\n",
                "Here..\n",
                "\n",
                "- $\\bar{x}_M$ is the mean of our male group sample measurements.\n",
                "- $ \\bar{x}\\_F$ is the mean of female group samples.\n",
                "- $ n_M$ and $n_F$ are the sample number of observations in each group.\n",
                "- $ S^2$ is the sample variance.\n",
                "\n",
                "It is good to have an understanding of what going on in the background. However, we will use **scipy.stats** to find the t-statistics.\n",
                "\n",
                "#### Compare P-value with $\\alpha$\n",
                "\n",
                "> It looks like the p-value is very small compared to our significance level($\\alpha$)of 0.05. Our observation sample is statistically significant. Therefore, our null hypothesis is ruled out, and our alternative hypothesis is valid, which is \"**There is a significant difference in the survival rate between the male and female passengers.\"**\n",
                "\n",
                "# Part 5: Feature Engineering\n",
                "\n",
                "<a id=\"feature_engineering\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "Feature Engineering is exactly what its sounds like. Sometimes we want to create extra features from with in the features that we have, sometimes we want to remove features that are alike. Features engineering is the simple word for doing all those. It is important to remember that we will create new features in such ways that will not cause **multicollinearity(when there is a relationship among independent variables)** to occur.\n",
                "\n",
                "## name_length\n",
                "\n",
                "**_Creating a new feature \"name_length\" that will take the count of letters of each name_**"
            ]
        },
        {
            "id": "112",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: d30d71c1-55bc-41c8-8536-9909d9f02538\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: cb17c6f59bb2123cbf2cbc9c282b4d70ee283a86\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.817993Z', iopub.status.busy: '2021-06-26T16:35:15.817477Z', iopub.status.idle: '2021-06-26T16:35:15.832377Z', shell.execute_reply: '2021-06-26T16:35:15.831471Z', shell.execute_reply.started: '2021-06-26T16:35:15.817745Z'}\n",
                "# Creating a new colomn with a\n",
                "train['name_length'] = [len(i) for i in train.Name]\n",
                "test['name_length'] = [len(i) for i in test.Name]\n",
                "\n",
                "def name_length_group(size):\n",
                "    a = ''\n",
                "    if (size <=20):\n",
                "        a = 'short'\n",
                "    elif (size <=35):\n",
                "        a = 'medium'\n",
                "    elif (size <=45):\n",
                "        a = 'good'\n",
                "    else:\n",
                "        a = 'long'\n",
                "    return a\n",
                "\n",
                "\n",
                "train['nLength_group'] = train['name_length'].map(name_length_group)\n",
                "test['nLength_group'] = test['name_length'].map(name_length_group)\n",
                "\n",
                "## Here \"map\" is python's built-in function.\n",
                "## \"map\" function basically takes a function and\n",
                "## returns an iterable list/tuple or in this case series.\n",
                "## However,\"map\" can also be used like map(function) e.g. map(name_length_group)\n",
                "## or map(function, iterable{list, tuple}) e.g. map(name_length_group, train[feature]]).\n",
                "## However, here we don't need to use parameter(\"size\") for name_length_group because when we\n",
                "## used the map function like \".map\" with a series before dot, we are basically hinting that series\n",
                "## and the iterable. This is similar to .append approach in python. list.append(a) meaning applying append on list.\n",
                "\n",
                "\n",
                "## cuts the column by given bins based on the range of name_length\n",
                "#group_names = ['short', 'medium', 'good', 'long']\n",
                "#train['name_len_group'] = pd.cut(train['name_length'], bins = 4, labels=group_names)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1355:8\\n# Creating a new colomn with a\\ntrain['name_length'] = [len(i) for i in train.Name]\\n#      └─────────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: d30d71c1-55bc-41c8-8536-9909d9f02538\\n#| _kg_hide-input: true\\n#| _uuid: cb17c6f59bb2123cbf2cbc9c282b4d70ee283a86\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.817993Z', iopub.status.busy: '2021-06-26T16:35:15.817477Z', iopub.status.idle: '2021-06-26T16:35:15.832377Z', shell.execute_reply: '2021-06-26T16:35:15.831471Z', shell.execute_reply.started: '2021-06-26T16:35:15.817745Z'}\\n# Creating a new colomn with a\\ntrain['name_length'] = [len(i) for i in train.Name]\\ntest['name_length'] = [len(i) for i in test.Name]\\n\\ndef name_length_group(size):\\n    a = ''\\n    if (size <=20):\\n        a = 'short'\\n    elif (size <=35):\\n        a = 'medium'\\n    elif (size <=45):\\n        a = 'good'\\n    else:\\n        a = 'long'\\n    return a\\n\\n\\ntrain['nLength_group'] = train['name_length'].map(name_length_group)\\ntest['nLength_group'] = test['name_length'].map(name_length_group)\\n\\n## Here \\\"map\\\" is python's built-in function.\\n## \\\"map\\\" function basically takes a function and\\n## returns an iterable list/tuple or in this case series.\\n## However,\\\"map\\\" can also be used like map(function) e.g. map(name_length_group)\\n## or map(function, iterable{list, tuple}) e.g. map(name_length_group, train[feature]]).\\n## However, here we don't need to use parameter(\\\"size\\\") for name_length_group because when we\\n## used the map function like \\\".map\\\" with a series before dot, we are basically hinting that series\\n## and the iterable. This is similar to .append approach in python. list.append(a) meaning applying append on list.\\n\\n\\n## cuts the column by given bins based on the range of name_length\\n#group_names = ['short', 'medium', 'good', 'long']\\n#train['name_len_group'] = pd.cut(train['name_length'], bins = 4, labels=group_names)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1350, [1, 53, 77, 128, 407, 438, 490, 540, 541, 570  …  1119, 1208, 1302, 1402, 1518, 1519, 1520, 1587, 1638, 1724]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(445, 455, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(496, 506, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(544, 568, :error, \"extra tokens after end of expression\"), Base.JuliaSyntax.Diagnostic(579, 578, :error, \"empty character literal\"), Base.JuliaSyntax.Diagnostic(600, 608, :error, \"line break after `:` in range expression\"), Base.JuliaSyntax.Diagnostic(614, 618, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(629, 629, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(642, 650, :error, \"line break after `:` in range expression\"), Base.JuliaSyntax.Diagnostic(656, 661, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(672, 672, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(685, 693, :error, \"line break after `:` in range expression\"), Base.JuliaSyntax.Diagnostic(699, 702, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(714, 722, :error, \"whitespace not allowed after `:` used for quoting\"), Base.JuliaSyntax.Diagnostic(728, 731, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(756, 768, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(781, 791, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(824, 836, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(848, 858, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1724, 1723, :error, \"Expected `end`\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1355:8\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1355:8\u001b[0;0m\u001b]8;;\u001b\\",
                        "# Creating a new colomn with a",
                        "train['\u001b[48;2;120;70;70mname_length\u001b[0;0m'] = [len(i) for i in train.Name]",
                        "\u001b[90m#      └─────────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1355\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "113",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## title\n",
                "\n",
                "**Getting the title of each name as a new feature. **"
            ]
        },
        {
            "id": "114",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: ded64d5f-43de-4a9e-b9c5-ec4d2869387a\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 9c23229f7d06a1303a04b4a81c927453686ffec9\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.833953Z', iopub.status.busy: '2021-06-26T16:35:15.833501Z', iopub.status.idle: '2021-06-26T16:35:15.842414Z', shell.execute_reply: '2021-06-26T16:35:15.841468Z', shell.execute_reply.started: '2021-06-26T16:35:15.83376Z'}\n",
                "## get the title from the name\n",
                "train[\"title\"] = [i.split('.')[0] for i in train.Name]\n",
                "train[\"title\"] = [i.split(',')[1] for i in train.title]\n",
                "## Whenever we split like that, there is a good change that we will end up with while space around our string values. Let's check that."
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "ErrorException",
                    "evalue": "ErrorException(\"type String has no field split\")",
                    "traceback": [
                        "type String has no field split",
                        "Stacktrace:",
                        " [1] \u001b[0m\u001b[1mgetproperty\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mBase.jl:49\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [2] \u001b[0m\u001b[1m(::var\"#27#28\")\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mi\u001b[39m::\u001b[0mString\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[35mMain.Notebook\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mnone:0\u001b[24m\u001b[39m",
                        " [3] \u001b[0m\u001b[1miterate\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mgenerator.jl:48\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [4] \u001b[0m\u001b[1mcollect\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mitr\u001b[39m::\u001b[0mBase.Generator\u001b[90m{Vector{String}, var\"#27#28\"}\u001b[39m\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4marray.jl:791\u001b[24m\u001b[39m",
                        " [5] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1399\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "115",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "116",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.84422Z', iopub.status.busy: '2021-06-26T16:35:15.843818Z', iopub.status.idle: '2021-06-26T16:35:15.853522Z', shell.execute_reply: '2021-06-26T16:35:15.852642Z', shell.execute_reply.started: '2021-06-26T16:35:15.84407Z'}\n",
                "print(train.title.unique())"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "ArgumentError",
                    "evalue": "ArgumentError(\"column name :title not found in the data frame\")",
                    "traceback": [
                        "ArgumentError: column name :title not found in the data frame",
                        "Stacktrace:",
                        " [1] \u001b[0m\u001b[1mlookupname\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\other\\\u001b[39m\u001b[90m\u001b[4mindex.jl:431\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [2] \u001b[0m\u001b[1mgetindex\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\other\\\u001b[39m\u001b[90m\u001b[4mindex.jl:440\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [3] \u001b[0m\u001b[1mgetindex\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mdf\u001b[39m::\u001b[0mDataFrames.DataFrame, ::\u001b[0mtypeof(!), \u001b[90mcol_ind\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[33mDataFrames\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\dataframe\\\u001b[39m\u001b[90m\u001b[4mdataframe.jl:557\u001b[24m\u001b[39m",
                        " [4] \u001b[0m\u001b[1mgetproperty\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mdf\u001b[39m::\u001b[0mDataFrames.DataFrame, \u001b[90mcol_ind\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[33mDataFrames\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\abstractdataframe\\\u001b[39m\u001b[90m\u001b[4mabstractdataframe.jl:448\u001b[24m\u001b[39m",
                        " [5] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1406\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "117",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "118",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.855322Z', iopub.status.busy: '2021-06-26T16:35:15.854858Z', iopub.status.idle: '2021-06-26T16:35:15.86306Z', shell.execute_reply: '2021-06-26T16:35:15.86222Z', shell.execute_reply.started: '2021-06-26T16:35:15.855101Z'}\n",
                "## Let's fix that\n",
                "train.title = train.title.apply(lambda x: x.strip())"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1412:40\\n## Let's fix that\\ntrain.title = train.title.apply(lambda x: x.strip())\\n#                                      └─────────┘ ── Expected `)`\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| execution: {iopub.execute_input: '2021-06-26T16:35:15.855322Z', iopub.status.busy: '2021-06-26T16:35:15.854858Z', iopub.status.idle: '2021-06-26T16:35:15.86306Z', shell.execute_reply: '2021-06-26T16:35:15.86222Z', shell.execute_reply.started: '2021-06-26T16:35:15.855101Z'}\\n## Let's fix that\\ntrain.title = train.title.apply(lambda x: x.strip())\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1410, [1, 278, 296, 349]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(335, 345, :error, \"Expected `)`\"), Base.JuliaSyntax.Diagnostic(347, 347, :error, \"extra tokens after end of expression\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1412:40\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1412:40\u001b[0;0m\u001b]8;;\u001b\\",
                        "## Let's fix that",
                        "train.title = train.title.apply(lambda \u001b[48;2;120;70;70mx: x.strip(\u001b[0;0m))",
                        "\u001b[90m#                                      └─────────┘ ── \u001b[0;0m\u001b[91mExpected `)`\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1412\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "119",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "120",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.864826Z', iopub.status.busy: '2021-06-26T16:35:15.864362Z', iopub.status.idle: '2021-06-26T16:35:15.872663Z', shell.execute_reply: '2021-06-26T16:35:15.871817Z', shell.execute_reply.started: '2021-06-26T16:35:15.864612Z'}\n",
                "## We can also combile all three lines above for test set here\n",
                "test['title'] = [i.split('.')[0].split(',')[1].strip() for i in test.Name]\n",
                "\n",
                "## However it is important to be able to write readable code, and the line above is not so readable."
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1418:7\\n## We can also combile all three lines above for test set here\\ntest['title'] = [i.split('.')[0].split(',')[1].strip() for i in test.Name]\\n#     └───┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| execution: {iopub.execute_input: '2021-06-26T16:35:15.864826Z', iopub.status.busy: '2021-06-26T16:35:15.864362Z', iopub.status.idle: '2021-06-26T16:35:15.872663Z', shell.execute_reply: '2021-06-26T16:35:15.871817Z', shell.execute_reply.started: '2021-06-26T16:35:15.864612Z'}\\n## We can also combile all three lines above for test set here\\ntest['title'] = [i.split('.')[0].split(',')[1].strip() for i in test.Name]\\n\\n## However it is important to be able to write readable code, and the line above is not so readable.\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1416, [1, 280, 343, 418, 419, 520]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(349, 353, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1418:7\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1418:7\u001b[0;0m\u001b]8;;\u001b\\",
                        "## We can also combile all three lines above for test set here",
                        "test['\u001b[48;2;120;70;70mtitle\u001b[0;0m'] = [i.split('.')[0].split(',')[1].strip() for i in test.Name]",
                        "\u001b[90m#     └───┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1418\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "121",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "122",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.874489Z', iopub.status.busy: '2021-06-26T16:35:15.873918Z', iopub.status.idle: '2021-06-26T16:35:15.896665Z', shell.execute_reply: '2021-06-26T16:35:15.895832Z', shell.execute_reply.started: '2021-06-26T16:35:15.874258Z'}\n",
                "## Let's replace some of the rare values with the keyword 'rare' and other word choice of our own.\n",
                "## train Data\n",
                "train[\"title\"] = [i.replace('Ms', 'Miss') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Mlle', 'Miss') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Mme', 'Mrs') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Dr', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Col', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Major', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Don', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Jonkheer', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Sir', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Lady', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Capt', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('the Countess', 'rare') for i in train.title]\n",
                "train[\"title\"] = [i.replace('Rev', 'rare') for i in train.title]\n",
                "\n",
                "\n",
                "## Now in programming there is a term called DRY(Don't repeat yourself), whenever we are repeating\n",
                "## same code over and over again, there should be a light-bulb turning on in our head and make us think\n",
                "## to code in a way that is not repeating or dull. Let's write a function to do exactly what we\n",
                "## did in the code above, only not repeating and more interesting."
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1427:30\\n## train Data\\ntrain[\\\"title\\\"] = [i.replace('Ms', 'Miss') for i in train.title]\\n#                            └┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| execution: {iopub.execute_input: '2021-06-26T16:35:15.874489Z', iopub.status.busy: '2021-06-26T16:35:15.873918Z', iopub.status.idle: '2021-06-26T16:35:15.896665Z', shell.execute_reply: '2021-06-26T16:35:15.895832Z', shell.execute_reply.started: '2021-06-26T16:35:15.874258Z'}\\n## Let's replace some of the rare values with the keyword 'rare' and other word choice of our own.\\n## train Data\\ntrain[\\\"title\\\"] = [i.replace('Ms', 'Miss') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Mlle', 'Miss') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Mme', 'Mrs') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Dr', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Col', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Major', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Don', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Jonkheer', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Sir', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Lady', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Capt', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('the Countess', 'rare') for i in train.title]\\ntrain[\\\"title\\\"] = [i.replace('Rev', 'rare') for i in train.title]\\n\\n\\n## Now in programming there is a term called DRY(Don't repeat yourself), whenever we are repeating\\n## same code over and over again, there should be a light-bulb turning on in our head and make us think\\n## to code in a way that is not repeating or dull. Let's write a function to do exactly what we\\n## did in the code above, only not repeating and more interesting.\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1424, [1, 280, 379, 393, 457, 523, 587, 651, 716, 783  …  1049, 1115, 1189, 1254, 1255, 1256, 1355, 1459, 1555, 1622]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(422, 423, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(428, 431, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(486, 489, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(494, 497, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(552, 554, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(559, 561, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(616, 617, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(622, 625, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(680, 682, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(687, 690, :error, \"character literal contains multiple characters\")  …  Base.JuliaSyntax.Diagnostic(947, 949, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(954, 957, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1012, 1015, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1020, 1023, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1078, 1081, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1086, 1089, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1144, 1155, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1160, 1163, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1218, 1220, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(1225, 1228, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1427:30\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1427:30\u001b[0;0m\u001b]8;;\u001b\\",
                        "## train Data",
                        "train[\"title\"] = [i.replace('\u001b[48;2;120;70;70mMs\u001b[0;0m', 'Miss') for i in train.title]",
                        "\u001b[90m#                            └┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1427\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "123",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "124",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.900031Z', iopub.status.busy: '2021-06-26T16:35:15.899771Z', iopub.status.idle: '2021-06-26T16:35:15.910036Z', shell.execute_reply: '2021-06-26T16:35:15.908929Z', shell.execute_reply.started: '2021-06-26T16:35:15.899989Z'}\n",
                "## we are writing a function that can help us modify title column\n",
                "def name_converted(feature):\n",
                "    \"\"\"\n",
                "    This function helps modifying the title column\n",
                "    \"\"\"\n",
                "\n",
                "    result = ''\n",
                "    if feature in ['the Countess','Capt','Lady','Sir','Jonkheer','Don','Major','Col', 'Rev', 'Dona', 'Dr']:\n",
                "        result = 'rare'\n",
                "    elif feature in ['Ms', 'Mlle']:\n",
                "        result = 'Miss'\n",
                "    elif feature == 'Mme':\n",
                "        result = 'Mrs'\n",
                "    else:\n",
                "        result = feature\n",
                "    return result\n",
                "\n",
                "test.title = test.title.map(name_converted)\n",
                "train.title = train.title.map(name_converted)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:def, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `def` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Hint: a global variable of this name may be made accessible by importing IntervalArithmetic in the current active module Main"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "125",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "126",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.912187Z', iopub.status.busy: '2021-06-26T16:35:15.911644Z', iopub.status.idle: '2021-06-26T16:35:15.923512Z', shell.execute_reply: '2021-06-26T16:35:15.922507Z', shell.execute_reply.started: '2021-06-26T16:35:15.912136Z'}\n",
                "print(train.title.unique())\n",
                "print(test.title.unique())"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "ArgumentError",
                    "evalue": "ArgumentError(\"column name :title not found in the data frame\")",
                    "traceback": [
                        "ArgumentError: column name :title not found in the data frame",
                        "Stacktrace:",
                        " [1] \u001b[0m\u001b[1mlookupname\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\other\\\u001b[39m\u001b[90m\u001b[4mindex.jl:431\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [2] \u001b[0m\u001b[1mgetindex\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\other\\\u001b[39m\u001b[90m\u001b[4mindex.jl:440\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [3] \u001b[0m\u001b[1mgetindex\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mdf\u001b[39m::\u001b[0mDataFrames.DataFrame, ::\u001b[0mtypeof(!), \u001b[90mcol_ind\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[33mDataFrames\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\dataframe\\\u001b[39m\u001b[90m\u001b[4mdataframe.jl:557\u001b[24m\u001b[39m",
                        " [4] \u001b[0m\u001b[1mgetproperty\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mdf\u001b[39m::\u001b[0mDataFrames.DataFrame, \u001b[90mcol_ind\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[33mDataFrames\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\abstractdataframe\\\u001b[39m\u001b[90m\u001b[4mabstractdataframe.jl:448\u001b[24m\u001b[39m",
                        " [5] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1473\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "127",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## family_size\n",
                "\n",
                "**_Creating a new feature called \"family_size\"._**"
            ]
        },
        {
            "id": "128",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 7083a7e7-d1d5-4cc1-ad67-c454b139f5f1\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: cdfd54429cb235dd3b73535518950b2e515e54f2\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.925581Z', iopub.status.busy: '2021-06-26T16:35:15.925033Z', iopub.status.idle: '2021-06-26T16:35:15.933955Z', shell.execute_reply: '2021-06-26T16:35:15.933137Z', shell.execute_reply.started: '2021-06-26T16:35:15.925315Z'}\n",
                "## Family_size seems like a good feature to create\n",
                "train['family_size'] = train.SibSp + train.Parch+1\n",
                "test['family_size'] = test.SibSp + test.Parch+1"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1487:8\\n## Family_size seems like a good feature to create\\ntrain['family_size'] = train.SibSp + train.Parch+1\\n#      └─────────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: 7083a7e7-d1d5-4cc1-ad67-c454b139f5f1\\n#| _kg_hide-input: true\\n#| _uuid: cdfd54429cb235dd3b73535518950b2e515e54f2\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.925581Z', iopub.status.busy: '2021-06-26T16:35:15.925033Z', iopub.status.idle: '2021-06-26T16:35:15.933955Z', shell.execute_reply: '2021-06-26T16:35:15.933137Z', shell.execute_reply.started: '2021-06-26T16:35:15.925315Z'}\\n## Family_size seems like a good feature to create\\ntrain['family_size'] = train.SibSp + train.Parch+1\\ntest['family_size'] = test.SibSp + test.Parch+1\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1482, [1, 53, 77, 128, 407, 458, 509, 557]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(465, 475, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(515, 525, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1487:8\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1487:8\u001b[0;0m\u001b]8;;\u001b\\",
                        "## Family_size seems like a good feature to create",
                        "train['\u001b[48;2;120;70;70mfamily_size\u001b[0;0m'] = train.SibSp + train.Parch+1",
                        "\u001b[90m#      └─────────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1487\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "129",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "130",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 3d471d07-7735-4aab-8b26-3f26e481dc49\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 2e23467af7a2e85fcaa06b52b303daf2e5e44250\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.935971Z', iopub.status.busy: '2021-06-26T16:35:15.935422Z', iopub.status.idle: '2021-06-26T16:35:15.942647Z', shell.execute_reply: '2021-06-26T16:35:15.941882Z', shell.execute_reply.started: '2021-06-26T16:35:15.935671Z'}\n",
                "## bin the family size.\n",
                "def family_group(size):\n",
                "    \"\"\"\n",
                "    This funciton groups(loner, small, large) family based on family size\n",
                "    \"\"\"\n",
                "\n",
                "    a = ''\n",
                "    if (size <= 1):\n",
                "        a = 'loner'\n",
                "    elif (size <= 4):\n",
                "        a = 'small'\n",
                "    else:\n",
                "        a = 'large'\n",
                "    return a"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:def, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `def` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Hint: a global variable of this name may be made accessible by importing IntervalArithmetic in the current active module Main"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "131",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "132",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 82f3cf5a-7e8d-42c3-a06b-56e17e890358\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 549239812f919f5348da08db4264632d2b21b587\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.944511Z', iopub.status.busy: '2021-06-26T16:35:15.94417Z', iopub.status.idle: '2021-06-26T16:35:15.95416Z', shell.execute_reply: '2021-06-26T16:35:15.953395Z', shell.execute_reply.started: '2021-06-26T16:35:15.944448Z'}\n",
                "## apply the family_group function in family_size\n",
                "train['family_group'] = train['family_size'].map(family_group)\n",
                "test['family_group'] = test['family_size'].map(family_group)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1518:8\\n## apply the family_group function in family_size\\ntrain['family_group'] = train['family_size'].map(family_group)\\n#      └──────────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: 82f3cf5a-7e8d-42c3-a06b-56e17e890358\\n#| _kg_hide-input: true\\n#| _uuid: 549239812f919f5348da08db4264632d2b21b587\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.944511Z', iopub.status.busy: '2021-06-26T16:35:15.94417Z', iopub.status.idle: '2021-06-26T16:35:15.95416Z', shell.execute_reply: '2021-06-26T16:35:15.953395Z', shell.execute_reply.started: '2021-06-26T16:35:15.944448Z'}\\n## apply the family_group function in family_size\\ntrain['family_group'] = train['family_size'].map(family_group)\\ntest['family_group'] = test['family_size'].map(family_group)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1513, [1, 53, 77, 128, 405, 455, 518, 579]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(462, 473, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(486, 496, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(524, 535, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(547, 557, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1518:8\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1518:8\u001b[0;0m\u001b]8;;\u001b\\",
                        "## apply the family_group function in family_size",
                        "train['\u001b[48;2;120;70;70mfamily_group\u001b[0;0m'] = train['family_size'].map(family_group)",
                        "\u001b[90m#      └──────────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1518\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "133",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## is_alone"
            ]
        },
        {
            "id": "134",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 298b28d6-75a7-4e49-b1c3-7755f1727327\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 45315bb62f69e94e66109e7da06c6c5ade578398\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.956031Z', iopub.status.busy: '2021-06-26T16:35:15.955569Z', iopub.status.idle: '2021-06-26T16:35:15.964779Z', shell.execute_reply: '2021-06-26T16:35:15.963853Z', shell.execute_reply.started: '2021-06-26T16:35:15.955855Z'}\n",
                "train['is_alone'] = [1 if i<2 else 0 for i in train.family_size]\n",
                "test['is_alone'] = [1 if i<2 else 0 for i in test.family_size]"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1529:8\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.956031Z', iopub.status.busy: '2021-06-26T16:35:15.955569Z', iopub.status.idle: '2021-06-26T16:35:15.964779Z', shell.execute_reply: '2021-06-26T16:35:15.963853Z', shell.execute_reply.started: '2021-06-26T16:35:15.955855Z'}\\ntrain['is_alone'] = [1 if i<2 else 0 for i in train.family_size]\\n#      └──────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: 298b28d6-75a7-4e49-b1c3-7755f1727327\\n#| _kg_hide-input: true\\n#| _uuid: 45315bb62f69e94e66109e7da06c6c5ade578398\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.956031Z', iopub.status.busy: '2021-06-26T16:35:15.955569Z', iopub.status.idle: '2021-06-26T16:35:15.964779Z', shell.execute_reply: '2021-06-26T16:35:15.963853Z', shell.execute_reply.started: '2021-06-26T16:35:15.955855Z'}\\ntrain['is_alone'] = [1 if i<2 else 0 for i in train.family_size]\\ntest['is_alone'] = [1 if i<2 else 0 for i in test.family_size]\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1525, [1, 53, 77, 128, 407, 472, 535]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(414, 421, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(444, 469, :error, \"Expected `end`\"), Base.JuliaSyntax.Diagnostic(478, 485, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(508, 532, :error, \"Expected `end`\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1529:8\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1529:8\u001b[0;0m\u001b]8;;\u001b\\",
                        "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.956031Z', iopub.status.busy: '2021-06-26T16:35:15.955569Z', iopub.status.idle: '2021-06-26T16:35:15.964779Z', shell.execute_reply: '2021-06-26T16:35:15.963853Z', shell.execute_reply.started: '2021-06-26T16:35:15.955855Z'}",
                        "train['\u001b[48;2;120;70;70mis_alone\u001b[0;0m'] = [1 if i<2 else 0 for i in train.family_size]",
                        "\u001b[90m#      └──────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1529\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "135",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## ticket"
            ]
        },
        {
            "id": "136",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 352c794d-728d-44de-9160-25da7abe0c06\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 5b99e1f7d7757f11e6dd6dbc627f3bd6e2fbd874\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.966936Z', iopub.status.busy: '2021-06-26T16:35:15.9664Z', iopub.status.idle: '2021-06-26T16:35:15.97799Z', shell.execute_reply: '2021-06-26T16:35:15.976969Z', shell.execute_reply.started: '2021-06-26T16:35:15.966816Z'}\n",
                "train.Ticket.value_counts().sample(10)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "ErrorException",
                    "evalue": "ErrorException(\"type Array has no field value_counts\")",
                    "traceback": [
                        "type Array has no field value_counts",
                        "Stacktrace:",
                        " [1] \u001b[0m\u001b[1mgetproperty\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mx\u001b[39m::\u001b[0mVector\u001b[90m{String31}\u001b[39m, \u001b[90mf\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m.\\\u001b[39m\u001b[90m\u001b[4mBase.jl:49\u001b[24m\u001b[39m",
                        " [2] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1540\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "137",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "I have yet to figureout how to best manage ticket feature. So, any suggestion would be truly appreciated. For now, I will get rid off the ticket feature."
            ]
        },
        {
            "id": "138",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: d23d451982f0cbe44976c2eacafb726d816e9195\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.979613Z', iopub.status.busy: '2021-06-26T16:35:15.979155Z', iopub.status.idle: '2021-06-26T16:35:15.989456Z', shell.execute_reply: '2021-06-26T16:35:15.988913Z', shell.execute_reply.started: '2021-06-26T16:35:15.97941Z'}\n",
                "train.drop(['Ticket'], axis=1, inplace=True)\n",
                "\n",
                "test.drop(['Ticket'], axis=1, inplace=True)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1549:14\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.979613Z', iopub.status.busy: '2021-06-26T16:35:15.979155Z', iopub.status.idle: '2021-06-26T16:35:15.989456Z', shell.execute_reply: '2021-06-26T16:35:15.988913Z', shell.execute_reply.started: '2021-06-26T16:35:15.97941Z'}\\ntrain.drop(['Ticket'], axis=1, inplace=True)\\n#            └────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _kg_hide-input: true\\n#| _uuid: d23d451982f0cbe44976c2eacafb726d816e9195\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.979613Z', iopub.status.busy: '2021-06-26T16:35:15.979155Z', iopub.status.idle: '2021-06-26T16:35:15.989456Z', shell.execute_reply: '2021-06-26T16:35:15.988913Z', shell.execute_reply.started: '2021-06-26T16:35:15.97941Z'}\\ntrain.drop(['Ticket'], axis=1, inplace=True)\\n\\ntest.drop(['Ticket'], axis=1, inplace=True)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1546, [1, 25, 76, 354, 399, 400, 444]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(367, 372, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(412, 417, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1549:14\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1549:14\u001b[0;0m\u001b]8;;\u001b\\",
                        "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.979613Z', iopub.status.busy: '2021-06-26T16:35:15.979155Z', iopub.status.idle: '2021-06-26T16:35:15.989456Z', shell.execute_reply: '2021-06-26T16:35:15.988913Z', shell.execute_reply.started: '2021-06-26T16:35:15.97941Z'}",
                        "train.drop(['\u001b[48;2;120;70;70mTicket\u001b[0;0m'], axis=1, inplace=True)",
                        "\u001b[90m#            └────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1549\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "139",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## calculated_fare"
            ]
        },
        {
            "id": "140",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: adaa30fe-cb0f-4666-bf95-505f1dcce188\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 9374a6357551a7551e71731d72f5ceb3144856df\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:15.991841Z', iopub.status.busy: '2021-06-26T16:35:15.991313Z', iopub.status.idle: '2021-06-26T16:35:15.999545Z', shell.execute_reply: '2021-06-26T16:35:15.998734Z', shell.execute_reply.started: '2021-06-26T16:35:15.991562Z'}\n",
                "## Calculating fare based on family size.\n",
                "train['calculated_fare'] = train.Fare/train.family_size\n",
                "test['calculated_fare'] = test.Fare/test.family_size"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1562:8\\n## Calculating fare based on family size.\\ntrain['calculated_fare'] = train.Fare/train.family_size\\n#      └─────────────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: adaa30fe-cb0f-4666-bf95-505f1dcce188\\n#| _kg_hide-input: true\\n#| _uuid: 9374a6357551a7551e71731d72f5ceb3144856df\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:15.991841Z', iopub.status.busy: '2021-06-26T16:35:15.991313Z', iopub.status.idle: '2021-06-26T16:35:15.999545Z', shell.execute_reply: '2021-06-26T16:35:15.998734Z', shell.execute_reply.started: '2021-06-26T16:35:15.991562Z'}\\n## Calculating fare based on family size.\\ntrain['calculated_fare'] = train.Fare/train.family_size\\ntest['calculated_fare'] = test.Fare/test.family_size\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1557, [1, 53, 77, 128, 407, 449, 505, 558]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(456, 470, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(511, 525, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1562:8\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1562:8\u001b[0;0m\u001b]8;;\u001b\\",
                        "## Calculating fare based on family size.",
                        "train['\u001b[48;2;120;70;70mcalculated_fare\u001b[0;0m'] = train.Fare/train.family_size",
                        "\u001b[90m#      └─────────────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1562\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "141",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Some people have travelled in groups like family or friends. It seems like Fare column kept a record of the total fare rather than the fare of individual passenger, therefore calculated fare will be much handy in this situation.\n",
                "\n",
                "## fare_group"
            ]
        },
        {
            "id": "142",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 8c33b78c-14cb-4cc2-af0f-65079a741570\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 35685a6ca28651eab389c4673c21da2ea5ba4187\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:16.001667Z', iopub.status.busy: '2021-06-26T16:35:16.001088Z', iopub.status.idle: '2021-06-26T16:35:16.012304Z', shell.execute_reply: '2021-06-26T16:35:16.011542Z', shell.execute_reply.started: '2021-06-26T16:35:16.00135Z'}\n",
                "def fare_group(fare):\n",
                "    \"\"\"\n",
                "    This function creates a fare group based on the fare provided\n",
                "    \"\"\"\n",
                "\n",
                "    a= ''\n",
                "    if fare <= 4:\n",
                "        a = 'Very_low'\n",
                "    elif fare <= 10:\n",
                "        a = 'low'\n",
                "    elif fare <= 20:\n",
                "        a = 'mid'\n",
                "    elif fare <= 45:\n",
                "        a = 'high'\n",
                "    else:\n",
                "        a = \"very_high\"\n",
                "    return a\n",
                "\n",
                "train['fare_group'] = train['calculated_fare'].map(fare_group)\n",
                "test['fare_group'] = test['calculated_fare'].map(fare_group)\n",
                "\n",
                "#train['fare_group'] = pd.cut(train['calculated_fare'], bins = 4, labels=groups)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:def, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `def` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Hint: a global variable of this name may be made accessible by importing IntervalArithmetic in the current active module Main"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "143",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Fare group was calculated based on <i>calculated_fare</i>. This can further help our cause.\n",
                "\n",
                "## PassengerId\n",
                "\n",
                "It seems like <i>PassengerId</i> column only works as an id in this dataset without any significant effect on the dataset. Let's drop it."
            ]
        },
        {
            "id": "144",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: dadea67801cf5b56a882aa96bb874a4afa0e0bec\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:16.014434Z', iopub.status.busy: '2021-06-26T16:35:16.013951Z', iopub.status.idle: '2021-06-26T16:35:16.025524Z', shell.execute_reply: '2021-06-26T16:35:16.024631Z', shell.execute_reply.started: '2021-06-26T16:35:16.014266Z'}\n",
                "train.drop(['PassengerId'], axis=1, inplace=True)\n",
                "\n",
                "test.drop(['PassengerId'], axis=1, inplace=True)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1608:14\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:16.014434Z', iopub.status.busy: '2021-06-26T16:35:16.013951Z', iopub.status.idle: '2021-06-26T16:35:16.025524Z', shell.execute_reply: '2021-06-26T16:35:16.024631Z', shell.execute_reply.started: '2021-06-26T16:35:16.014266Z'}\\ntrain.drop(['PassengerId'], axis=1, inplace=True)\\n#            └─────────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _uuid: dadea67801cf5b56a882aa96bb874a4afa0e0bec\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:16.014434Z', iopub.status.busy: '2021-06-26T16:35:16.013951Z', iopub.status.idle: '2021-06-26T16:35:16.025524Z', shell.execute_reply: '2021-06-26T16:35:16.024631Z', shell.execute_reply.started: '2021-06-26T16:35:16.014266Z'}\\ntrain.drop(['PassengerId'], axis=1, inplace=True)\\n\\ntest.drop(['PassengerId'], axis=1, inplace=True)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1606, [1, 52, 331, 381, 382, 431]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(344, 354, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(394, 404, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1608:14\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1608:14\u001b[0;0m\u001b]8;;\u001b\\",
                        "#| execution: {iopub.execute_input: '2021-06-26T16:35:16.014434Z', iopub.status.busy: '2021-06-26T16:35:16.013951Z', iopub.status.idle: '2021-06-26T16:35:16.025524Z', shell.execute_reply: '2021-06-26T16:35:16.024631Z', shell.execute_reply.started: '2021-06-26T16:35:16.014266Z'}",
                        "train.drop(['\u001b[48;2;120;70;70mPassengerId\u001b[0;0m'], axis=1, inplace=True)",
                        "\u001b[90m#            └─────────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1608\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "145",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Creating dummy variables\n",
                "\n",
                "You might be wondering what is a dummy variable?\n",
                "\n",
                "Dummy variable is an important **prepocessing machine learning step**. Often times Categorical variables are an important features, which can be the difference between a good model and a great model. While working with a dataset, having meaningful value for example, \"male\" or \"female\" instead of 0's and 1's is more intuitive for us. However, machines do not understand the value of categorical values, for example, in this dataset we have gender male or female, algorithms do not accept categorical variables as input. In order to feed data in a machine learning model, we"
            ]
        },
        {
            "id": "146",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 9243ac8c-be44-46d0-a0ca-ee5f19b89bd4\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 7b8db3930fb1bfb91db16686223dfc6d8e77744d\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:16.027132Z', iopub.status.busy: '2021-06-26T16:35:16.026701Z', iopub.status.idle: '2021-06-26T16:35:16.059319Z', shell.execute_reply: '2021-06-26T16:35:16.058745Z', shell.execute_reply.started: '2021-06-26T16:35:16.027081Z'}\n",
                "\n",
                "train = pd.get_dummies(train, columns=['title',\"Pclass\", 'Cabin','Embarked','nLength_group', 'family_group', 'fare_group'], drop_first=False)\n",
                "test = pd.get_dummies(test, columns=['title',\"Pclass\",'Cabin','Embarked','nLength_group', 'family_group', 'fare_group'], drop_first=False)\n",
                "train.drop(['family_size','Name', 'Fare','name_length'], axis=1, inplace=True)\n",
                "test.drop(['Name','family_size',\"Fare\",'name_length'], axis=1, inplace=True)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1625:41\\n\\ntrain = pd.get_dummies(train, columns=['title',\\\"Pclass\\\", 'Cabin','Embarked','nLength_group', 'family_group', 'fare_group'], drop_first=False)\\n#                                       └───┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: 9243ac8c-be44-46d0-a0ca-ee5f19b89bd4\\n#| _kg_hide-input: true\\n#| _uuid: 7b8db3930fb1bfb91db16686223dfc6d8e77744d\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:16.027132Z', iopub.status.busy: '2021-06-26T16:35:16.026701Z', iopub.status.idle: '2021-06-26T16:35:16.059319Z', shell.execute_reply: '2021-06-26T16:35:16.058745Z', shell.execute_reply.started: '2021-06-26T16:35:16.027081Z'}\\n\\ntrain = pd.get_dummies(train, columns=['title',\\\"Pclass\\\", 'Cabin','Embarked','nLength_group', 'family_group', 'fare_group'], drop_first=False)\\ntest = pd.get_dummies(test, columns=['title',\\\"Pclass\\\",'Cabin','Embarked','nLength_group', 'family_group', 'fare_group'], drop_first=False)\\ntrain.drop(['family_size','Name', 'Fare','name_length'], axis=1, inplace=True)\\ntest.drop(['Name','family_size',\\\"Fare\\\",'name_length'], axis=1, inplace=True)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1620, [1, 53, 77, 128, 407, 408, 550, 689, 768, 845]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(448, 452, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(466, 470, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(474, 481, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(485, 497, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(502, 513, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(518, 527, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(588, 592, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(605, 609, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(613, 620, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(624, 636, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(641, 652, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(657, 666, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(702, 712, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(716, 719, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(724, 727, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(731, 741, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(780, 783, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(787, 797, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(808, 818, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1625:41\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1625:41\u001b[0;0m\u001b]8;;\u001b\\",
                        "",
                        "train = pd.get_dummies(train, columns=['\u001b[48;2;120;70;70mtitle\u001b[0;0m',\"Pclass\", 'Cabin','Embarked','nLength_group', 'family_group', 'fare_group'], drop_first=False)",
                        "\u001b[90m#                                       └───┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1625\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "147",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## age\n",
                "\n",
                "As I promised before, we are going to use Random forest regressor in this section to predict the missing age values. Let's do it"
            ]
        },
        {
            "id": "148",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:16.061141Z', iopub.status.busy: '2021-06-26T16:35:16.060714Z', iopub.status.idle: '2021-06-26T16:35:16.084728Z', shell.execute_reply: '2021-06-26T16:35:16.083793Z', shell.execute_reply.started: '2021-06-26T16:35:16.060961Z'}\n",
                "train.head()"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "ArgumentError",
                    "evalue": "ArgumentError(\"column name :head not found in the data frame\")",
                    "traceback": [
                        "ArgumentError: column name :head not found in the data frame",
                        "Stacktrace:",
                        " [1] \u001b[0m\u001b[1mlookupname\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\other\\\u001b[39m\u001b[90m\u001b[4mindex.jl:431\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [2] \u001b[0m\u001b[1mgetindex\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\other\\\u001b[39m\u001b[90m\u001b[4mindex.jl:440\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [3] \u001b[0m\u001b[1mgetindex\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mdf\u001b[39m::\u001b[0mDataFrames.DataFrame, ::\u001b[0mtypeof(!), \u001b[90mcol_ind\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[33mDataFrames\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\dataframe\\\u001b[39m\u001b[90m\u001b[4mdataframe.jl:557\u001b[24m\u001b[39m",
                        " [4] \u001b[0m\u001b[1mgetproperty\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mdf\u001b[39m::\u001b[0mDataFrames.DataFrame, \u001b[90mcol_ind\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[33mDataFrames\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\abstractdataframe\\\u001b[39m\u001b[90m\u001b[4mabstractdataframe.jl:448\u001b[24m\u001b[39m",
                        " [5] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1637\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "149",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "150",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: 9597c320c3db4db5e5c28980a28abaae7281bc61\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:16.086463Z', iopub.status.busy: '2021-06-26T16:35:16.086001Z', iopub.status.idle: '2021-06-26T16:35:16.096908Z', shell.execute_reply: '2021-06-26T16:35:16.095838Z', shell.execute_reply.started: '2021-06-26T16:35:16.086235Z'}\n",
                "## rearranging the columns so that I can easily use the dataframe to predict the missing age values.\n",
                "train = pd.concat([train[[\"Survived\", \"Age\", \"Sex\",\"SibSp\",\"Parch\"]], train.loc[:,\"is_alone\":]], axis=1)\n",
                "test = pd.concat([test[[\"Age\", \"Sex\"]], test.loc[:,\"SibSp\":]], axis=1)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1645:94\\n## rearranging the columns so that I can easily use the dataframe to predict the missing age values.\\ntrain = pd.concat([train[[\\\"Survived\\\", \\\"Age\\\", \\\"Sex\\\",\\\"SibSp\\\",\\\"Parch\\\"]], train.loc[:,\\\"is_alone\\\":]], axis=1)\\n#                                                                                            └ ── missing last argument in range expression\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _kg_hide-input: true\\n#| _uuid: 9597c320c3db4db5e5c28980a28abaae7281bc61\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:16.086463Z', iopub.status.busy: '2021-06-26T16:35:16.086001Z', iopub.status.idle: '2021-06-26T16:35:16.096908Z', shell.execute_reply: '2021-06-26T16:35:16.095838Z', shell.execute_reply.started: '2021-06-26T16:35:16.086235Z'}\\n## rearranging the columns so that I can easily use the dataframe to predict the missing age values.\\ntrain = pd.concat([train[[\\\"Survived\\\", \\\"Age\\\", \\\"Sex\\\",\\\"SibSp\\\",\\\"Parch\\\"]], train.loc[:,\\\"is_alone\\\":]], axis=1)\\ntest = pd.concat([test[[\\\"Age\\\", \\\"Sex\\\"]], test.loc[:,\\\"SibSp\\\":]], axis=1)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1641, [1, 25, 76, 355, 456, 561, 632]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(549, 548, :error, \"missing last argument in range expression\"), Base.JuliaSyntax.Diagnostic(549, 549, :error, \"found unexpected closing token\"), Base.JuliaSyntax.Diagnostic(620, 619, :error, \"missing last argument in range expression\"), Base.JuliaSyntax.Diagnostic(620, 620, :error, \"found unexpected closing token\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1645:94\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1645:94\u001b[0;0m\u001b]8;;\u001b\\",
                        "## rearranging the columns so that I can easily use the dataframe to predict the missing age values.",
                        "train = pd.concat([train[[\"Survived\", \"Age\", \"Sex\",\"SibSp\",\"Parch\"]], train.loc[:,\"is_alone\":\u001b[48;2;120;70;70m\u001b[0;0m]], axis=1)",
                        "\u001b[90m#                                                                                            └ ── \u001b[0;0m\u001b[91mmissing last argument in range expression\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1645\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "151",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "152",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: 91662e7b63c2361fdcf3215f130b3895154ad92d\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:16.098683Z', iopub.status.busy: '2021-06-26T16:35:16.098263Z', iopub.status.idle: '2021-06-26T16:35:22.704889Z', shell.execute_reply: '2021-06-26T16:35:22.704165Z', shell.execute_reply.started: '2021-06-26T16:35:16.098504Z'}\n",
                "## Importing RandomForestRegressor\n",
                "from sklearn.ensemble import RandomForestRegressor\n",
                "\n",
                "## writing a function that takes a dataframe with missing values and outputs it by filling the missing values.\n",
                "def completing_age(df):\n",
                "    ## gettting all the features except survived\n",
                "    age_df = df.loc[:,\"Age\":]\n",
                "\n",
                "    temp_train = age_df.loc[age_df.Age.notnull()] ## df with age values\n",
                "    temp_test = age_df.loc[age_df.Age.isnull()] ## df without age values\n",
                "\n",
                "    y = temp_train.Age.values ## setting target variables(age) in y\n",
                "    x = temp_train.loc[:, \"Sex\":].values\n",
                "\n",
                "    rfr = RandomForestRegressor(n_estimators=1500, n_jobs=-1)\n",
                "    rfr.fit(x, y)\n",
                "\n",
                "    predicted_age = rfr.predict(temp_test.loc[:, \"Sex\":])\n",
                "\n",
                "    df.loc[df.Age.isnull(), \"Age\"] = predicted_age\n",
                "\n",
                "\n",
                "    return df\n",
                "\n",
                "## Implementing the completing_age function in both train and test dataset.\n",
                "completing_age(train)\n",
                "completing_age(test);"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "153",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Let's take a look at the histogram of the age column."
            ]
        },
        {
            "id": "154",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: 8fc55e4670061d46dab3cc6585b3cc71eb996868\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:22.708567Z', iopub.status.busy: '2021-06-26T16:35:22.708283Z', iopub.status.idle: '2021-06-26T16:35:23.194075Z', shell.execute_reply: '2021-06-26T16:35:23.193419Z', shell.execute_reply.started: '2021-06-26T16:35:22.708515Z'}\n",
                "## Let's look at the his\n",
                "plt.subplots(figsize = (22,10),)\n",
                "sns.distplot(train.Age, bins = 100, kde = True, rug = False, norm_hist=False);"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "",
                    "traceback": [
                        "UndefVarError: `plt` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1689\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "155",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## age_group\n",
                "\n",
                "We can create a new feature by grouping the \"Age\" column"
            ]
        },
        {
            "id": "156",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 3140c968-6755-42ec-aa70-d30c0acede1e\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: c3bd77bb4d9d5411aa696a605be127db181d2a67\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.196215Z', iopub.status.busy: '2021-06-26T16:35:23.195696Z', iopub.status.idle: '2021-06-26T16:35:23.219708Z', shell.execute_reply: '2021-06-26T16:35:23.218664Z', shell.execute_reply.started: '2021-06-26T16:35:23.195943Z'}\n",
                "## create bins for age\n",
                "def age_group_fun(age):\n",
                "    \"\"\"\n",
                "    This function creates a bin for age\n",
                "    \"\"\"\n",
                "    a = ''\n",
                "    if age <= 1:\n",
                "        a = 'infant'\n",
                "    elif age <= 4:\n",
                "        a = 'toddler'\n",
                "    elif age <= 13:\n",
                "        a = 'child'\n",
                "    elif age <= 18:\n",
                "        a = 'teenager'\n",
                "    elif age <= 35:\n",
                "        a = 'Young_Adult'\n",
                "    elif age <= 45:\n",
                "        a = 'adult'\n",
                "    elif age <= 55:\n",
                "        a = 'middle_aged'\n",
                "    elif age <= 65:\n",
                "        a = 'senior_citizen'\n",
                "    else:\n",
                "        a = 'old'\n",
                "    return a\n",
                "\n",
                "## Applying \"age_group_fun\" function to the \"Age\" column.\n",
                "train['age_group'] = train['Age'].map(age_group_fun)\n",
                "test['age_group'] = test['Age'].map(age_group_fun)\n",
                "\n",
                "## Creating dummies for \"age_group\" feature.\n",
                "train = pd.get_dummies(train,columns=['age_group'], drop_first=True)\n",
                "test = pd.get_dummies(test,columns=['age_group'], drop_first=True);"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "",
                    "traceback": [
                        "UndefVarError: `def` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Hint: a global variable of this name may be made accessible by importing IntervalArithmetic in the current active module Main"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "157",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "<div class=\"alert alert-danger\">\n",
                "<h1>Need to paraphrase this section</h1>\n",
                "<h2>Feature Selection</h2>\n",
                "<h3>Feature selection is an important part of machine learning models. There are many reasons why we use feature selection.</h3> \n",
                "<ul>\n",
                "    <li>Simple models are easier to interpret. People who acts according to model results have a better understanding of the model.</li>\n",
                "    <li>Shorter training times.</li>\n",
                "    <li>Enhanced generalisation by reducing overfitting. </li>\n",
                "    <li>Easier to implement by software developers> model production.</li>\n",
                "        <ul>\n",
                "            <li>As Data Scientists we need to remember no to creating models with too many variables since it might overwhelm production engineers.</li>\n",
                "    </ul>\n",
                "    <li>Reduced risk of data errors during model use</li>\n",
                "    <li>Data redundancy</li>\n",
                "</ul>\n",
                "</div>\n",
                "\n",
                "# Part 6: Pre-Modeling Tasks\n",
                "\n",
                "## 6a. Separating dependent and independent variables\n",
                "\n",
                "<a id=\"dependent_independent\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "Before we apply any machine learning models, It is important to separate dependent and independent variables. Our dependent variable or target variable is something that we are trying to find, and our independent variable is the features we use to find the dependent variable. The way we use machine learning algorithm in a dataset is that we train our machine learning model by specifying independent variables and dependent variable. To specify them, we need to separate them from each other, and the code below does just that.\n",
                "\n",
                "P.S. In our test dataset, we do not have a dependent variable feature. We are to predict that using machine learning models."
            ]
        },
        {
            "id": "158",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: dcb0934f-8e3f-40b6-859e-abf70b0b074e\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 607db6be6dfacc7385e5adcc0feeee28c50c99c5\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.221875Z', iopub.status.busy: '2021-06-26T16:35:23.221297Z', iopub.status.idle: '2021-06-26T16:35:23.229845Z', shell.execute_reply: '2021-06-26T16:35:23.228853Z', shell.execute_reply.started: '2021-06-26T16:35:23.221578Z'}\n",
                "# separating our independent and dependent variable\n",
                "X = train.drop(['Survived'], axis = 1)\n",
                "y = train[\"Survived\"]"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:1772:18\\n# separating our independent and dependent variable\\nX = train.drop(['Survived'], axis = 1)\\n#                └──────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: dcb0934f-8e3f-40b6-859e-abf70b0b074e\\n#| _kg_hide-input: true\\n#| _uuid: 607db6be6dfacc7385e5adcc0feeee28c50c99c5\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:23.221875Z', iopub.status.busy: '2021-06-26T16:35:23.221297Z', iopub.status.idle: '2021-06-26T16:35:23.229845Z', shell.execute_reply: '2021-06-26T16:35:23.228853Z', shell.execute_reply.started: '2021-06-26T16:35:23.221578Z'}\\n# separating our independent and dependent variable\\nX = train.drop(['Survived'], axis = 1)\\ny = train[\\\"Survived\\\"]\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 1767, [1, 53, 77, 128, 407, 459, 498, 520]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(476, 483, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#1772:18\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:1772:18\u001b[0;0m\u001b]8;;\u001b\\",
                        "# separating our independent and dependent variable",
                        "X = train.drop(['\u001b[48;2;120;70;70mSurvived\u001b[0;0m'], axis = 1)",
                        "\u001b[90m#                └──────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1772\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "159",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## 6b. Splitting the training data\n",
                "\n",
                "<a id=\"split_training_data\" ></a>\n",
                "\n",
                "---\n",
                "\n",
                "There are multiple ways of splitting data. They are...\n",
                "\n",
                "- train_test_split.\n",
                "- cross_validation.\n",
                "\n",
                "We have separated dependent and independent features; We have separated train and test data. So, why do we still have to split our training data? If you are curious about that, I have the answer. For this competition, when we train the machine learning algorithms, we use part of the training set usually two-thirds of the train data. Once we train our algorithm using 2/3 of the train data, we start to test our algorithms using the remaining data. If the model performs well we dump our test data in the algorithms to predict and submit the competition. The code below, basically splits the train data into 4 parts, **X_train**, **X_test**, **y_train**, **y_test**.\n",
                "\n",
                "- **X_train** and **y_train** first used to train the algorithm.\n",
                "- then, **X_test** is used in that trained algorithms to predict **outcomes. **\n",
                "- Once we get the **outcomes**, we compare it with **y_test**\n",
                "\n",
                "By comparing the **outcome** of the model with **y_test**, we can determine whether our algorithms are performing well or not. As we compare we use confusion matrix to determine different aspects of model performance.\n",
                "\n",
                "P.S. When we use cross validation it is important to remember not to use **X_train, X_test, y_train and y_test**, rather we will use **X and y**. I will discuss more on that."
            ]
        },
        {
            "id": "160",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 348a5be2-5f4f-4c98-93a3-7352b6060ef4\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 41b70e57f8e03da9910c20af89a9fa4a2aaea85b\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.231964Z', iopub.status.busy: '2021-06-26T16:35:23.23135Z', iopub.status.idle: '2021-06-26T16:35:23.240022Z', shell.execute_reply: '2021-06-26T16:35:23.239414Z', shell.execute_reply.started: '2021-06-26T16:35:23.231633Z'}\n",
                "from sklearn.model_selection import train_test_split\n",
                "X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = .33, random_state=0)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "161",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "162",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.242734Z', iopub.status.busy: '2021-06-26T16:35:23.24208Z', iopub.status.idle: '2021-06-26T16:35:23.250654Z', shell.execute_reply: '2021-06-26T16:35:23.249893Z', shell.execute_reply.started: '2021-06-26T16:35:23.242373Z'}\n",
                "len(X_train)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:len, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `len` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1808\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "163",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "164",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.260997Z', iopub.status.busy: '2021-06-26T16:35:23.260779Z', iopub.status.idle: '2021-06-26T16:35:23.265643Z', shell.execute_reply: '2021-06-26T16:35:23.264688Z', shell.execute_reply.started: '2021-06-26T16:35:23.260954Z'}\n",
                "len(X_test)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:len, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `len` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1813\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "165",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## 6c. Feature Scaling\n",
                "\n",
                "<a id=\"feature_scaling\" ></a>\n",
                "\n",
                "---\n",
                "\n",
                "Feature scaling is an important concept of machine learning models. Often times a dataset contain features highly varying in magnitude and unit. For some machine learning models, it is not a problem. However, for many other ones, its quite a problem. Many machine learning algorithms uses euclidian distances to calculate the distance between two points, it is quite a problem. Let's again look at a the sample of the **train** dataset below."
            ]
        },
        {
            "id": "166",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: d788baa4b88106afe5b30c769a6c85a1d67a5d6c\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.26761Z', iopub.status.busy: '2021-06-26T16:35:23.267136Z', iopub.status.idle: '2021-06-26T16:35:23.295264Z', shell.execute_reply: '2021-06-26T16:35:23.294322Z', shell.execute_reply.started: '2021-06-26T16:35:23.267383Z'}\n",
                "train.sample(5)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "ArgumentError",
                    "evalue": "ArgumentError(\"column name :sample not found in the data frame\")",
                    "traceback": [
                        "ArgumentError: column name :sample not found in the data frame",
                        "Stacktrace:",
                        " [1] \u001b[0m\u001b[1mlookupname\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\other\\\u001b[39m\u001b[90m\u001b[4mindex.jl:431\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [2] \u001b[0m\u001b[1mgetindex\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\other\\\u001b[39m\u001b[90m\u001b[4mindex.jl:440\u001b[24m\u001b[39m\u001b[90m [inlined]\u001b[39m",
                        " [3] \u001b[0m\u001b[1mgetindex\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mdf\u001b[39m::\u001b[0mDataFrames.DataFrame, ::\u001b[0mtypeof(!), \u001b[90mcol_ind\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[33mDataFrames\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\dataframe\\\u001b[39m\u001b[90m\u001b[4mdataframe.jl:557\u001b[24m\u001b[39m",
                        " [4] \u001b[0m\u001b[1mgetproperty\u001b[22m\u001b[0m\u001b[1m(\u001b[22m\u001b[90mdf\u001b[39m::\u001b[0mDataFrames.DataFrame, \u001b[90mcol_ind\u001b[39m::\u001b[0mSymbol\u001b[0m\u001b[1m)\u001b[22m",
                        "\u001b[90m   @\u001b[39m \u001b[33mDataFrames\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\.julia\\packages\\DataFrames\\kcA9R\\src\\abstractdataframe\\\u001b[39m\u001b[90m\u001b[4mabstractdataframe.jl:448\u001b[24m\u001b[39m",
                        " [5] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1828\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "167",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Here **Age** and **Calculated_fare** is much higher in magnitude compared to others machine learning features. This can create problems as many machine learning models will get confused thinking **Age** and **Calculated_fare** have higher weight than other features. Therefore, we need to do feature scaling to get a better result.\n",
                "There are multiple ways to do feature scaling.\n",
                "\n",
                "<ul>\n",
                "    <li><b>MinMaxScaler</b>-Scales the data using the max and min values so that it fits between 0 and 1.</li>\n",
                "    <li><b>StandardScaler</b>-Scales the data so that it has mean 0 and variance of 1.</li>\n",
                "    <li><b>RobustScaler</b>-Scales the data similary to Standard Scaler, but makes use of the median and scales using the interquertile range so as to aviod issues with large outliers.</b>\n",
                " </ul>\n",
                "I will discuss more on that in a different kernel. For now we will use <b>Standard Scaler</b> to feature scale our dataset.\n",
                "\n",
                "P.S. I am showing a sample of both before and after so that you can see how scaling changes the dataset.\n",
                "\n",
                "<h3><font color=\"$5831bc\" face=\"Comic Sans MS\">Before Scaling</font></h3>"
            ]
        },
        {
            "id": "168",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: c4011a767b1d846f2866b4573d1d6d116afe8427\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.297022Z', iopub.status.busy: '2021-06-26T16:35:23.296548Z', iopub.status.idle: '2021-06-26T16:35:23.319251Z', shell.execute_reply: '2021-06-26T16:35:23.318338Z', shell.execute_reply.started: '2021-06-26T16:35:23.296792Z'}\n",
                "headers = X_train.columns\n",
                "\n",
                "X_train.head()"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:X_train, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `X_train` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1849\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "169",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "170",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 5c89c54b-7f5a-4e31-9e8f-58726cef5eab\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 182b849ba7f2b311e919cdbf83970b97736e9d98\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.320979Z', iopub.status.busy: '2021-06-26T16:35:23.320476Z', iopub.status.idle: '2021-06-26T16:35:23.331478Z', shell.execute_reply: '2021-06-26T16:35:23.33067Z', shell.execute_reply.started: '2021-06-26T16:35:23.320738Z'}\n",
                "# Feature Scaling\n",
                "## We will be using standardscaler to transform\n",
                "from sklearn.preprocessing import StandardScaler\n",
                "st_scale = StandardScaler()\n",
                "\n",
                "## transforming \"train_x\"\n",
                "X_train = st_scale.fit_transform(X_train)\n",
                "## transforming \"test_x\"\n",
                "X_test = st_scale.transform(X_test)\n",
                "\n",
                "## transforming \"The testset\"\n",
                "#test = st_scale.transform(test)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "171",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "<h3><font color=\"#5831bc\" face=\"Comic Sans MS\">After Scaling</font></h3>"
            ]
        },
        {
            "id": "172",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| _uuid: fc6f031833ac9e2734aa7b3a2373b667679c6b2f\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.333531Z', iopub.status.busy: '2021-06-26T16:35:23.333111Z', iopub.status.idle: '2021-06-26T16:35:23.359161Z', shell.execute_reply: '2021-06-26T16:35:23.358554Z', shell.execute_reply.started: '2021-06-26T16:35:23.333347Z'}\n",
                "pd.DataFrame(X_train, columns=headers).head()"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:headers, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `headers` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:1879\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "173",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "You can see how the features have transformed above.\n",
                "\n",
                "# Part 7: Modeling the Data\n",
                "\n",
                "<a id=\"modelingthedata\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "In the previous versions of this kernel, I thought about explaining each model before applying it. However, this process makes this kernel too lengthy to sit and read at one go. Therefore I have decided to break this kernel down and explain each algorithm in a different kernel and add the links here. If you like to review logistic regression, please click [here](https://www.kaggle.com/masumrumi/logistic-regression-with-titanic-dataset)."
            ]
        },
        {
            "id": "174",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 0c8b0c41-6738-4689-85b0-b83a16e46ab9\n",
                "#| _uuid: 09140be1a71e37b441a16951a82747462b767e6e\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.361067Z', iopub.status.busy: '2021-06-26T16:35:23.360637Z', iopub.status.idle: '2021-06-26T16:35:23.383762Z', shell.execute_reply: '2021-06-26T16:35:23.383049Z', shell.execute_reply.started: '2021-06-26T16:35:23.360889Z'}\n",
                "# import LogisticRegression model in python.\n",
                "from sklearn.linear_model import LogisticRegression\n",
                "from sklearn.metrics import mean_absolute_error, accuracy_score\n",
                "\n",
                "## call on the model object\n",
                "logreg = LogisticRegression(solver='liblinear',\n",
                "                            penalty= 'l1',random_state = 42\n",
                "\n",
                "                            )\n",
                "\n",
                "## fit the model with \"train_x\" and \"train_y\"\n",
                "logreg.fit(X_train,y_train)\n",
                "\n",
                "## Once the model is trained we want to find out how well the model is performing, so we test the model.\n",
                "## we use \"X_test\" portion of the data(this data was not used to fit the model) to predict model outcome.\n",
                "y_pred = logreg.predict(X_test)\n",
                "\n",
                "## Once predicted we save that outcome in \"y_pred\" variable.\n",
                "## Then we compare the predicted value( \"y_pred\") and actual value(\"test_y\") to see how well our model is performing."
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "175",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "<h1><font color=\"#5831bc\" face=\"Comic Sans MS\">Evaluating a classification model</font></h1>\n",
                "\n",
                "There are multiple ways to evaluate a classification model.\n",
                "\n",
                "- Confusion Matrix.\n",
                "- ROC Curve\n",
                "- AUC Curve.\n",
                "\n",
                "## Confusion Matrix\n",
                "\n",
                "<b>Confusion matrix</b>, a table that <b>describes the performance of a classification model</b>. Confusion Matrix tells us how many our model predicted correctly and incorrectly in terms of binary/multiple outcome classes by comparing actual and predicted cases. For example, in terms of this dataset, our model is a binary one and we are trying to classify whether the passenger survived or not survived. we have fit the model using **X_train** and **y_train** and predicted the outcome of **X_test** in the variable **y_pred**. So, now we will use a confusion matrix to compare between **y_test** and **y_pred**. Let's do the confusion matrix."
            ]
        },
        {
            "id": "176",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.385843Z', iopub.status.busy: '2021-06-26T16:35:23.385341Z', iopub.status.idle: '2021-06-26T16:35:23.399434Z', shell.execute_reply: '2021-06-26T16:35:23.398674Z', shell.execute_reply.started: '2021-06-26T16:35:23.385606Z'}\n",
                "from sklearn.metrics import classification_report, confusion_matrix\n",
                "# printing confision matrix\n",
                "pd.DataFrame(confusion_matrix(y_test,y_pred),\\\n",
                "            columns=[\"Predicted Not-Survived\", \"Predicted Survived\"],\\\n",
                "            index=[\"Not-Survived\",\"Survived\"] )"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "177",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "Our **y_test** has a total of 294 data points; part of the original train set that we splitted in order to evaluate our model. Each number here represents certain details about our model. If we were to think about this interms of column and raw, we could see that...\n",
                "\n",
                "- the first column is of data points that the machine predicted as not-survived.\n",
                "- the second column is of the statistics that the model predicted as survievd.\n",
                "- In terms of raws, the first raw indexed as \"Not-survived\" means that the value in that raw are actual statistics of not survived once.\n",
                "- and the \"Survived\" indexed raw are values that actually survived.\n",
                "\n",
                "Now you can see that the predicted not-survived and predicted survived sort of overlap with actual survived and actual not-survived. After all it is a matrix and we have some terminologies to call these statistics more specifically. Let's see what they are\n",
                "\n",
                "<ul style=\"list-style-type:square;\">\n",
                "    <li><b>True Positive(TP)</b>: values that the model predicted as yes(survived) and is actually yes(survived).</li>\n",
                "    <li><b>True Negative(TN)</b>: values that model predicted as no(not-survived) and is actually no(not-survived)</li>\n",
                "    <li><b>False Positive(or Type I error)</b>: values that model predicted as yes(survived) but actually no(not-survived)</li>\n",
                "    <li><b>False Negative(or Type II error)</b>: values that model predicted as no(not-survived) but actually yes(survived)</li>\n",
                "</ul>\n",
                "\n",
                "For this dataset, whenever the model is predicting something as yes, it means the model is predicting that the passenger survived and for cases when the model predicting no; it means the passenger did not survive. Let's determine the value of all these terminologies above.\n",
                "\n",
                "<ul style=\"list-style-type:square;\">\n",
                "    <li><b>True Positive(TP):87</b></li>\n",
                "    <li><b>True Negative(TN):149</b></li>\n",
                "    <li><b>False Positive(FP):28</b></li>\n",
                "    <li><b>False Negative(FN):30</b></li>\n",
                "</ul>\n",
                "From these four terminologies, we can compute many other rates that are used to evaluate a binary classifier.\n",
                "\n",
                "#### Accuracy:\n",
                "\n",
                "** Accuracy is the measure of how often the model is correct.**\n",
                "\n",
                "- (TP + TN)/total = (87+149)/294 = .8027\n",
                "\n",
                "We can also calculate accuracy score using scikit learn."
            ]
        },
        {
            "id": "178",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.400652Z', iopub.status.busy: '2021-06-26T16:35:23.400403Z', iopub.status.idle: '2021-06-26T16:35:23.408635Z', shell.execute_reply: '2021-06-26T16:35:23.40776Z', shell.execute_reply.started: '2021-06-26T16:35:23.400604Z'}\n",
                "from sklearn.metrics import accuracy_score\n",
                "accuracy_score(y_test, y_pred)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "179",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "**Misclassification Rate:** Misclassification Rate is the measure of how often the model is wrong\\*\\*\n",
                "\n",
                "- Misclassification Rate and Accuracy are opposite of each other.\n",
                "- Missclassification is equivalent to 1 minus Accuracy.\n",
                "- Misclassification Rate is also known as \"Error Rate\".\n",
                "\n",
                "> (FP + FN)/Total = (28+30)/294 = 0.19\n",
                "\n",
                "**True Positive Rate/Recall/Sensitivity:** How often the model predicts yes(survived) when it's actually yes(survived)?\n",
                "\n",
                "> TP/(TP+FN) = 87/(87+30) = 0.7435897435897436"
            ]
        },
        {
            "id": "180",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.410491Z', iopub.status.busy: '2021-06-26T16:35:23.410085Z', iopub.status.idle: '2021-06-26T16:35:23.418315Z', shell.execute_reply: '2021-06-26T16:35:23.417549Z', shell.execute_reply.started: '2021-06-26T16:35:23.410444Z'}\n",
                "from sklearn.metrics import recall_score\n",
                "recall_score(y_test, y_pred)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "181",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "**False Positive Rate:** How often the model predicts yes(survived) when it's actually no(not-survived)?\n",
                "\n",
                "> FP/(FP+TN) = 28/(28+149) = 0.15819209039548024\n",
                "\n",
                "**True Negative Rate/Specificity:** How often the model predicts no(not-survived) when it's actually no(not-survived)?\n",
                "\n",
                "- True Negative Rate is equivalent to 1 minus False Positive Rate.\n",
                "\n",
                "> TN/(TN+FP) = 149/(149+28) = 0.8418079096045198\n",
                "\n",
                "**Precision:** How often is it correct when the model predicts yes.\n",
                "\n",
                "> TP/(TP+FP) = 87/(87+28) = 0.7565217391304347"
            ]
        },
        {
            "id": "182",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.4204Z', iopub.status.busy: '2021-06-26T16:35:23.419791Z', iopub.status.idle: '2021-06-26T16:35:23.429679Z', shell.execute_reply: '2021-06-26T16:35:23.42864Z', shell.execute_reply.started: '2021-06-26T16:35:23.420242Z'}\n",
                "from sklearn.metrics import precision_score\n",
                "precision_score(y_test, y_pred)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "183",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "184",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.431682Z', iopub.status.busy: '2021-06-26T16:35:23.431234Z', iopub.status.idle: '2021-06-26T16:35:23.44225Z', shell.execute_reply: '2021-06-26T16:35:23.441202Z', shell.execute_reply.started: '2021-06-26T16:35:23.43147Z'}\n",
                "from sklearn.metrics import classification_report, balanced_accuracy_score\n",
                "print(classification_report(y_test, y_pred))"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "185",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "we have our confusion matrix. How about we give it a little more character."
            ]
        },
        {
            "id": "186",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.444153Z', iopub.status.busy: '2021-06-26T16:35:23.443714Z', iopub.status.idle: '2021-06-26T16:35:23.873374Z', shell.execute_reply: '2021-06-26T16:35:23.869521Z', shell.execute_reply.started: '2021-06-26T16:35:23.444104Z'}\n",
                "from sklearn.utils.multiclass import unique_labels\n",
                "from sklearn.metrics import confusion_matrix\n",
                "\n",
                "\n",
                "def plot_confusion_matrix(y_true, y_pred, classes,\n",
                "                          normalize=False,\n",
                "                          title=None,\n",
                "                          cmap=plt.cm.Blues):\n",
                "    \"\"\"\n",
                "    This function prints and plots the confusion matrix.\n",
                "    Normalization can be applied by setting `normalize=True`.\n",
                "    \"\"\"\n",
                "    if not title:\n",
                "        if normalize:\n",
                "            title = 'Normalized confusion matrix'\n",
                "        else:\n",
                "            title = 'Confusion matrix, without normalization'\n",
                "\n",
                "    # Compute confusion matrix\n",
                "    cm = confusion_matrix(y_true, y_pred)\n",
                "    # Only use the labels that appear in the data\n",
                "    classes = classes[unique_labels(y_true, y_pred)]\n",
                "    if normalize:\n",
                "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
                "        print(\"Normalized confusion matrix\")\n",
                "    else:\n",
                "        print('Confusion matrix, without normalization')\n",
                "\n",
                "    print(cm)\n",
                "\n",
                "    fig, ax = plt.subplots()\n",
                "    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n",
                "    ax.figure.colorbar(im, ax=ax)\n",
                "    # We want to show all ticks...\n",
                "    ax.set(xticks=np.arange(cm.shape[1]),\n",
                "           yticks=np.arange(cm.shape[0]),\n",
                "           # ... and label them with the respective list entries\n",
                "           xticklabels=classes, yticklabels=classes,\n",
                "           title=title,\n",
                "           ylabel='True label',\n",
                "           xlabel='Predicted label')\n",
                "\n",
                "    # Rotate the tick labels and set their alignment.\n",
                "    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n",
                "             rotation_mode=\"anchor\")\n",
                "\n",
                "    # Loop over data dimensions and create text annotations.\n",
                "    fmt = '.2f' if normalize else 'd'\n",
                "    thresh = cm.max() / 2.\n",
                "    for i in range(cm.shape[0]):\n",
                "        for j in range(cm.shape[1]):\n",
                "            ax.text(j, i, format(cm[i, j], fmt),\n",
                "                    ha=\"center\", va=\"center\",\n",
                "                    color=\"white\" if cm[i, j] > thresh else \"black\")\n",
                "    fig.tight_layout()\n",
                "    return ax\n",
                "\n",
                "\n",
                "np.set_printoptions(precision=2)\n",
                "\n",
                "class_names = np.array(['not_survived','survived'])\n",
                "\n",
                "# Plot non-normalized confusion matrix\n",
                "plot_confusion_matrix(y_test, y_pred, classes=class_names,\n",
                "                      title='Confusion matrix, without normalization')\n",
                "\n",
                "# Plot normalized confusion matrix\n",
                "plot_confusion_matrix(y_test, y_pred, classes=class_names, normalize=True,\n",
                "                      title='Normalized confusion matrix')\n",
                "\n",
                "plt.show()"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "187",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "<h1>AUC & ROC Curve</h1>"
            ]
        },
        {
            "id": "188",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 1e71bc7c685b757b6920076527780674d6f619bc\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:23.877891Z', iopub.status.busy: '2021-06-26T16:35:23.875713Z', iopub.status.idle: '2021-06-26T16:35:24.505751Z', shell.execute_reply: '2021-06-26T16:35:24.501314Z', shell.execute_reply.started: '2021-06-26T16:35:23.87783Z'}\n",
                "from sklearn.metrics import roc_curve, auc\n",
                "#plt.style.use('seaborn-pastel')\n",
                "y_score = logreg.decision_function(X_test)\n",
                "\n",
                "FPR, TPR, _ = roc_curve(y_test, y_score)\n",
                "ROC_AUC = auc(FPR, TPR)\n",
                "print (ROC_AUC)\n",
                "\n",
                "plt.figure(figsize =[11,9])\n",
                "plt.plot(FPR, TPR, label= 'ROC curve(area = %0.2f)'%ROC_AUC, linewidth= 4)\n",
                "plt.plot([0,1],[0,1], 'k--', linewidth = 4)\n",
                "plt.xlim([0.0,1.0])\n",
                "plt.ylim([0.0,1.05])\n",
                "plt.xlabel('False Positive Rate', fontsize = 18)\n",
                "plt.ylabel('True Positive Rate', fontsize = 18)\n",
                "plt.title('ROC for Titanic survivors', fontsize= 18)\n",
                "plt.show()"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "189",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "190",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 22f15e384372a1ece2f28cd9eced0c703a79598f\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:24.50731Z', iopub.status.busy: '2021-06-26T16:35:24.506981Z', iopub.status.idle: '2021-06-26T16:35:24.8481Z', shell.execute_reply: '2021-06-26T16:35:24.846974Z', shell.execute_reply.started: '2021-06-26T16:35:24.507251Z'}\n",
                "from sklearn.metrics import precision_recall_curve\n",
                "\n",
                "y_score = logreg.decision_function(X_test)\n",
                "\n",
                "precision, recall, _ = precision_recall_curve(y_test, y_score)\n",
                "PR_AUC = auc(recall, precision)\n",
                "\n",
                "plt.figure(figsize=[11,9])\n",
                "plt.plot(recall, precision, label='PR curve (area = %0.2f)' % PR_AUC, linewidth=4)\n",
                "plt.xlabel('Recall', fontsize=18)\n",
                "plt.ylabel('Precision', fontsize=18)\n",
                "plt.title('Precision Recall Curve for Titanic survivors', fontsize=18)\n",
                "plt.legend(loc=\"lower right\")\n",
                "plt.show()"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "191",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Using Cross-validation:\n",
                "\n",
                "Pros:\n",
                "\n",
                "- Helps reduce variance.\n",
                "- Expends models predictability."
            ]
        },
        {
            "id": "192",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:24.855506Z', iopub.status.busy: '2021-06-26T16:35:24.853028Z', iopub.status.idle: '2021-06-26T16:35:24.862513Z', shell.execute_reply: '2021-06-26T16:35:24.861421Z', shell.execute_reply.started: '2021-06-26T16:35:24.853368Z'}\n",
                "sc = st_scale"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:st_scale, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `st_scale` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2152\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "193",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "194",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 17791284c3e88236de2daa112422cde8ddcb0641\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:24.868704Z', iopub.status.busy: '2021-06-26T16:35:24.86826Z', iopub.status.idle: '2021-06-26T16:35:25.014634Z', shell.execute_reply: '2021-06-26T16:35:25.013771Z', shell.execute_reply.started: '2021-06-26T16:35:24.86853Z'}\n",
                "#| scrolled: true\n",
                "## Using StratifiedShuffleSplit\n",
                "## We can use KFold, StratifiedShuffleSplit, StratiriedKFold or ShuffleSplit, They are all close cousins. look at sklearn userguide for more info.\n",
                "from sklearn.model_selection import StratifiedShuffleSplit, cross_val_score\n",
                "cv = StratifiedShuffleSplit(n_splits = 10, test_size = .25, random_state = 0 ) # run model 10x with 60/30 split intentionally leaving out 10%\n",
                "## Using standard scale for the whole dataset.\n",
                "\n",
                "## saving the feature names for decision tree display\n",
                "column_names = X.columns\n",
                "\n",
                "X = sc.fit_transform(X)\n",
                "accuracies = cross_val_score(LogisticRegression(solver='liblinear'), X,y, cv  = cv)\n",
                "print (\"Cross-Validation accuracy scores:{}\".format(accuracies))\n",
                "print (\"Mean Cross-Validation accuracy score: {}\".format(round(accuracies.mean(),5)))"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "195",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Grid Search on Logistic Regression\n",
                "\n",
                "- What is grid search?\n",
                "- What are the pros and cons?\n",
                "\n",
                "**Gridsearch** is a simple concept but effective technique in Machine Learning. The word **GridSearch** stands for the fact that we are searching for optimal parameter/parameters over a \"grid.\" These optimal parameters are also known as **Hyperparameters**. **The Hyperparameters are model parameters that are set before fitting the model and determine the behavior of the model.**. For example, when we choose to use linear regression, we may decide to add a penalty to the loss function such as Ridge or Lasso. These penalties require specific alpha (the strength of the regularization technique) to set beforehand. The higher the value of alpha, the more penalty is being added. GridSearch finds the optimal value of alpha among a range of values provided by us, and then we go on and use that optimal value to fit the model and get sweet results. It is essential to understand those model parameters are different from models outcomes, for example, **coefficients** or model evaluation metrics such as **accuracy score** or **mean squared error** are model outcomes and different than hyperparameters.\n",
                "\n",
                "#### This part of the kernel is a working progress. Please check back again for future updates.####"
            ]
        },
        {
            "id": "196",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 0620523c-b33b-4302-8a1c-4b6759ffa5fa\n",
                "#| _uuid: 36a379a00a31dd161be1723f65490990294fe13d\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:25.021234Z', iopub.status.busy: '2021-06-26T16:35:25.018883Z', iopub.status.idle: '2021-06-26T16:35:40.193433Z', shell.execute_reply: '2021-06-26T16:35:40.192566Z', shell.execute_reply.started: '2021-06-26T16:35:25.021181Z'}\n",
                "from sklearn.model_selection import GridSearchCV, StratifiedKFold\n",
                "## C_vals is the alpla value of lasso and ridge regression(as alpha increases the model complexity decreases,)\n",
                "## remember effective alpha scores are 0<alpha<infinity\n",
                "C_vals = [0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,16.5,17,17.5,18]\n",
                "## Choosing penalties(Lasso(l1) or Ridge(l2))\n",
                "penalties = ['l1','l2']\n",
                "## Choose a cross validation strategy.\n",
                "cv = StratifiedShuffleSplit(n_splits = 10, test_size = .25)\n",
                "\n",
                "## setting param for param_grid in GridSearchCV.\n",
                "param = {'penalty': penalties, 'C': C_vals}\n",
                "\n",
                "logreg = LogisticRegression(solver='liblinear')\n",
                "## Calling on GridSearchCV object.\n",
                "grid = GridSearchCV(estimator=LogisticRegression(),\n",
                "                           param_grid = param,\n",
                "                           scoring = 'accuracy',\n",
                "                            n_jobs =-1,\n",
                "                           cv = cv\n",
                "                          )\n",
                "## Fitting the model\n",
                "grid.fit(X, y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "197",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "198",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 1fa35072-87c4-4f47-86ab-dda03d4b7b15\n",
                "#| _uuid: 4c6650e39550527b271ddf733dcfe5221bcd5c98\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:40.195216Z', iopub.status.busy: '2021-06-26T16:35:40.194925Z', iopub.status.idle: '2021-06-26T16:35:40.201259Z', shell.execute_reply: '2021-06-26T16:35:40.200225Z', shell.execute_reply.started: '2021-06-26T16:35:40.19517Z'}\n",
                "## Getting the best of everything.\n",
                "print (grid.best_score_)\n",
                "print (grid.best_params_)\n",
                "print(grid.best_estimator_)\n",
                ""
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:2216:6\\n## Getting the best of everything.\\nprint (grid.best_score_)\\n#    ╙ ── whitespace is not allowed here\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _cell_guid: 1fa35072-87c4-4f47-86ab-dda03d4b7b15\\n#| _uuid: 4c6650e39550527b271ddf733dcfe5221bcd5c98\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:40.195216Z', iopub.status.busy: '2021-06-26T16:35:40.194925Z', iopub.status.idle: '2021-06-26T16:35:40.201259Z', shell.execute_reply: '2021-06-26T16:35:40.200225Z', shell.execute_reply.started: '2021-06-26T16:35:40.19517Z'}\\n## Getting the best of everything.\\nprint (grid.best_score_)\\nprint (grid.best_params_)\\nprint(grid.best_estimator_)\\n\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 2212, [1, 53, 104, 382, 417, 442, 468, 496, 497]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(422, 422, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(447, 447, :error, \"whitespace is not allowed here\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#2216:6\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:2216:6\u001b[0;0m\u001b]8;;\u001b\\",
                        "## Getting the best of everything.",
                        "print\u001b[48;2;120;70;70m \u001b[0;0m(grid.best_score_)",
                        "\u001b[90m#    ╙ ── \u001b[0;0m\u001b[91mwhitespace is not allowed here\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2216\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "199",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "#### Using the best parameters from the grid-search."
            ]
        },
        {
            "id": "200",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: ba53f6b3610821dc820936dde7b7803a54d20f5a\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:40.204086Z', iopub.status.busy: '2021-06-26T16:35:40.203576Z', iopub.status.idle: '2021-06-26T16:35:40.214041Z', shell.execute_reply: '2021-06-26T16:35:40.212929Z', shell.execute_reply.started: '2021-06-26T16:35:40.20393Z'}\n",
                "### Using the best parameters from the grid-search.\n",
                "logreg_grid = grid.best_estimator_\n",
                "logreg_grid.score(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2228\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "201",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "#### This part of the kernel is a working progress. Please check back again for future updates.####\n",
                "\n",
                "Resources:\n",
                "\n",
                "- [Confusion Matrix](https://www.youtube.com/watch?v=8Oog7TXHvFY)\n",
                "\n",
                "### Under-fitting & Over-fitting:\n",
                "\n",
                "So, we have our first model and its score. But, how do we make sure that our model is performing well. Our model may be overfitting or underfitting. In fact, for those of you don't know what overfitting and underfitting is, Let's find out.\n",
                "\n",
                "![](https://cdncontribute.geeksforgeeks.org/wp-content/uploads/fittings.jpg)\n",
                "\n",
                "As you see in the chart above. **Underfitting** is when the model fails to capture important aspects of the data and therefore introduces more bias and performs poorly. On the other hand, **Overfitting** is when the model performs too well on the training data but does poorly in the validation set or test sets. This situation is also known as having less bias but more variation and perform poorly as well. Ideally, we want to configure a model that performs well not only in the training data but also in the test data. This is where **bias-variance tradeoff** comes in. When we have a model that overfits, meaning less biased and more of variance, we introduce some bias in exchange of having much less variance. One particular tactic for this task is regularization models (Ridge, Lasso, Elastic Net). These models are built to deal with the bias-variance tradeoff. This [kernel](https://www.kaggle.com/dansbecker/underfitting-and-overfitting) explains this topic well. Also, the following chart gives us a mental picture of where we want our models to be.\n",
                "![](http://scott.fortmann-roe.com/docs/docs/BiasVariance/biasvariance.png)\n",
                "\n",
                "Ideally, we want to pick a sweet spot where the model performs well in training set, validation set, and test set. As the model gets complex, bias decreases, variance increases. However, the most critical part is the error rates. We want our models to be at the bottom of that **U** shape where the error rate is the least. That sweet spot is also known as **Optimum Model Complexity(OMC).**\n",
                "\n",
                "Now that we know what we want in terms of under-fitting and over-fitting, let's talk about how to combat them.\n",
                "\n",
                "How to combat over-fitting?\n",
                "\n",
                "<ul>\n",
                "    <li>Simplify the model by using less parameters.</li>\n",
                "    <li>Simplify the model by changing the hyperparameters.</li>\n",
                "    <li>Introducing regularization models. </li>\n",
                "    <li>Use more training data. </li>\n",
                "    <li>Gatter more data ( and gather better quality data). </li>\n",
                "    </ul>\n",
                " #### This part of the kernel is a working progress. Please check back again for future updates.####\n",
                "\n",
                "## 7b. K-Nearest Neighbor classifier(KNN)\n",
                "\n",
                "<a id=\"knn\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "202",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 953bc2c18b5fd93bcd51a42cc04a0539d86d5bac\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:40.216328Z', iopub.status.busy: '2021-06-26T16:35:40.215853Z', iopub.status.idle: '2021-06-26T16:35:40.416985Z', shell.execute_reply: '2021-06-26T16:35:40.416038Z', shell.execute_reply.started: '2021-06-26T16:35:40.216141Z'}\n",
                "## Importing the model.\n",
                "from sklearn.neighbors import KNeighborsClassifier\n",
                "## calling on the model oject.\n",
                "knn = KNeighborsClassifier(metric='minkowski', p=2)\n",
                "## knn classifier works by doing euclidian distance\n",
                "\n",
                "\n",
                "## doing 10 fold staratified-shuffle-split cross validation\n",
                "cv = StratifiedShuffleSplit(n_splits=10, test_size=.25, random_state=2)\n",
                "\n",
                "accuracies = cross_val_score(knn, X,y, cv = cv, scoring='accuracy')\n",
                "print (\"Cross-Validation accuracy scores:{}\".format(accuracies))\n",
                "print (\"Mean Cross-Validation accuracy score: {}\".format(round(accuracies.mean(),3)))"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "203",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "#### Manually find the best possible k value for KNN"
            ]
        },
        {
            "id": "204",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 9c0f44165e08f63ae5436180c5a7182e6db5c63f\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:40.418857Z', iopub.status.busy: '2021-06-26T16:35:40.418419Z', iopub.status.idle: '2021-06-26T16:35:46.541601Z', shell.execute_reply: '2021-06-26T16:35:46.540815Z', shell.execute_reply.started: '2021-06-26T16:35:40.418687Z'}\n",
                "## Search for an optimal value of k for KNN.\n",
                "k_range = range(1,31)\n",
                "k_scores = []\n",
                "for k in k_range:\n",
                "    knn = KNeighborsClassifier(n_neighbors=k)\n",
                "    scores = cross_val_score(knn, X,y, cv = cv, scoring = 'accuracy')\n",
                "    k_scores.append(scores.mean())\n",
                "print(\"Accuracy scores are: {}\\n\".format(k_scores))\n",
                "print (\"Mean accuracy score: {}\".format(np.mean(k_scores)))"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:2294:18\\nk_scores = []\\n#                ┌\\nfor k in k_range:\\n    knn = KNeighborsClassifier(n_neighbors=k)\\n#──┘ ── line break after `:` in range expression\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _uuid: 9c0f44165e08f63ae5436180c5a7182e6db5c63f\\n#| execution: {iopub.execute_input: '2021-06-26T16:35:40.418857Z', iopub.status.busy: '2021-06-26T16:35:40.418419Z', iopub.status.idle: '2021-06-26T16:35:46.541601Z', shell.execute_reply: '2021-06-26T16:35:46.540815Z', shell.execute_reply.started: '2021-06-26T16:35:40.418687Z'}\\n## Search for an optimal value of k for KNN.\\nk_range = range(1,31)\\nk_scores = []\\nfor k in k_range:\\n    knn = KNeighborsClassifier(n_neighbors=k)\\n    scores = cross_val_score(knn, X,y, cv = cv, scoring = 'accuracy')\\n    k_scores.append(scores.mean())\\nprint(\\\"Accuracy scores are: {}\\\\n\\\".format(k_scores))\\nprint (\\\"Mean accuracy score: {}\\\".format(np.mean(k_scores)))\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 2289, [1, 52, 331, 376, 398, 412, 430, 476, 546, 581, 633, 693]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(429, 433, :error, \"line break after `:` in range expression\"), Base.JuliaSyntax.Diagnostic(535, 542, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(638, 638, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(693, 692, :error, \"Expected `end`\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#2294:18\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:2294:18\u001b[0;0m\u001b]8;;\u001b\\",
                        "k_scores = []",
                        "\u001b[90m#                ┌\u001b[0;0m",
                        "for k in k_range:\u001b[48;2;120;70;70m\u001b[0;0m",
                        "\u001b[48;2;120;70;70m    \u001b[0;0mknn = KNeighborsClassifier(n_neighbors=k)",
                        "\u001b[90m#──┘ ── \u001b[0;0m\u001b[91mline break after `:` in range expression\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2294\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "205",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "206",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: e123680b431ba99d399fa8205c32bcfdc7cabd81\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:46.543234Z', iopub.status.busy: '2021-06-26T16:35:46.542789Z', iopub.status.idle: '2021-06-26T16:35:46.685143Z', shell.execute_reply: '2021-06-26T16:35:46.684141Z', shell.execute_reply.started: '2021-06-26T16:35:46.543184Z'}\n",
                "from matplotlib import pyplot as plt\n",
                "plt.plot(k_range, k_scores)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "207",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "### Grid search on KNN classifier"
            ]
        },
        {
            "id": "208",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 507e2a7cdb28a47be45ed247f1343c123a6b592b\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:46.687026Z', iopub.status.busy: '2021-06-26T16:35:46.686671Z', iopub.status.idle: '2021-06-26T16:35:55.465245Z', shell.execute_reply: '2021-06-26T16:35:55.464452Z', shell.execute_reply.started: '2021-06-26T16:35:46.686956Z'}\n",
                "from sklearn.model_selection import GridSearchCV\n",
                "## trying out multiple values for k\n",
                "k_range = range(1,31)\n",
                "##\n",
                "weights_options=['uniform','distance']\n",
                "#\n",
                "param = {'n_neighbors':k_range, 'weights':weights_options}\n",
                "## Using startifiedShufflesplit.\n",
                "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30, random_state=15)\n",
                "# estimator = knn, param_grid = param, n_jobs = -1 to instruct scikit learn to use all available processors.\n",
                "grid = GridSearchCV(KNeighborsClassifier(), param,cv=cv,verbose = False, n_jobs=-1)\n",
                "## Fitting the model.\n",
                "grid.fit(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "209",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "210",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: c710770daa6cf327dcc28e18b3ed180fabecd49b\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:55.466929Z', iopub.status.busy: '2021-06-26T16:35:55.466654Z', iopub.status.idle: '2021-06-26T16:35:55.475348Z', shell.execute_reply: '2021-06-26T16:35:55.474575Z', shell.execute_reply.started: '2021-06-26T16:35:55.466883Z'}\n",
                "print(grid.best_score_)\n",
                "print(grid.best_params_)\n",
                "print(grid.best_estimator_)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2332\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "211",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "#### Using best estimator from grid search using KNN."
            ]
        },
        {
            "id": "212",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: dd1fbf223c4ec9db65dde4924e2827e46029da1a\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:55.477181Z', iopub.status.busy: '2021-06-26T16:35:55.476629Z', iopub.status.idle: '2021-06-26T16:35:55.555736Z', shell.execute_reply: '2021-06-26T16:35:55.554788Z', shell.execute_reply.started: '2021-06-26T16:35:55.476983Z'}\n",
                "### Using the best parameters from the grid-search.\n",
                "knn_grid= grid.best_estimator_\n",
                "knn_grid.score(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2343\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "213",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "#### Using RandomizedSearchCV\n",
                "\n",
                "Randomized search is a close cousin of grid search. It doesn't always provide the best result but its fast."
            ]
        },
        {
            "id": "214",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: e159b267a57d7519fc0ee8b3d1e95b841d3daf60\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:35:55.557501Z', iopub.status.busy: '2021-06-26T16:35:55.557097Z', iopub.status.idle: '2021-06-26T16:36:02.332003Z', shell.execute_reply: '2021-06-26T16:36:02.331364Z', shell.execute_reply.started: '2021-06-26T16:35:55.557338Z'}\n",
                "from sklearn.model_selection import RandomizedSearchCV\n",
                "## trying out multiple values for k\n",
                "k_range = range(1,31)\n",
                "##\n",
                "weights_options=['uniform','distance']\n",
                "#\n",
                "param = {'n_neighbors':k_range, 'weights':weights_options}\n",
                "## Using startifiedShufflesplit.\n",
                "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30)\n",
                "# estimator = knn, param_grid = param, n_jobs = -1 to instruct scikit learn to use all available processors.\n",
                "## for RandomizedSearchCV,\n",
                "grid = RandomizedSearchCV(KNeighborsClassifier(), param,cv=cv,verbose = False, n_jobs=-1, n_iter=40)\n",
                "## Fitting the model.\n",
                "grid.fit(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "215",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "216",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: c58492525dd18659ef9f9c774ee7601a55e96f36\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:36:02.333632Z', iopub.status.busy: '2021-06-26T16:36:02.333341Z', iopub.status.idle: '2021-06-26T16:36:02.340211Z', shell.execute_reply: '2021-06-26T16:36:02.338113Z', shell.execute_reply.started: '2021-06-26T16:36:02.333572Z'}\n",
                "print (grid.best_score_)\n",
                "print (grid.best_params_)\n",
                "print(grid.best_estimator_)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:2373:6\\n#| execution: {iopub.execute_input: '2021-06-26T16:36:02.333632Z', iopub.status.busy: '2021-06-26T16:36:02.333341Z', iopub.status.idle: '2021-06-26T16:36:02.340211Z', shell.execute_reply: '2021-06-26T16:36:02.338113Z', shell.execute_reply.started: '2021-06-26T16:36:02.333572Z'}\\nprint (grid.best_score_)\\n#    ╙ ── whitespace is not allowed here\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _uuid: c58492525dd18659ef9f9c774ee7601a55e96f36\\n#| execution: {iopub.execute_input: '2021-06-26T16:36:02.333632Z', iopub.status.busy: '2021-06-26T16:36:02.333341Z', iopub.status.idle: '2021-06-26T16:36:02.340211Z', shell.execute_reply: '2021-06-26T16:36:02.338113Z', shell.execute_reply.started: '2021-06-26T16:36:02.333572Z'}\\nprint (grid.best_score_)\\nprint (grid.best_params_)\\nprint(grid.best_estimator_)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 2371, [1, 52, 331, 356, 382, 410]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(336, 336, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(361, 361, :error, \"whitespace is not allowed here\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#2373:6\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:2373:6\u001b[0;0m\u001b]8;;\u001b\\",
                        "#| execution: {iopub.execute_input: '2021-06-26T16:36:02.333632Z', iopub.status.busy: '2021-06-26T16:36:02.333341Z', iopub.status.idle: '2021-06-26T16:36:02.340211Z', shell.execute_reply: '2021-06-26T16:36:02.338113Z', shell.execute_reply.started: '2021-06-26T16:36:02.333572Z'}",
                        "print\u001b[48;2;120;70;70m \u001b[0;0m(grid.best_score_)",
                        "\u001b[90m#    ╙ ── \u001b[0;0m\u001b[91mwhitespace is not allowed here\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2373\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "217",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "218",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 6fb31588585d50de773ba0db6c378363841a5313\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:36:02.343117Z', iopub.status.busy: '2021-06-26T16:36:02.34256Z', iopub.status.idle: '2021-06-26T16:36:02.420683Z', shell.execute_reply: '2021-06-26T16:36:02.419712Z', shell.execute_reply.started: '2021-06-26T16:36:02.342922Z'}\n",
                "### Using the best parameters from the grid-search.\n",
                "knn_ran_grid = grid.best_estimator_\n",
                "knn_ran_grid.score(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2382\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "219",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Gaussian Naive Bayes\n",
                "\n",
                "<a id=\"gaussian_naive\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "220",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 8b2435030dbef1303bfc2864d227f5918f359330\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:36:02.422487Z', iopub.status.busy: '2021-06-26T16:36:02.421997Z', iopub.status.idle: '2021-06-26T16:36:02.433216Z', shell.execute_reply: '2021-06-26T16:36:02.43234Z', shell.execute_reply.started: '2021-06-26T16:36:02.422237Z'}\n",
                "# Gaussian Naive Bayes\n",
                "from sklearn.naive_bayes import GaussianNB\n",
                "from sklearn.metrics import accuracy_score\n",
                "\n",
                "gaussian = GaussianNB()\n",
                "gaussian.fit(X, y)\n",
                "y_pred = gaussian.predict(X_test)\n",
                "gaussian_accy = round(accuracy_score(y_pred, y_test), 3)\n",
                "print(gaussian_accy)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "221",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Support Vector Machines(SVM)\n",
                "\n",
                "<a id=\"svm\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "222",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 56895672215b0b6365c6aaa10e446216ef635f53\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:36:02.435838Z', iopub.status.busy: '2021-06-26T16:36:02.435282Z', iopub.status.idle: '2021-06-26T16:37:25.882123Z', shell.execute_reply: '2021-06-26T16:37:25.881483Z', shell.execute_reply.started: '2021-06-26T16:36:02.435553Z'}\n",
                "from sklearn.svm import SVC\n",
                "Cs = [0.001, 0.01, 0.1, 1,1.5,2,2.5,3,4,5, 10] ## penalty parameter C for the error term.\n",
                "gammas = [0.0001,0.001, 0.01, 0.1, 1]\n",
                "param_grid = {'C': Cs, 'gamma' : gammas}\n",
                "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30, random_state=15)\n",
                "grid_search = GridSearchCV(SVC(kernel = 'rbf', probability=True), param_grid, cv=cv) ## 'rbf' stands for gaussian kernel\n",
                "grid_search.fit(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "223",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "224",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: 4108264ea5d18e3d3fa38a30584a032c734d6d49\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:37:25.8839Z', iopub.status.busy: '2021-06-26T16:37:25.883609Z', iopub.status.idle: '2021-06-26T16:37:25.890029Z', shell.execute_reply: '2021-06-26T16:37:25.889244Z', shell.execute_reply.started: '2021-06-26T16:37:25.883852Z'}\n",
                "print(grid_search.best_score_)\n",
                "print(grid_search.best_params_)\n",
                "print(grid_search.best_estimator_)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid_search, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid_search` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2427\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "225",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "226",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: db18a3b5475f03b21a039e31e4962c43f7caffdc\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:37:25.892123Z', iopub.status.busy: '2021-06-26T16:37:25.891542Z', iopub.status.idle: '2021-06-26T16:37:25.934216Z', shell.execute_reply: '2021-06-26T16:37:25.933352Z', shell.execute_reply.started: '2021-06-26T16:37:25.892073Z'}\n",
                "# using the best found hyper paremeters to get the score.\n",
                "svm_grid = grid_search.best_estimator_\n",
                "svm_grid.score(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid_search, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid_search` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2436\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "227",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Decision Tree Classifier\n",
                "\n",
                "Decision tree works by breaking down the dataset into small subsets. This breaking down process is done by asking questions about the features of the datasets. The idea is to unmix the labels by asking fewer questions necessary. As we ask questions, we are breaking down the dataset into more subsets. Once we have a subgroup with only the unique type of labels, we end the tree in that node. If you would like to get a detailed understanding of Decision tree classifier, please take a look at [this](https://www.kaggle.com/masumrumi/decision-tree-with-titanic-dataset) kernel."
            ]
        },
        {
            "id": "228",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 38c90de9-d2e9-4341-a378-a854762d8be2\n",
                "#| _uuid: 18efb62b713591d1512010536ff10d9f6a91ec11\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:37:25.936111Z', iopub.status.busy: '2021-06-26T16:37:25.935654Z', iopub.status.idle: '2021-06-26T16:37:57.983942Z', shell.execute_reply: '2021-06-26T16:37:57.983035Z', shell.execute_reply.started: '2021-06-26T16:37:25.935918Z'}\n",
                "from sklearn.tree import DecisionTreeClassifier\n",
                "max_depth = range(1,30)\n",
                "max_feature = [21,22,23,24,25,26,28,29,30,'auto']\n",
                "criterion=[\"entropy\", \"gini\"]\n",
                "\n",
                "param = {'max_depth':max_depth,\n",
                "         'max_features':max_feature,\n",
                "         'criterion': criterion}\n",
                "grid = GridSearchCV(DecisionTreeClassifier(),\n",
                "                                param_grid = param,\n",
                "                                 verbose=False,\n",
                "                                 cv=StratifiedKFold(n_splits=20, random_state=15, shuffle=True),\n",
                "                                n_jobs = -1)\n",
                "grid.fit(X, y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "229",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "230",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: b2222e4e-f5f2-4601-b95f-506d7811610a\n",
                "#| _uuid: b0fb5055e6b4a7fb69ef44f669c4df693ce46212\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:37:57.988346Z', iopub.status.busy: '2021-06-26T16:37:57.988045Z', iopub.status.idle: '2021-06-26T16:37:57.994617Z', shell.execute_reply: '2021-06-26T16:37:57.993662Z', shell.execute_reply.started: '2021-06-26T16:37:57.988287Z'}\n",
                "#| scrolled: true\n",
                "print( grid.best_params_)\n",
                "print (grid.best_score_)\n",
                "print (grid.best_estimator_)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2469\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "231",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "232",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: d731079a-31b4-429a-8445-48597bb2639d\n",
                "#| _uuid: 76c26437d374442826ef140574c5c4880ae1e853\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:37:57.996876Z', iopub.status.busy: '2021-06-26T16:37:57.996238Z', iopub.status.idle: '2021-06-26T16:37:58.010892Z', shell.execute_reply: '2021-06-26T16:37:58.010194Z', shell.execute_reply.started: '2021-06-26T16:37:57.996695Z'}\n",
                "dectree_grid = grid.best_estimator_\n",
                "## using the best found hyper paremeters to get the score.\n",
                "dectree_grid.score(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2478\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "233",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                " <h4> Let's look at the feature importance from decision tree grid.</h4>"
            ]
        },
        {
            "id": "234",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:37:58.013756Z', iopub.status.busy: '2021-06-26T16:37:58.01221Z', iopub.status.idle: '2021-06-26T16:37:58.034194Z', shell.execute_reply: '2021-06-26T16:37:58.033436Z', shell.execute_reply.started: '2021-06-26T16:37:58.013683Z'}\n",
                "## feature importance\n",
                "feature_importances = pd.DataFrame(dectree_grid.feature_importances_,\n",
                "                                   index = column_names,\n",
                "                                    columns=['importance'])\n",
                "feature_importances.sort_values(by='importance', ascending=False).head(10)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:2490:47\\n                                   index = column_names,\\n                                    columns=['importance'])\\n#                                             └────────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| execution: {iopub.execute_input: '2021-06-26T16:37:58.013756Z', iopub.status.busy: '2021-06-26T16:37:58.01221Z', iopub.status.idle: '2021-06-26T16:37:58.034194Z', shell.execute_reply: '2021-06-26T16:37:58.033436Z', shell.execute_reply.started: '2021-06-26T16:37:58.013683Z'}\\n## feature importance\\nfeature_importances = pd.DataFrame(dectree_grid.feature_importances_,\\n                                   index = column_names,\\n                                    columns=['importance'])\\nfeature_importances.sort_values(by='importance', ascending=False).head(10)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 2486, [1, 279, 301, 371, 428, 488, 563]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(474, 483, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(524, 533, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#2490:47\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:2490:47\u001b[0;0m\u001b]8;;\u001b\\",
                        "                                   index = column_names,",
                        "                                    columns=['\u001b[48;2;120;70;70mimportance\u001b[0;0m'])",
                        "\u001b[90m#                                             └────────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2490\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "235",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "These are the top 10 features determined by **Decision Tree** helped classifing the fates of many passenger on Titanic on that night.\n",
                "\n",
                "## 7f. Random Forest Classifier\n",
                "\n",
                "<a id=\"random_forest\"></a>\n",
                "\n",
                "I admire working with decision trees because of the potential and basics they provide towards building a more complex model like Random Forest(RF). RF is an ensemble method (combination of many decision trees) which is where the \"forest\" part comes in. One crucial details about Random Forest is that while using a forest of decision trees, RF model <b>takes random subsets of the original dataset(bootstrapped)</b> and <b>random subsets of the variables(features/columns)</b>. Using this method, the RF model creates 100's-1000's(the amount can be menually determined) of a wide variety of decision trees. This variety makes the RF model more effective and accurate. We then run each test data point through all of these 100's to 1000's of decision trees or the RF model and take a vote on the output."
            ]
        },
        {
            "id": "236",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:37:58.040453Z', iopub.status.busy: '2021-06-26T16:37:58.038063Z', iopub.status.idle: '2021-06-26T16:39:53.557817Z', shell.execute_reply: '2021-06-26T16:39:53.556973Z', shell.execute_reply.started: '2021-06-26T16:37:58.040398Z'}\n",
                "from sklearn.model_selection import GridSearchCV, StratifiedKFold, StratifiedShuffleSplit\n",
                "from sklearn.ensemble import RandomForestClassifier\n",
                "n_estimators = [140,145,150,155,160];\n",
                "max_depth = range(1,10);\n",
                "criterions = ['gini', 'entropy'];\n",
                "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30, random_state=15)\n",
                "\n",
                "\n",
                "parameters = {'n_estimators':n_estimators,\n",
                "              'max_depth':max_depth,\n",
                "              'criterion': criterions\n",
                "\n",
                "        }\n",
                "grid = GridSearchCV(estimator=RandomForestClassifier(max_features='auto'),\n",
                "                                 param_grid=parameters,\n",
                "                                 cv=cv,\n",
                "                                 n_jobs = -1)\n",
                "grid.fit(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "237",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "238",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:39:53.559492Z', iopub.status.busy: '2021-06-26T16:39:53.559192Z', iopub.status.idle: '2021-06-26T16:39:53.567897Z', shell.execute_reply: '2021-06-26T16:39:53.56675Z', shell.execute_reply.started: '2021-06-26T16:39:53.559434Z'}\n",
                "print (grid.best_score_)\n",
                "print (grid.best_params_)\n",
                "print (grid.best_estimator_)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:2526:6\\n#| execution: {iopub.execute_input: '2021-06-26T16:39:53.559492Z', iopub.status.busy: '2021-06-26T16:39:53.559192Z', iopub.status.idle: '2021-06-26T16:39:53.567897Z', shell.execute_reply: '2021-06-26T16:39:53.56675Z', shell.execute_reply.started: '2021-06-26T16:39:53.559434Z'}\\nprint (grid.best_score_)\\n#    ╙ ── whitespace is not allowed here\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| execution: {iopub.execute_input: '2021-06-26T16:39:53.559492Z', iopub.status.busy: '2021-06-26T16:39:53.559192Z', iopub.status.idle: '2021-06-26T16:39:53.567897Z', shell.execute_reply: '2021-06-26T16:39:53.56675Z', shell.execute_reply.started: '2021-06-26T16:39:53.559434Z'}\\nprint (grid.best_score_)\\nprint (grid.best_params_)\\nprint (grid.best_estimator_)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 2525, [1, 279, 304, 330, 359]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(284, 284, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(309, 309, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(335, 335, :error, \"whitespace is not allowed here\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#2526:6\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:2526:6\u001b[0;0m\u001b]8;;\u001b\\",
                        "#| execution: {iopub.execute_input: '2021-06-26T16:39:53.559492Z', iopub.status.busy: '2021-06-26T16:39:53.559192Z', iopub.status.idle: '2021-06-26T16:39:53.567897Z', shell.execute_reply: '2021-06-26T16:39:53.56675Z', shell.execute_reply.started: '2021-06-26T16:39:53.559434Z'}",
                        "print\u001b[48;2;120;70;70m \u001b[0;0m(grid.best_score_)",
                        "\u001b[90m#    ╙ ── \u001b[0;0m\u001b[91mwhitespace is not allowed here\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2526\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "239",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "240",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:39:53.570209Z', iopub.status.busy: '2021-06-26T16:39:53.56951Z', iopub.status.idle: '2021-06-26T16:39:53.600458Z', shell.execute_reply: '2021-06-26T16:39:53.599531Z', shell.execute_reply.started: '2021-06-26T16:39:53.569928Z'}\n",
                "rf_grid = grid.best_estimator_\n",
                "rf_grid.score(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2533\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "241",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "242",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:39:53.602628Z', iopub.status.busy: '2021-06-26T16:39:53.602028Z', iopub.status.idle: '2021-06-26T16:39:53.613347Z', shell.execute_reply: '2021-06-26T16:39:53.612229Z', shell.execute_reply.started: '2021-06-26T16:39:53.602297Z'}\n",
                "from sklearn.metrics import classification_report\n",
                "# Print classification report for y_test\n",
                "print(classification_report(y_test, y_pred, labels=rf_grid.classes_))"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "243",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Feature Importance"
            ]
        },
        {
            "id": "244",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _kg_hide-input: true\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:39:53.615537Z', iopub.status.busy: '2021-06-26T16:39:53.614947Z', iopub.status.idle: '2021-06-26T16:39:53.637392Z', shell.execute_reply: '2021-06-26T16:39:53.63647Z', shell.execute_reply.started: '2021-06-26T16:39:53.615192Z'}\n",
                "## feature importance\n",
                "feature_importances = pd.DataFrame(rf_grid.feature_importances_,\n",
                "                                   index = column_names,\n",
                "                                    columns=['importance'])\n",
                "feature_importances.sort_values(by='importance', ascending=False).head(10)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:2553:47\\n                                   index = column_names,\\n                                    columns=['importance'])\\n#                                             └────────┘ ── character literal contains multiple characters\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| _kg_hide-input: true\\n#| execution: {iopub.execute_input: '2021-06-26T16:39:53.615537Z', iopub.status.busy: '2021-06-26T16:39:53.614947Z', iopub.status.idle: '2021-06-26T16:39:53.637392Z', shell.execute_reply: '2021-06-26T16:39:53.63647Z', shell.execute_reply.started: '2021-06-26T16:39:53.615192Z'}\\n## feature importance\\nfeature_importances = pd.DataFrame(rf_grid.feature_importances_,\\n                                   index = column_names,\\n                                    columns=['importance'])\\nfeature_importances.sort_values(by='importance', ascending=False).head(10)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 2548, [1, 25, 303, 325, 390, 447, 507, 582]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(493, 502, :error, \"character literal contains multiple characters\"), Base.JuliaSyntax.Diagnostic(543, 552, :error, \"character literal contains multiple characters\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#2553:47\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:2553:47\u001b[0;0m\u001b]8;;\u001b\\",
                        "                                   index = column_names,",
                        "                                    columns=['\u001b[48;2;120;70;70mimportance\u001b[0;0m'])",
                        "\u001b[90m#                                             └────────┘ ── \u001b[0;0m\u001b[91mcharacter literal contains multiple characters\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2553\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "245",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "<h3>Why Random Forest?(Pros and Cons)</h3>\n",
                "\n",
                "---\n",
                "\n",
                "<h2>Introducing Ensemble Learning</h2>\n",
                "In statistics and machine learning, ensemble methods use multiple learning algorithms to obtain better predictive performance than could be obtained from any of the constituent learning algorithms alone.\n",
                "\n",
                "There are two types of ensemple learnings.\n",
                "\n",
                "**Bagging/Averaging Methods**\n",
                "\n",
                "> In averaging methods, the driving principle is to build several estimators independently and then to average their predictions. On average, the combined estimator is usually better than any of the single base estimator because its variance is reduced.\n",
                "\n",
                "**Boosting Methods**\n",
                "\n",
                "> The other family of ensemble methods are boosting methods, where base estimators are built sequentially and one tries to reduce the bias of the combined estimator. The motivation is to combine several weak models to produce a powerful ensemble.\n",
                "\n",
                "<h4 align=\"right\">Source:GA</h4>\n",
                "\n",
                "Resource: <a href=\"https://towardsdatascience.com/ensemble-methods-bagging-boosting-and-stacking-c9214a10a205\">Ensemble methods: bagging, boosting and stacking</a>\n",
                "\n",
                "---\n",
                "\n",
                "## 7g. Bagging Classifier\n",
                "\n",
                "<a id=\"bagging\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "<a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.BaggingClassifier.html\">Bagging Classifier</a>(Bootstrap Aggregating) is the ensemble method that involves manipulating the training set by resampling and running algorithms on it. Let's do a quick review:\n",
                "\n",
                "- Bagging classifier uses a process called bootstrapped dataset to create multiple datasets from one original dataset and runs algorithm on each one of them. Here is an image to show how bootstrapped dataset works.\n",
                "<img src=\"https://uc-r.github.io/public/images/analytics/bootstrap/bootstrap.png\" width=\"600\">\n",
                "<h4 align=\"center\">Resampling from original dataset to bootstrapped datasets</h4>\n",
                "<h4 align=\"right\">Source: https://uc-r.github.io</h4>\n",
                "\n",
                "- After running a learning algorithm on each one of the bootstrapped datasets, all models are combined by taking their average. the test data/new data then go through this averaged classifier/combined classifier and predict the output.\n",
                "\n",
                "Here is an image to make it clear on how bagging works,\n",
                "<img src=\"https://prachimjoshi.files.wordpress.com/2015/07/screen_shot_2010-12-03_at_5-46-21_pm.png\" width=\"600\">\n",
                "\n",
                "<h4 align=\"right\">Source: https://prachimjoshi.files.wordpress.com</h4>\n",
                "Please check out [this](https://www.kaggle.com/masumrumi/bagging-with-titanic-dataset) kernel if you want to find out more about bagging classifier."
            ]
        },
        {
            "id": "246",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:39:53.639198Z', iopub.status.busy: '2021-06-26T16:39:53.63871Z', iopub.status.idle: '2021-06-26T16:40:17.162923Z', shell.execute_reply: '2021-06-26T16:40:17.162277Z', shell.execute_reply.started: '2021-06-26T16:39:53.638945Z'}\n",
                "from sklearn.ensemble import BaggingClassifier\n",
                "n_estimators = [10,30,50,70,80,150,160, 170,175,180,185];\n",
                "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30, random_state=15)\n",
                "\n",
                "parameters = {'n_estimators':n_estimators,\n",
                "\n",
                "        }\n",
                "grid = GridSearchCV(BaggingClassifier(base_estimator= None, ## If None, then the base estimator is a decision tree.\n",
                "                                      bootstrap_features=False),\n",
                "                                 param_grid=parameters,\n",
                "                                 cv=cv,\n",
                "                                 n_jobs = -1)\n",
                "grid.fit(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "247",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "248",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:40:17.164621Z', iopub.status.busy: '2021-06-26T16:40:17.164322Z', iopub.status.idle: '2021-06-26T16:40:17.172911Z', shell.execute_reply: '2021-06-26T16:40:17.172302Z', shell.execute_reply.started: '2021-06-26T16:40:17.164559Z'}\n",
                "print (grid.best_score_)\n",
                "print (grid.best_params_)\n",
                "print (grid.best_estimator_)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:2620:6\\n#| execution: {iopub.execute_input: '2021-06-26T16:40:17.164621Z', iopub.status.busy: '2021-06-26T16:40:17.164322Z', iopub.status.idle: '2021-06-26T16:40:17.172911Z', shell.execute_reply: '2021-06-26T16:40:17.172302Z', shell.execute_reply.started: '2021-06-26T16:40:17.164559Z'}\\nprint (grid.best_score_)\\n#    ╙ ── whitespace is not allowed here\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| execution: {iopub.execute_input: '2021-06-26T16:40:17.164621Z', iopub.status.busy: '2021-06-26T16:40:17.164322Z', iopub.status.idle: '2021-06-26T16:40:17.172911Z', shell.execute_reply: '2021-06-26T16:40:17.172302Z', shell.execute_reply.started: '2021-06-26T16:40:17.164559Z'}\\nprint (grid.best_score_)\\nprint (grid.best_params_)\\nprint (grid.best_estimator_)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 2619, [1, 280, 305, 331, 360]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(285, 285, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(310, 310, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(336, 336, :error, \"whitespace is not allowed here\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#2620:6\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:2620:6\u001b[0;0m\u001b]8;;\u001b\\",
                        "#| execution: {iopub.execute_input: '2021-06-26T16:40:17.164621Z', iopub.status.busy: '2021-06-26T16:40:17.164322Z', iopub.status.idle: '2021-06-26T16:40:17.172911Z', shell.execute_reply: '2021-06-26T16:40:17.172302Z', shell.execute_reply.started: '2021-06-26T16:40:17.164559Z'}",
                        "print\u001b[48;2;120;70;70m \u001b[0;0m(grid.best_score_)",
                        "\u001b[90m#    ╙ ── \u001b[0;0m\u001b[91mwhitespace is not allowed here\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2620\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "249",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "250",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:40:17.174968Z', iopub.status.busy: '2021-06-26T16:40:17.174466Z', iopub.status.idle: '2021-06-26T16:40:17.226122Z', shell.execute_reply: '2021-06-26T16:40:17.225161Z', shell.execute_reply.started: '2021-06-26T16:40:17.174765Z'}\n",
                "bagging_grid = grid.best_estimator_\n",
                "bagging_grid.score(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2627\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "251",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "<h3>Why use Bagging? (Pros and cons)</h3>\n",
                "Bagging works best with strong and complex models(for example, fully developed decision trees). However, don't let that fool you to thinking that similar to a decision tree, bagging also overfits the model. Instead, bagging reduces overfitting since a lot of the sample training data are repeated and used to create base estimators. With a lot of equally likely training data, bagging is not very susceptible to overfitting with noisy data, therefore reduces variance. However, the downside is that this leads to an increase in bias.\n",
                "\n",
                "<h4>Random Forest VS. Bagging Classifier</h4>\n",
                "\n",
                "If some of you are like me, you may find Random Forest to be similar to Bagging Classifier. However, there is a fundamental difference between these two which is **Random Forests ability to pick subsets of features in each node.** I will elaborate on this in a future update.\n",
                "\n",
                "## 7h. AdaBoost Classifier\n",
                "\n",
                "<a id=\"AdaBoost\"></a>\n",
                "\n",
                "---\n",
                "\n",
                "AdaBoost is another <b>ensemble model</b> and is quite different than Bagging. Let's point out the core concepts.\n",
                "\n",
                "> AdaBoost combines a lot of \"weak learners\"(they are also called stump; a tree with only one node and two leaves) to make classifications.\n",
                "\n",
                "> This base model fitting is an iterative process where each stump is chained one after the other; <b>It cannot run in parallel.</b>\n",
                "\n",
                "> <b>Some stumps get more say in the final classifications than others.</b> The models use weights that are assigned to each data point/raw indicating their \"importance.\" Samples with higher weight have a higher influence on the total error of the next model and gets more priority. The first stump starts with uniformly distributed weight which means, in the beginning, every datapoint have an equal amount of weights.\n",
                "\n",
                "> <b>Each stump is made by talking the previous stump's mistakes into account.</b> After each iteration weights gets re-calculated in order to take the errors/misclassifications from the last stump into consideration.\n",
                "\n",
                "> The final prediction is typically constructed by a weighted vote where weights for each base model depends on their training errors or misclassification rates.\n",
                "\n",
                "To illustrate what we have talked about so far let's look at the following visualization.\n",
                "\n",
                "<img src=\"https://cdn-images-1.medium.com/max/1600/0*paPv7vXuq4eBHZY7.png\">\n",
                "<h5 align=\"right\"> Source: Diogo(Medium)</h5>\n",
                "\n",
                "Let's dive into each one of the nitty-gritty stuff about AdaBoost:\n",
                "\n",
                "---\n",
                "\n",
                "> <b>First</b>, we determine the best feature to split the dataset using Gini index(basics from decision tree). The feature with the lowest Gini index becomes the first stump in the AdaBoost stump chain(the lower the Gini index is, the better unmixed the label is, therefore, better split).\n",
                "\n",
                "---\n",
                "\n",
                "> <b>Secondly</b>, we need to determine how much say a stump will have in the final classification and how we can calculate that.\n",
                "\n",
                "- We learn how much say a stump has in the final classification by calculating how well it classified the samples (aka calculate the total error of the weight).\n",
                "- The <b>Total Error</b> for a stump is the sum of the weights associated with the incorrectly classified samples. For example, lets say, we start a stump with 10 datasets. The first stump will uniformly distribute an weight amoung all the datapoints. Which means each data point will have 1/10 weight. Let's say once the weight is distributed we run the model and find 2 incorrect predicitons. In order to calculate the total erorr we add up all the misclassified weights. Here we get 1/10 + 1/10 = 2/10 or 1/5. This is our total error. We can also think about it\n",
                "\n",
                "$$ \\epsilon_t = \\frac{\\text{misclassifications}\\_t}{\\text{observations}\\_t} $$\n",
                "\n",
                "- Since the weight is uniformly distributed(all add up to 1) among all data points, the total error will always be between 0(perfect stump) and 1(horrible stump).\n",
                "- We use the total error to determine the amount of say a stump has in the final classification using the following formula\n",
                "\n",
                "$$ \\alpha_t = \\frac{1}{2}ln \\left(\\frac{1-\\epsilon_t}{\\epsilon_t}\\right) \\text{where } \\epsilon_t < 1$$\n",
                "\n",
                "Where $\\epsilon_t$ is the misclassification rate for the current classifier:\n",
                "\n",
                "$$ \\epsilon_t = \\frac{\\text{misclassifications}\\_t}{\\text{observations}\\_t} $$\n",
                "\n",
                "Here...\n",
                "\n",
                "- $\\alpha_t$ = Amount of Say\n",
                "- $\\epsilon_t$ = Total error\n",
                "\n",
                "We can draw a graph to determine the amount of say using the value of total error(0 to 1)\n",
                "\n",
                "<img src=\"http://chrisjmccormick.files.wordpress.com/2013/12/adaboost_alphacurve.png\">\n",
                "<h5 align=\"right\"> Source: Chris McCormick</h5>\n",
                "\n",
                "- The blue line tells us the amount of say for <b>Total Error(Error rate)</b> between 0 and 1.\n",
                "- When the stump does a reasonably good job, and the <b>total error</b> is minimal, then the <b>amount of say(Alpha)</b> is relatively large, and the alpha value is positive.\n",
                "- When the stump does an average job(similar to a coin flip/the ratio of getting correct and incorrect ~50%/50%), then the <b>total error</b> is ~0.5. In this case the <b>amount of say</b> is <b>0</b>.\n",
                "- When the error rate is high let's say close to 1, then the <b>amount of say</b> will be negative, which means if the stump outputs a value as \"survived\" the included weight will turn that value into \"not survived.\"\n",
                "\n",
                "P.S. If the <b>Total Error</b> is 1 or 0, then this equation will freak out. A small amount of error is added to prevent this from happening.\n",
                "\n",
                "---\n",
                "\n",
                "> <b>Third</b>, We need to learn how to modify the weights so that the next stump will take the errors that the current stump made into account. The pseducode for calculating the new sample weight is as follows.\n",
                "\n",
                "$$ New Sample Weight = Sample Weight + e^{\\alpha_t}$$\n",
                "\n",
                "Here the $\\alpha_t(AmountOfSay)$ can be positive or negative depending whether the sample was correctly classified or misclassified by the current stump. We want to increase the sample weight of the misclassified samples; hinting the next stump to put more emphasize on those. Inversely, we want to decrease the sample weight of the correctly classified samples; hinting the next stump to put less emphasize on those.\n",
                "\n",
                "The following equation help us to do this calculation.\n",
                "\n",
                "$$ D\\_{t+1}(i) = D_t(i) e^{-\\alpha_t y_i h_t(x_i)} $$\n",
                "\n",
                "Here,\n",
                "\n",
                "- $D_{t+1}(i)$ = New Sample Weight.\n",
                "- $D_t(i)$ = Current Sample weight.\n",
                "- $\\alpha_t$ = Amount of Say, alpha value, this is the coefficient that gets updated in each iteration and\n",
                "- $y_i h_t(x_i)$ = place holder for 1 if stump correctly classified, -1 if misclassified.\n",
                "\n",
                "Finally, we put together the combined classifier, which is\n",
                "\n",
                "$$ AdaBoost(X) = sign\\left(\\sum\\_{t=1}^T\\alpha_t h_t(X)\\right) $$\n",
                "\n",
                "Here,\n",
                "\n",
                "$AdaBoost(X)$ is the classification predictions for $y$ using predictor matrix $X$\n",
                "\n",
                "$T$ is the set of \"weak learners\"\n",
                "\n",
                "$\\alpha_t$ is the contribution weight for weak learner $t$\n",
                "\n",
                "$h_t(X)$ is the prediction of weak learner $t$\n",
                "\n",
                "and $y$ is binary **with values -1 and 1**\n",
                "\n",
                "P.S. Since the stump barely captures essential specs about the dataset, the model is highly biased in the beginning. However, as the chain of stumps continues and at the end of the process, AdaBoost becomes a strong tree and reduces both bias and variance.\n",
                "\n",
                "<h3>Resources:</h3>\n",
                "<ul>\n",
                "    <li><a href=\"https://www.youtube.com/watch?v=LsK-xG1cLYA\">Statquest</a></li>\n",
                "    <li><a href=\"https://www.youtube.com/watch?v=-DUxtdeCiB4\">Principles of Machine Learning | AdaBoost(Video)</a></li>\n",
                "</ul>"
            ]
        },
        {
            "id": "252",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:40:17.227822Z', iopub.status.busy: '2021-06-26T16:40:17.227396Z', iopub.status.idle: '2021-06-26T16:41:28.311627Z', shell.execute_reply: '2021-06-26T16:41:28.311009Z', shell.execute_reply.started: '2021-06-26T16:40:17.227656Z'}\n",
                "from sklearn.ensemble import AdaBoostClassifier\n",
                "n_estimators = [100,140,145,150,160, 170,175,180,185];\n",
                "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30, random_state=15)\n",
                "learning_r = [0.1,1,0.01,0.5]\n",
                "\n",
                "parameters = {'n_estimators':n_estimators,\n",
                "              'learning_rate':learning_r\n",
                "\n",
                "        }\n",
                "grid = GridSearchCV(AdaBoostClassifier(base_estimator= None, ## If None, then the base estimator is a decision tree.\n",
                "                                     ),\n",
                "                                 param_grid=parameters,\n",
                "                                 cv=cv,\n",
                "                                 n_jobs = -1)\n",
                "grid.fit(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "253",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "254",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:28.313135Z', iopub.status.busy: '2021-06-26T16:41:28.31287Z', iopub.status.idle: '2021-06-26T16:41:28.318909Z', shell.execute_reply: '2021-06-26T16:41:28.318191Z', shell.execute_reply.started: '2021-06-26T16:41:28.313088Z'}\n",
                "print (grid.best_score_)\n",
                "print (grid.best_params_)\n",
                "print (grid.best_estimator_)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "Base.Meta.ParseError",
                    "evalue": "Base.Meta.ParseError(\"ParseError:\\n# Error @ C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd:2766:6\\n#| execution: {iopub.execute_input: '2021-06-26T16:41:28.313135Z', iopub.status.busy: '2021-06-26T16:41:28.31287Z', iopub.status.idle: '2021-06-26T16:41:28.318909Z', shell.execute_reply: '2021-06-26T16:41:28.318191Z', shell.execute_reply.started: '2021-06-26T16:41:28.313088Z'}\\nprint (grid.best_score_)\\n#    ╙ ── whitespace is not allowed here\", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile(\"#| execution: {iopub.execute_input: '2021-06-26T16:41:28.313135Z', iopub.status.busy: '2021-06-26T16:41:28.31287Z', iopub.status.idle: '2021-06-26T16:41:28.318909Z', shell.execute_reply: '2021-06-26T16:41:28.318191Z', shell.execute_reply.started: '2021-06-26T16:41:28.313088Z'}\\nprint (grid.best_score_)\\nprint (grid.best_params_)\\nprint (grid.best_estimator_)\\n\", 0, \"C:\\\\Users\\\\Fabrizio\\\\Documents\\\\Projects\\\\Estudio-IA\\\\dia10\\\\julia-titanic-notebook\\\\julia-titanic-wokflow.qmd\", 2765, [1, 279, 304, 330, 359]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(284, 284, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(309, 309, :error, \"whitespace is not allowed here\"), Base.JuliaSyntax.Diagnostic(335, 335, :error, \"whitespace is not allowed here\")], :none))",
                    "traceback": [
                        "ParseError:",
                        "\u001b[90m# Error @ \u001b[0;0m\u001b]8;;file://C:/Users/Fabrizio/Documents/Projects/Estudio-IA/dia10/julia-titanic-notebook/julia-titanic-wokflow.qmd#2766:6\u001b\\\u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd:2766:6\u001b[0;0m\u001b]8;;\u001b\\",
                        "#| execution: {iopub.execute_input: '2021-06-26T16:41:28.313135Z', iopub.status.busy: '2021-06-26T16:41:28.31287Z', iopub.status.idle: '2021-06-26T16:41:28.318909Z', shell.execute_reply: '2021-06-26T16:41:28.318191Z', shell.execute_reply.started: '2021-06-26T16:41:28.313088Z'}",
                        "print\u001b[48;2;120;70;70m \u001b[0;0m(grid.best_score_)",
                        "\u001b[90m#    ╙ ── \u001b[0;0m\u001b[91mwhitespace is not allowed here\u001b[0;0m",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2766\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "255",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "256",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:28.320845Z', iopub.status.busy: '2021-06-26T16:41:28.320267Z', iopub.status.idle: '2021-06-26T16:41:28.35912Z', shell.execute_reply: '2021-06-26T16:41:28.358535Z', shell.execute_reply.started: '2021-06-26T16:41:28.320797Z'}\n",
                "adaBoost_grid = grid.best_estimator_\n",
                "adaBoost_grid.score(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2773\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "257",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## Pros and cons of boosting\n",
                "\n",
                "---\n",
                "\n",
                "### Pros\n",
                "\n",
                "- Achieves higher performance than bagging when hyper-parameters tuned properly.\n",
                "- Can be used for classification and regression equally well.\n",
                "- Easily handles mixed data types.\n",
                "- Can use \"robust\" loss functions that make the model resistant to outliers.\n",
                "\n",
                "---\n",
                "\n",
                "### Cons\n",
                "\n",
                "- Difficult and time consuming to properly tune hyper-parameters.\n",
                "- Cannot be parallelized like bagging (bad scalability when huge amounts of data).\n",
                "- More risk of overfitting compared to bagging.\n",
                "\n",
                "<h3>Resources: </h3>\n",
                "<ul>\n",
                "    <li><a href=\"http://mccormickml.com/2013/12/13/adaboost-tutorial/\">AdaBoost Tutorial-Chris McCormick</a></li>\n",
                "    <li><a href=\"http://rob.schapire.net/papers/explaining-adaboost.pdf\">Explaining AdaBoost by Robert Schapire(One of the original author of AdaBoost)</a></li>\n",
                "</ul>\n",
                "\n",
                "## 7i. Gradient Boosting Classifier\n",
                "\n",
                "<a id=\"gradient_boosting\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "258",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: d32d6df9-b8e7-4637-bacc-2baec08547b8\n",
                "#| _uuid: fd788c4f4cde834a1329f325f1f59e3f77c37e42\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:28.360536Z', iopub.status.busy: '2021-06-26T16:41:28.360265Z', iopub.status.idle: '2021-06-26T16:41:28.521396Z', shell.execute_reply: '2021-06-26T16:41:28.520426Z', shell.execute_reply.started: '2021-06-26T16:41:28.360479Z'}\n",
                "#| scrolled: true\n",
                "# Gradient Boosting Classifier\n",
                "from sklearn.ensemble import GradientBoostingClassifier\n",
                "\n",
                "gradient_boost = GradientBoostingClassifier()\n",
                "gradient_boost.fit(X, y)\n",
                "y_pred = gradient_boost.predict(X_test)\n",
                "gradient_accy = round(accuracy_score(y_pred, y_test), 3)\n",
                "print(gradient_accy)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "259",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "<div class=\" alert alert-info\">\n",
                "<h3>Resources: </h3>\n",
                "<ul>\n",
                "    <li><a href=\"https://www.youtube.com/watch?v=sDv4f4s2SB8\">Gradient Descent(StatQuest)</a></li>\n",
                "    <li><a href=\"https://www.youtube.com/watch?v=3CC4N4z3GJc\">Gradient Boost(Regression Main Ideas)(StatQuest)</a></li>\n",
                "    <li><a href=\"https://www.youtube.com/watch?v=3CC4N4z3GJc\">Gradient Boost(Regression Calculation)(StatQuest)</a></li>\n",
                "    <li><a href=\"https://www.youtube.com/watch?v=jxuNLH5dXCs\">Gradient Boost(Classification Main Ideas)(StatQuest)</a></li>\n",
                "    <li><a href=\"https://www.youtube.com/watch?v=StWY5QWMXCw\">Gradient Boost(Classification Calculation)(StatQuest)</a></li>\n",
                "    <li><a href=\"https://www.analyticsvidhya.com/blog/2016/02/complete-guide-parameter-tuning-gradient-boosting-gbm-python/\">Complete Machine Learning Guide to Parameter Tuning in Gradient Boosting (GBM) in Python</a></li>\n",
                "</ul>\n",
                "</div>\n",
                "\n",
                "## 7j. XGBClassifier\n",
                "\n",
                "<a id=\"XGBClassifier\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "260",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 5d94cc5b-d8b7-40d3-b264-138539daabfa\n",
                "#| _uuid: 9d96154d2267ea26a6682a73bd1850026eb1303b\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:28.523177Z', iopub.status.busy: '2021-06-26T16:41:28.522724Z', iopub.status.idle: '2021-06-26T16:41:28.526955Z', shell.execute_reply: '2021-06-26T16:41:28.525945Z', shell.execute_reply.started: '2021-06-26T16:41:28.522964Z'}\n",
                "# from xgboost import XGBClassifier\n",
                "# XGBClassifier = XGBClassifier()\n",
                "# XGBClassifier.fit(X, y)\n",
                "# y_pred = XGBClassifier.predict(X_test)\n",
                "# XGBClassifier_accy = round(accuracy_score(y_pred, y_test), 3)\n",
                "# print(XGBClassifier_accy)"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "261",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## 7k. Extra Trees Classifier\n",
                "\n",
                "<a id=\"extra_tree\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "262",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 2e567e01-6b5f-4313-84af-cc378c3b709e\n",
                "#| _uuid: c9b958e2488adf6f79401c677087e3250d63ac9b\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:28.528841Z', iopub.status.busy: '2021-06-26T16:41:28.528382Z', iopub.status.idle: '2021-06-26T16:41:28.555697Z', shell.execute_reply: '2021-06-26T16:41:28.554889Z', shell.execute_reply.started: '2021-06-26T16:41:28.528664Z'}\n",
                "from sklearn.ensemble import ExtraTreesClassifier\n",
                "ExtraTreesClassifier = ExtraTreesClassifier()\n",
                "ExtraTreesClassifier.fit(X, y)\n",
                "y_pred = ExtraTreesClassifier.predict(X_test)\n",
                "extraTree_accy = round(accuracy_score(y_pred, y_test), 3)\n",
                "print(extraTree_accy)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "263",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## 7l. Gaussian Process Classifier\n",
                "\n",
                "<a id=\"GaussianProcessClassifier\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "264",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 23bd5744-e04d-49bb-9d70-7c2a518f76dd\n",
                "#| _uuid: 57fc008eea2ce1c0b595f888a82ddeaee6ce2177\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:28.557268Z', iopub.status.busy: '2021-06-26T16:41:28.556845Z', iopub.status.idle: '2021-06-26T16:41:28.863352Z', shell.execute_reply: '2021-06-26T16:41:28.862576Z', shell.execute_reply.started: '2021-06-26T16:41:28.557221Z'}\n",
                "from sklearn.gaussian_process import GaussianProcessClassifier\n",
                "GaussianProcessClassifier = GaussianProcessClassifier()\n",
                "GaussianProcessClassifier.fit(X, y)\n",
                "y_pred = GaussianProcessClassifier.predict(X_test)\n",
                "gau_pro_accy = round(accuracy_score(y_pred, y_test), 3)\n",
                "print(gau_pro_accy)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "265",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "## 7m. Voting Classifier\n",
                "\n",
                "<a id=\"voting_classifer\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "266",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: ac208dd3-1045-47bb-9512-de5ecb5c81b0\n",
                "#| _uuid: 821c74bbf404193219eb91fe53755d669f5a14d1\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:28.865063Z', iopub.status.busy: '2021-06-26T16:41:28.86463Z', iopub.status.idle: '2021-06-26T16:41:30.314425Z', shell.execute_reply: '2021-06-26T16:41:30.313671Z', shell.execute_reply.started: '2021-06-26T16:41:28.865013Z'}\n",
                "from sklearn.ensemble import VotingClassifier\n",
                "\n",
                "voting_classifier = VotingClassifier(estimators=[\n",
                "    ('lr_grid', logreg_grid),\n",
                "    ('svc', svm_grid),\n",
                "    ('random_forest', rf_grid),\n",
                "    ('gradient_boosting', gradient_boost),\n",
                "    ('decision_tree_grid',dectree_grid),\n",
                "    ('knn_classifier', knn_grid),\n",
                "#     ('XGB_Classifier', XGBClassifier),\n",
                "    ('bagging_classifier', bagging_grid),\n",
                "    ('adaBoost_classifier',adaBoost_grid),\n",
                "    ('ExtraTrees_Classifier', ExtraTreesClassifier),\n",
                "    ('gaussian_classifier',gaussian),\n",
                "    ('gaussian_process_classifier', GaussianProcessClassifier)\n",
                "],voting='hard')\n",
                "\n",
                "#voting_classifier = voting_classifier.fit(train_x,train_y)\n",
                "voting_classifier = voting_classifier.fit(X,y)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:from, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `from` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports."
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "267",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "268",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 648ac6a6-2437-490a-bf76-1612a71126e8\n",
                "#| _uuid: 518a02ae91cc91d618e476d1fc643cd3912ee5fb\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:30.316454Z', iopub.status.busy: '2021-06-26T16:41:30.316008Z', iopub.status.idle: '2021-06-26T16:41:30.42114Z', shell.execute_reply: '2021-06-26T16:41:30.420152Z', shell.execute_reply.started: '2021-06-26T16:41:30.31627Z'}\n",
                "y_pred = voting_classifier.predict(X_test)\n",
                "voting_accy = round(accuracy_score(y_pred, y_test), 3)\n",
                "print(voting_accy)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:voting_classifier, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `voting_classifier` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2924\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "269",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "270",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 277534eb-7ec8-4359-a2f4-30f7f76611b8\n",
                "#| _kg_hide-input: true\n",
                "#| _uuid: 00a9b98fd4e230db427a63596a2747f05b1654c1\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:30.422908Z', iopub.status.busy: '2021-06-26T16:41:30.422475Z', iopub.status.idle: '2021-06-26T16:41:30.426856Z', shell.execute_reply: '2021-06-26T16:41:30.425882Z', shell.execute_reply.started: '2021-06-26T16:41:30.422736Z'}\n",
                "#models = pd.DataFrame({\n",
                "#    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression',\n",
                "#              'Random Forest', 'Naive Bayes',\n",
                "#              'Decision Tree', 'Gradient Boosting Classifier', 'Voting Classifier', 'XGB Classifier','ExtraTrees Classifier','Bagging Classifier'],\n",
                "#    'Score': [svc_accy, knn_accy, logreg_accy,\n",
                "#              random_accy, gaussian_accy, dectree_accy,\n",
                "#               gradient_accy, voting_accy, XGBClassifier_accy, extraTree_accy, bagging_accy]})\n",
                "#models.sort_values(by='Score', ascending=False)"
            ],
            "outputs": [
            ],
            "execution_count": 1
        },
        {
            "id": "271",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "# Part 8: Submit test predictions\n",
                "\n",
                "<a id=\"submit_predictions\"></a>\n",
                "\n",
                "---"
            ]
        },
        {
            "id": "272",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _uuid: eb0054822f296ba86aa6005b2a5e35fbc1aec88b\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:30.429099Z', iopub.status.busy: '2021-06-26T16:41:30.42862Z', iopub.status.idle: '2021-06-26T16:41:30.646363Z', shell.execute_reply: '2021-06-26T16:41:30.645616Z', shell.execute_reply.started: '2021-06-26T16:41:30.428903Z'}\n",
                "all_models = [logreg_grid,\n",
                "              knn_grid,\n",
                "              knn_ran_grid,\n",
                "              svm_grid,\n",
                "              dectree_grid,\n",
                "              rf_grid,\n",
                "              bagging_grid,\n",
                "              adaBoost_grid,\n",
                "              voting_classifier]\n",
                "\n",
                "c = {}\n",
                "for i in all_models:\n",
                "    a = i.predict(X_test)\n",
                "    b = accuracy_score(a, y_test)\n",
                "    c[i] = b\n",
                ""
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:logreg_grid, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `logreg_grid` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2953\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "273",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
            ]
        },
        {
            "id": "274",
            "cell_type": "code",
            "metadata": {
            },
            "source": [
                "#| _cell_guid: 51368e53-52e4-41cf-9cc9-af6164c9c6f5\n",
                "#| _uuid: b947f168f6655c1c6eadaf53f3485d57c0cd74c7\n",
                "#| execution: {iopub.execute_input: '2021-06-26T16:41:30.648318Z', iopub.status.busy: '2021-06-26T16:41:30.647987Z', iopub.status.idle: '2021-06-26T16:41:32.045557Z', shell.execute_reply: '2021-06-26T16:41:32.044733Z', shell.execute_reply.started: '2021-06-26T16:41:30.648259Z'}\n",
                "test_prediction = (max(c, key=c.get)).predict(test)\n",
                "submission = pd.DataFrame({\n",
                "        \"PassengerId\": passengerid,\n",
                "        \"Survived\": test_prediction\n",
                "    })\n",
                "\n",
                "submission.PassengerId = submission.PassengerId.astype(int)\n",
                "submission.Survived = submission.Survived.astype(int)\n",
                "\n",
                "submission.to_csv(\"titanic1_submission.csv\", index=False)"
            ],
            "outputs": [
                {
                    "output_type": "error",
                    "ename": "UndefVarError",
                    "evalue": "UndefVarError(:c, Main.Notebook)",
                    "traceback": [
                        "UndefVarError: `c` not defined in `Main.Notebook`",
                        "Suggestion: check for spelling errors or missing imports.",
                        "Stacktrace:",
                        " [1] top-level scope",
                        "\u001b[90m   @\u001b[39m \u001b[90mC:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\\u001b[39m\u001b[90m\u001b[4mjulia-titanic-wokflow.qmd:2975\u001b[24m\u001b[39m"
                    ]
                }
            ],
            "execution_count": 1
        },
        {
            "id": "275",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "\n",
                "<div class=\"alert alert-info\">\n",
                "    <h1>Resources</h1>\n",
                "    <ul>\n",
                "        <li><b>Statistics</b></li>\n",
                "        <ul>\n",
                "            <li><a href=\"https://statistics.laerd.com/statistical-guides/measures-of-spread-standard-deviation.php\">Types of Standard Deviation</a></li>\n",
                "            <li><a href=\"https://blog.minitab.com/blog/statistics-and-quality-data-analysis/what-is-a-t-test-and-why-is-it-like-telling-a-kid-to-clean-up-that-mess-in-the-kitchen\">What Is a t-test? And Why Is It Like Telling a Kid to Clean Up that Mess in the Kitchen?</a></li>\n",
                "            <li><a href=\"https://blog.minitab.com/blog/statistics-and-quality-data-analysis/what-are-t-values-and-p-values-in-statistics\">What Are T Values and P Values in Statistics?</a></li>\n",
                "            <li><a href=\"https://www.youtube.com/watch?v=E4KCfcVwzyw\">What is p-value? How we decide on our confidence level.</a></li>\n",
                "        </ul>\n",
                "        <li><b>Writing pythonic code</b></li>\n",
                "        <ul>\n",
                "            <li><a href=\"https://www.kaggle.com/rtatman/six-steps-to-more-professional-data-science-code\">Six steps to more professional data science code</a></li>\n",
                "            <li><a href=\"https://www.kaggle.com/jpmiller/creating-a-good-analytics-report\">Creating a Good Analytics Report</a></li>\n",
                "            <li><a href=\"https://en.wikipedia.org/wiki/Code_smell\">Code Smell</a></li>\n",
                "            <li><a href=\"https://www.python.org/dev/peps/pep-0008/\">Python style guides</a></li>\n",
                "            <li><a href=\"https://gist.github.com/sloria/7001839\">The Best of the Best Practices(BOBP) Guide for Python</a></li>\n",
                "            <li><a href=\"https://www.python.org/dev/peps/pep-0020/\">PEP 20 -- The Zen of Python</a></li>\n",
                "            <li><a href=\"https://docs.python-guide.org/\">The Hitchiker's Guide to Python</a></li>\n",
                "            <li><a href=\"https://realpython.com/tutorials/best-practices/\">Python Best Practice Patterns</a></li>\n",
                "            <li><a href=\"http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/\">Pythonic Sensibilities</a></li>\n",
                "        </ul>\n",
                "        <li><b>Why Scikit-Learn?</b></li>\n",
                "        <ul>\n",
                "            <li><a href=\"https://www.oreilly.com/content/intro-to-scikit-learn/\">Introduction to Scikit-Learn</a></li>\n",
                "            <li><a href=\"https://www.oreilly.com/content/six-reasons-why-i-recommend-scikit-learn/\">Six reasons why I recommend scikit-learn</a></li>\n",
                "            <li><a href=\"https://hub.packtpub.com/learn-scikit-learn/\">Why you should learn Scikit-learn</a></li>\n",
                "            <li><a href=\"https://www.kaggle.com/baghern/a-deep-dive-into-sklearn-pipelines\">A Deep Dive Into Sklearn Pipelines</a></li>\n",
                "            <li><a href=\"https://www.kaggle.com/sermakarevich/sklearn-pipelines-tutorial\">Sklearn pipelines tutorial</a></li>\n",
                "            <li><a href=\"https://www.kdnuggets.com/2017/12/managing-machine-learning-workflows-scikit-learn-pipelines-part-1.html\">Managing Machine Learning workflows with Sklearn pipelines</a></li>\n",
                "            <li><a href=\"https://towardsdatascience.com/a-simple-example-of-pipeline-in-machine-learning-with-scikit-learn-e726ffbb6976\">A simple example of pipeline in Machine Learning using SKlearn</a></li>\n",
                "        </ul>\n",
                "    </ul>\n",
                "    <h1>Credits</h1>\n",
                "    <ul>\n",
                "        <li>To Brandon Foltz for his <a href=\"https://www.youtube.com/channel/UCFrjdcImgcQVyFbK04MBEhA\">youtube</a> channel and for being an amazing teacher.</li>\n",
                "        <li>To GA where I started my data science journey.</li>\n",
                "        <li>To Kaggle community for inspiring me over and over again with all the resources I need.</li>\n",
                "        <li>To Udemy Course \"Deployment of Machine Learning\". I have used and modified some of the code from this course to help making the learning process intuitive.</li>\n",
                "    </ul>\n",
                "</div>\n",
                "\n",
                "<div class=\"alert alert-info\">\n",
                "<h4>If you like to discuss any other projects or just have a chat about data science topics, I'll be more than happy to connect with you on:</h4>\n",
                "    <ul>\n",
                "        <li><a href=\"https://www.linkedin.com/in/masumrumi/\"><b>LinkedIn</b></a></li>\n",
                "        <li><a href=\"https://github.com/masumrumi\"><b>Github</b></a></li>\n",
                "        <li><a href=\"https://masumrumi.github.io/cv/\"><b>masumrumi.github.io/cv/</b></a></li>\n",
                "        <li><a href=\"https://www.youtube.com/channel/UC1mPjGyLcZmsMgZ8SJgrfdw\"><b>Youtube</b></a></li>\n",
                "    </ul>\n",
                "\n",
                "<p>This kernel will always be a work in progress. I will incorporate new concepts of data science as I comprehend them with each update. If you have any idea/suggestions about this notebook, please let me know. Any feedback about further improvements would be genuinely appreciated.</p>\n",
                "\n",
                "<h1>If you have come this far, Congratulations!!</h1>\n",
                "\n",
                "<h1>If this notebook helped you in any way or you liked it, please upvote and/or leave a comment!! :)</h1></div>"
            ]
        }
    ],
    "timestamp": "2025-07-08T12:48:22.64",
    "file": "C:\\Users\\Fabrizio\\Documents\\Projects\\Estudio-IA\\dia10\\julia-titanic-notebook\\julia-titanic-wokflow.qmd",
    "qnr_schema_version": "1.0.0"
}